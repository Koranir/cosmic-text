var searchIndex = JSON.parse('{\
"aliasable":{"doc":"Basic aliasable (non <code>core::ptr::Unique</code>) types.","t":"DAAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AliasableMut","boxed","prelude","string","vec","AliasableBox","UniqueBox","allocator","as_mut","as_mut","as_ref","as_ref","assume_init","assume_init","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","call_mut","call_once","cause","clone","clone","clone","clone","clone_from","clone_from","clone_into","cmp","default","default","default","default","deref","deref","deref_mut","deref_mut","description","downcast","downcast","downcast","downcast_unchecked","downcast_unchecked","downcast_unchecked","drop","drop","eq","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw_in","from_unique","from_unique_pin","ge","gt","hash","into","into","into_boxed_slice","into_future","into_inner","into_iter","into_pin","into_raw","into_raw_with_allocator","into_searcher","into_unique","into_unique_pin","is_contained_in","is_empty","is_prefix_of","is_suffix_of","last","le","leak","len","lt","ne","new","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_back","nth","nth_back","partial_cmp","pin","pin_in","poll","poll_next","provide","resume","size_hint","size_hint","source","strip_prefix_of","strip_suffix_of","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_uninit_slice","try_new_zeroed","try_new_zeroed_in","try_new_zeroed_slice","type_id","type_id","write","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","AliasableMut","as_mut","as_ref","borrow","borrow_mut","deref","deref_mut","fmt","from","from","from_unique","from_unique_pin","into","into_unique","into_unique_pin","try_from","try_into","type_id","AliasableString","UniqueString","add","add_assign","as_bytes","as_mut","as_mut","as_mut_str","as_mut_vec","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_from","clone_into","cmp","default","deref","deref","deref_mut","deref_mut","drain","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend_from_within","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw_parts","from_str","from_unique","from_unique_pin","from_utf16","from_utf16_lossy","from_utf8","from_utf8_lossy","from_utf8_unchecked","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert_str","into","into","into_boxed_str","into_bytes","into_bytes","into_raw_parts","into_searcher","into_unique","into_unique_pin","is_contained_in","is_empty","is_prefix_of","is_suffix_of","leak","len","ne","ne","ne","new","partial_cmp","pop","push","push_str","remove","remove_matches","replace_range","reserve","reserve_exact","retain","shrink_to","shrink_to_fit","split_off","strip_prefix_of","strip_suffix_of","to_owned","to_string","to_string","truncate","try_from","try_from","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","with_capacity","write_char","write_str","AliasableVec","UniqueVec","allocator","append","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_ptr","as_ref","as_ref","as_ref","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_from","clone_into","cmp","dedup","dedup_by","dedup_by_key","default","deref","deref","deref_mut","deref_mut","drain","drain_filter","drop","drop","eq","eq","eq","eq","eq","eq","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw_parts","from_raw_parts_in","from_unique","from_unique_pin","hash","index","index_mut","insert","into","into","into_boxed_slice","into_flattened","into_iter","into_iter","into_iter","into_raw_parts","into_raw_parts_with_alloc","into_unique","into_unique_pin","is_empty","leak","len","ne","ne","ne","ne","ne","ne","new","new_in","partial_cmp","pop","push","push_within_capacity","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","set_len","shrink_to","shrink_to_fit","spare_capacity_mut","splice","split_at_spare_mut","split_off","swap_remove","to_owned","truncate","try_from","try_from","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","with_capacity","with_capacity_in"],"q":[[0,"aliasable"],[5,"aliasable::boxed"],[169,"aliasable::prelude"],[187,"aliasable::string"],[328,"aliasable::vec"]],"d":["Basic aliasable alternative to <code>&amp;mut</code>.","Aliasable <code>Box</code>.","Export of all types enabled.","Aliasable <code>String</code>.","Aliasable <code>Vec</code>.","Basic aliasable (non <code>core::ptr::Unique</code>) alternative to …","A pointer type that uniquely owns a heap allocation of …","Returns a reference to the underlying allocator.","","","","","Converts to <code>Box&lt;T, A&gt;</code>.","Converts to <code>Box&lt;[T], A&gt;</code>.","","","","","","","","","","","","","","Returns a new box with a <code>clone()</code> of this box’s contents.","Copies <code>source</code>’s contents into <code>self</code> without creating a …","","","","","","Creates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.","","","","","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>String</code> into a box of dyn <code>Error</code>.","Converts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …","Converts a <code>T</code> into a <code>Box&lt;T&gt;</code>","Convert a vector into a boxed slice.","Converts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>","Converts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …","Converts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …","Converts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …","Converts a type of <code>Error</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>","Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>","","Converts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a <code>str</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow</code> into a box of dyn <code>Error</code>.","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …","Converts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given allocator.","Construct an <code>AliasableBox</code> from a <code>UniqueBox</code>.","Convert a pinned <code>core::ptr::Unique</code> backed <code>UniqueBox</code> to a …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>","","Consumes the <code>Box</code>, returning the wrapped value.","","Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","Consumes <code>self</code> and converts it into a non-aliasable …","Convert a pinned <code>AliasableBox</code> to a <code>core::ptr::Unique</code> …","","","","","","","Consumes and leaks the <code>Box</code>, returning a mutable reference, …","","","","Allocates memory on the heap and then places <code>x</code> into it.","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents.","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents.","Constructs a new boxed slice with uninitialized contents …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","Constructs a new boxed slice with uninitialized contents …","","","","","","Constructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …","","","","","","","","","","","","","Attempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","Attempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","","","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents. …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","","","Writes the value and converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","","","","Basic aliasable alternative to <code>&amp;mut</code>.","","","","","","","","Returns the argument unchanged.","","Construct an <code>AliasableMut</code> from an <code>&amp;mut</code>.","Convert a pinned <code>&amp;mut</code> to a pinned <code>AliasableMut</code>.","Calls <code>U::from(self)</code>.","Consumes <code>self</code> and converts it into a non-aliasable <code>&amp;mut</code>.","Convert a pinned <code>AliasableMut</code> to a pinned <code>&amp;mut</code>.","","","","Basic aliasable (non <code>core::ptr::Unique</code>) alternative to …","A UTF-8–encoded, growable string.","","","Returns a byte slice of this <code>String</code>’s contents.","","","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","","","","Extracts a string slice containing the entire <code>String</code>.","","","","","","","Returns this <code>String</code>’s capacity, in bytes.","Truncates this <code>String</code>, removing all contents.","","","","","Creates an empty <code>String</code>.","","","","","Removes the specified range from the string in bulk, …","","","","","","","","","","","Copies elements from <code>src</code> range to the end of the string.","","","","","","","","","","","Returns the argument unchanged.","","","Converts a <code>&amp;str</code> into a <code>String</code>.","Converts a <code>&amp;mut str</code> into a <code>String</code>.","Converts a <code>&amp;String</code> into a <code>String</code>.","Converts a clone-on-write string to an owned instance of …","Allocates an owned <code>String</code> from a single character.","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …","Returns the argument unchanged.","","","","","","","Creates a new <code>String</code> from a length, capacity, and pointer.","","Construct an <code>AliasableString</code> from a <code>UniqueString</code>.","Convert a pinned <code>core::ptr::Unique</code> backed <code>UniqueString</code> to a","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","","","","","","","","","","","","","","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>String</code> into a Box&lt;str&gt;.","Consumes <code>self</code> into an <code>AliasableVec</code> of UTF-8 bytes.","Converts a <code>String</code> into a byte vector.","Decomposes a <code>String</code> into its raw components.","","Consumes <code>self</code> and converts it into a non-aliasable …","Convert a pinned <code>AliasableString</code> to a <code>core::ptr::Unique</code> …","","Returns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…","","","Consumes and leaks the <code>String</code>, returning a mutable …","Returns the length of this <code>String</code>, in bytes, not <code>char</code>s or …","","","","Creates a new empty <code>String</code>.","","Removes the last character from the string buffer and …","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Remove all matches of pattern <code>pat</code> in the <code>String</code>.","Removes the specified range in the string, and replaces it …","Reserves capacity for at least <code>additional</code> bytes more than …","Reserves the minimum capacity for at least <code>additional</code> …","Retains only the characters specified by the predicate.","Shrinks the capacity of this <code>String</code> with a lower bound.","Shrinks the capacity of this <code>String</code> to match its length.","Splits the string into two at the given byte index.","","","","","","Shortens this <code>String</code> to the specified length.","","","","","Tries to reserve capacity for at least <code>additional</code> bytes …","Tries to reserve the minimum capacity for at least …","","","Creates a new empty <code>String</code> with at least the specified …","","","Basic aliasable (non <code>core::ptr::Unique</code>) alternative to …","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","","","Returns an unsafe mutable pointer to the vector’s …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer, or a …","","","","Extracts a slice containing the entire vector.","","","","","","","Returns the total number of elements the vector can hold …","Clears the vector, removing all values.","","","","","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates an empty <code>Vec&lt;T&gt;</code>.","","","","","Removes the specified range from the vector in bulk, …","Creates an iterator which uses a closure to determine if …","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","","","","Returns the argument unchanged.","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Convert a clone-on-write slice into a vector.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Convert a boxed slice into a vector by transferring …","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","Returns the argument unchanged.","","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","","Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …","Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …","Construct an <code>AliasableVec</code> from a <code>UniqueVec</code>.","Convert a pinned <code>core::ptr::Unique</code> backed <code>UniqueVec</code> to a …","","","","Inserts an element at position <code>index</code> within the vector, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","Creates a consuming iterator, that is, one that moves each …","","","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Consumes the <code>AliasableVec</code> and converts it back into a …","Convert a pinned <code>AliasableVec</code> to a <code>core::ptr::Unique</code> …","Returns <code>true</code> if the vector contains no elements.","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","Removes the last element from a vector and returns it, or …","Appends an element to the back of a collection.","Appends an element if there is sufficient spare capacity, …","Removes and returns the element at position <code>index</code> within …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Removes an element from the vector and returns it.","","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …"],"i":[0,0,0,0,0,0,0,3,4,3,4,3,3,3,4,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,4,3,3,3,3,3,3,3,3,4,3,3,3,4,3,3,3,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,3,3,3,4,3,3,3,3,3,3,3,3,3,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,4,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,31,31,31,69,31,31,31,69,31,31,31,69,31,31,69,31,31,31,31,31,31,31,31,31,69,31,69,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,69,31,31,69,69,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,69,69,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,69,31,31,69,31,31,31,69,69,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,69,31,69,31,31,31,69,31,31,31,31,0,0,34,34,81,34,34,34,34,34,81,34,34,34,81,34,34,81,34,34,34,34,34,34,34,34,34,34,34,34,81,34,81,34,34,34,81,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,81,34,81,81,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,81,81,34,34,34,34,81,34,34,34,34,34,34,34,34,81,81,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,81,34,81,34,34,34,81,34,34,34],"f":[0,0,0,0,0,0,0,[[[3,[1,2]]],2],[[[4,[1]]],1],[[[3,[1,2]]],1],[[[4,[1]]],1],[[[3,[1,2]]],1],[[[3,[5,2]]],[[3,[2]]]],[[[3,[[6,[5]],2]]],[[3,[6,2]]]],[[]],[[]],[[[3,[1,2]]],1],[[]],[[[3,[1,2]]],1],[[]],[[[3,[[0,[[8,[7]],1]],2]],7]],[[[3,[[0,[[9,[7]],1]],2]],7]],[[[3,[[0,[[10,[7]],1]],2]],7]],[[[3,[11,12]]],[[13,[11]]]],[[[3,[14,12]]],[[3,[14,12]]]],[[[3,[15,12]]],[[3,[15,12]]]],[[[3,[[6,[16]],[0,[2,16]]]]],[[3,[[6,[16]],[0,[2,16]]]]]],[[[3,[16,[0,[2,16]]]]],[[3,[16,[0,[2,16]]]]]],[[[3,[16,[0,[2,16]]]],[3,[16,[0,[2,16]]]]]],[[[3,[[6,[16]],[0,[2,16]]]],[3,[[6,[16]],[0,[2,16]]]]]],[[]],[[[3,[[0,[17,1]],2]],[3,[[0,[17,1]],2]]],18],[[],[[3,[14,12]]]],[[],[[3,[6,12]]]],[[],[[3,[19,12]]]],[[],[[3,[15,12]]]],[[[4,[1]]],1],[[[3,[1,2]]],1],[[[4,[1]]],1],[[[3,[1,2]]],1],[[[3,[11,12]]],14],[[[3,[20,2]]],[[21,[[3,[20,2]],[3,[20,2]]]]]],[[[3,[20,2]]],[[21,[[3,[20,2]],[3,[20,2]]]]]],[[[3,[20,2]]],[[21,[[3,[20,2]],[3,[20,2]]]]]],[[[3,[20,2]]],[[3,[20,2]]]],[[[3,[20,2]]],[[3,[20,2]]]],[[[3,[20,2]]],[[3,[20,2]]]],[[[4,[1]]]],[[[3,[1,2]]]],[[[3,[[0,[[22,[[0,[[22,[[0,[[22,[[0,[22,1]]]],1]]]],1]]]],1]],2]],[3,[[0,[[22,[[0,[[22,[[0,[[22,[[0,[22,1]]]],1]]]],1]]]],1]],2]]],23],[[[3,[[0,[24,1]],2]]],25],[[[4,[[0,[26,1]]]],27],28],[[[3,[[0,[26,1]],2]],27],[[21,[29]]]],[[[3,[[0,[30,1]],2]],27],[[21,[29]]]],[[[3,[1,2]],27],[[21,[29]]]],[[[3,[1]]],[[4,[1]]]],[[]],[[]],[31,[[3,[11,12]]]],[[[0,[11,32,33]]],[[3,[11,12]]]],[[],[[3,[12]]]],[[[34,[2]]],[[3,[6,2]]]],[35,[[3,[6,12]]]],[14,[[3,[14,12]]]],[36,[[3,[15,12]]]],[15,[[3,[15,12]]]],[[[37,[15]]],[[3,[15,12]]]],[11,[[3,[11,12]]]],[[[37,[[6,[16]]]]],[[3,[[6,[16]],12]]]],[14,[[3,[11,12]]]],[[[37,[14]]],[[3,[14,12]]]],[[[3,[14,2]]],[[3,[[6,[38]],2]]]],[39],[[[37,[14]]],[[3,[11,12]]]],[14,[[3,[11,12]]]],[[[37,[14]]],[[3,[11,12]]]],[31,[[3,[14,12]]]],[[[6,[16]]],[[3,[[6,[16]],12]]]],[31,[[3,[11,12]]]],[40,[[3,[6,12]]]],[[],[[3,[1,12]]]],[2,[[3,[1,2]]]],[[[3,[1]]],[[4,[1]]]],[[[41,[[3,[1]]]]],[[41,[[4,[1]]]]]],[[[3,[[0,[[42,[[0,[[42,[[0,[[42,[[0,[42,1]]]],1]]]],1]]]],1]],2]],[3,[[0,[[42,[[0,[[42,[[0,[[42,[[0,[42,1]]]],1]]]],1]]]],1]],2]]],23],[[[3,[[0,[[42,[[0,[[42,[[0,[[42,[[0,[42,1]]]],1]]]],1]]]],1]],2]],[3,[[0,[[42,[[0,[[42,[[0,[[42,[[0,[42,1]]]],1]]]],1]]]],1]],2]]],23],[[[3,[[0,[43,1]],2]],24]],[[]],[[]],[[[3,[2]]],[[3,[6,2]]]],[[]],[[[3,[2]]]],[[]],[[[3,[1,2]]],[[41,[[3,[1,2]]]]]],[[[3,[1,2]]]],[[[3,[1,2]]]],[14,44],[[[4,[1]]],[[3,[1]]]],[[[41,[[4,[1]]]]],[[41,[[3,[1]]]]]],[14,23],[[[3,[[0,[45,1]],2]]],23],[14,23],[14,23],[[[3,[[0,[46,1]],2]]],13],[[[3,[[0,[[42,[[0,[[42,[[0,[[42,[[0,[42,1]]]],1]]]],1]]]],1]],2]],[3,[[0,[[42,[[0,[[42,[[0,[[42,[[0,[42,1]]]],1]]]],1]]]],1]],2]]],23],[[[3,[1,2]]],1],[[[3,[[0,[45,1]],2]]],47],[[[3,[[0,[[42,[[0,[[42,[[0,[[42,[[0,[42,1]]]],1]]]],1]]]],1]],2]],[3,[[0,[[42,[[0,[[42,[[0,[[42,[[0,[42,1]]]],1]]]],1]]]],1]],2]]],23],[[[3,[[0,[[22,[[0,[[22,[[0,[[22,[[0,[22,1]]]],1]]]],1]]]],1]],2]],[3,[[0,[[22,[[0,[[22,[[0,[[22,[[0,[22,1]]]],1]]]],1]]]],1]],2]]],23],[[],[[3,[12]]]],[[2,2],[[3,[2,2]]]],[[],[[3,[5,12]]]],[[2,2],[[3,[5,2,2]]]],[47,[[3,[[6,[5]],12]]]],[[47,2],[[3,[[6,[5]],2]]]],[[],[[3,[5,12]]]],[[2,2],[[3,[5,2,2]]]],[47,[[3,[[6,[5]],12]]]],[[47,2],[[3,[[6,[5]],2]]]],[[[3,[[0,[46,1]],2]]],13],[[[3,[[0,[48,1]],2]]],13],[[[3,[[0,[46,1]],2]],47],13],[[[3,[[0,[48,1]],2]],47],13],[[[3,[[0,[[42,[[0,[[42,[[0,[[42,[[0,[42,1]]]],1]]]],1]]]],1]],2]],[3,[[0,[[42,[[0,[[42,[[0,[[42,[[0,[42,1]]]],1]]]],1]]]],1]],2]]],[[13,[18]]]],[[],[[41,[[3,[12]]]]]],[[2,2],[[41,[[3,[2,2]]]]]],[[[41,[[3,[[0,[49,50,1]],2]]]],51],52],[[[41,[[3,[[0,[53,50,1]],12]]]],51],[[52,[13]]]],[54],[[[41,[[3,[[0,[55,50,1]],2]]]]],56],[[[3,[[0,[46,1]],2]]]],[[[3,[[0,[53,50,1]],12]]]],[[[3,[11,12]]],[[13,[11]]]],[14,[[13,[14]]]],[14,[[13,[14]]]],[[]],[[],31],[[],21],[[[34,[12]]],[[21,[[3,[35,12]]]]]],[[[3,[6,12]]],[[21,[[3,[35,12]]]]]],[[],21],[[],21],[[],21],[[],[[21,[[3,[12]],57]]]],[[2,2],[[21,[[3,[2,2]],57]]]],[[],[[21,[[3,[5,12]],57]]]],[[2,2],[[21,[[3,[5,2,2]],57]]]],[47,[[21,[[3,[[6,[5]],12]],57]]]],[[],[[21,[[3,[5,12]],57]]]],[[2,2],[[21,[[3,[5,2,2]],57]]]],[47,[[21,[[3,[[6,[5]],12]],57]]]],[[],58],[[],58],[[[3,[5,2]]],[[3,[2]]]],[[[3,[[0,[24,1]],2]],[6,[38]]]],[[[3,[[0,[24,1]],2]],59]],[[[3,[[0,[24,1]],2]],60]],[[[3,[[0,[24,1]],2]],61]],[[[3,[[0,[24,1]],2]],62]],[[[3,[[0,[24,1]],2]],63]],[[[3,[[0,[24,1]],2]],64]],[[[3,[[0,[24,1]],2]],47]],[[[3,[[0,[24,1]],2]],14]],[[[3,[[0,[24,1]],2]],65]],[[[3,[[0,[24,1]],2]],66]],[[[3,[[0,[24,1]],2]],67]],[[[3,[[0,[24,1]],2]],25]],[[[3,[[0,[24,1]],2]],38]],[[[3,[[0,[24,1]],2]],47]],0,[[[68,[1]]],1],[[[68,[1]]],1],[[]],[[]],[[[68,[1]]]],[[[68,[1]]]],[[[68,[[0,[26,1]]]],27],28],[[]],[1,[[68,[1]]]],[1,[[68,[1]]]],[[[41,[1]]],[[41,[[68,[1]]]]]],[[]],[[[68,[1]]],1],[[[41,[[68,[1]]]]],[[41,[1]]]],[[],21],[[],21],[[],58],0,0,[[31,14],31],[[31,14]],[31,[[6,[38]]]],[69,14],[31,14],[31,14],[31,[[34,[38,12]]]],[69,14],[31,14],[31,[[6,[38]]]],[31,14],[[]],[[]],[31,14],[[]],[[]],[31,14],[31,47],[31],[31,31],[[31,31]],[[]],[[31,31],18],[[],31],[69,14],[31,14],[69,14],[31,14],[[31,[70,[47]]],71],[[31,14],23],[[31,[37,[14]]],23],[[31,31],23],[[31,14],23],[[31,40]],[[31,40]],[[31,40]],[[31,40]],[[31,40]],[[31,40]],[[31,[70,[47]]]],[[31,72]],[[31,14]],[[31,31]],[[31,[37,[14]]]],[[31,72]],[[31,47]],[[31,47]],[[69,27],28],[[31,27],[[21,[29]]]],[[31,27],[[21,[29]]]],[[]],[31,69],[69,31],[14,31],[14,31],[31,31],[[[37,[14]]],31],[72,31],[[[3,[14,12]]],31],[[]],[40,31],[40,31],[40,31],[40,31],[40,31],[40,31],[[38,47,47],31],[14,[[21,[31]]]],[31,69],[[[41,[31]]],[[41,[69]]]],[[[6,[66]]],[[21,[31,73]]]],[[[6,[66]]],31],[[[34,[38,12]]],[[21,[31,74]]]],[[[6,[38]]],[[37,[14]]]],[[[34,[38,12]]],31],[[31,24]],[[31,75],14],[[31,[76,[47]]],14],[[31,[77,[47]]],14],[[31,[78,[47]]],14],[[31,[79,[47]]],14],[[31,[80,[47]]],14],[[31,[76,[47]]],14],[[31,[78,[47]]],14],[[31,[77,[47]]],14],[[31,[79,[47]]],14],[[31,[80,[47]]],14],[[31,75],14],[[31,47,72]],[[31,47,14]],[[]],[[]],[31,[[3,[14,12]]]],[69,[[81,[38]]]],[31,[[34,[38,12]]]],[31],[[31,14]],[69,31],[[[41,[69]]],[[41,[31]]]],[[31,14],23],[31,23],[[31,14],23],[[31,14],23],[31,14],[31,47],[[31,14],23],[[31,[37,[14]]],23],[[31,14],23],[[],31],[[31,31],[[13,[18]]]],[31,[[13,[72]]]],[[31,72]],[[31,14]],[[31,47],72],[[31,82]],[[31,[70,[47]],14]],[[31,47]],[[31,47]],[[31,9]],[[31,47]],[31],[[31,47],31],[[31,14],[[13,[14]]]],[[31,14],[[13,[14]]]],[[]],[[],31],[31,31],[[31,47]],[[],21],[[],21],[[],21],[[],21],[[31,47],[[21,[83]]]],[[31,47],[[21,[83]]]],[[],58],[[],58],[47,31],[[31,72],[[21,[29]]]],[[31,14],[[21,[29]]]],0,0,[[[34,[2]]],2],[[[34,[2]],[34,[2]]]],[81,6],[[[34,[2]]],[[34,[2]]]],[[[34,[2]]],6],[[[34,[2]]]],[[[34,[2]]],6],[[[34,[2]]]],[81,6],[[[34,[2]]],[[34,[2]]]],[[[34,[2]]],6],[[[34,[2]]],6],[[]],[[]],[[[34,[2]]],6],[[]],[[[34,[2]]],6],[[]],[[[34,[2]]],47],[[[34,[2]]]],[[[34,[16,[0,[2,16]]]]],[[34,[16,[0,[2,16]]]]]],[[[34,[16,[0,[2,16]]]],[34,[16,[0,[2,16]]]]]],[[]],[[[34,[17,2]],[34,[17,2]]],18],[[[34,[[22,[[22,[[22,[22]]]]]],2]]]],[[[34,[2]],9]],[[[34,[2]],9]],[[],[[34,[12]]]],[81,6],[[[34,[2]]],6],[81,6],[[[34,[2]]],6],[[[34,[2]],[70,[47]]],[[84,[2]]]],[[[34,[2]],9],[[85,[9,2]]]],[81],[[[34,[2]]]],[[[34,[22,2]],6],23],[[[34,[22,2]],35],23],[[[34,[22,2]],[34,[2]]],23],[[[34,[22,2]],35],23],[[[34,[22,2]],6],23],[[[34,[22,2]],6],23],[[[34,[2]],40]],[[[34,[86,2]],40]],[[[34,[16,2]],[6,[16]]]],[[[34,[16,2]],[70,[47]]]],[[[34,[2]]]],[[[34,[86,2]],86]],[[[34,[86,2]],47]],[[[34,[2]],47]],[[[81,[26]],27],28],[[[34,[26,2]],27],[[21,[29]]]],[34,81],[[]],[14,[[34,[38,12]]]],[[[37,[6]]],[[34,[12]]]],[[[6,[16]]],[[34,[16,12]]]],[[[3,[6,2]]],[[34,[2]]]],[87,[[34,[12]]]],[[[88,[2]]],[[34,[2]]]],[31,[[34,[38,12]]]],[[[6,[16]]],[[34,[16,12]]]],[35,[[34,[12]]]],[[]],[81,34],[36,[[34,[38,12]]]],[40,[[34,[12]]]],[[47,47],[[34,[12]]]],[[47,47,2],[[34,[2]]]],[34,81],[[[41,[34]]],[[41,[81]]]],[[[34,[43,2]],24]],[[[34,[2]],[89,[6]]]],[[[34,[2]],[89,[6]]]],[[[34,[2]],47]],[[]],[[]],[[[34,[2]]],[[3,[6,2]]]],[[[34,[35,2]]],[[34,[2]]]],[[[34,[2]]]],[[[34,[2]]]],[[[34,[2]]]],[[[34,[2]]]],[[[34,[2]]]],[81,34],[[[41,[81]]],[[41,[34]]]],[[[34,[2]]],23],[[[34,[2]]],6],[[[34,[2]]],47],[[[34,[22,2]],6],23],[[[34,[22,2]],35],23],[[[34,[22,2]],6],23],[[[34,[22,2]],35],23],[[[34,[22,2]],[34,[2]]],23],[[[34,[22,2]],6],23],[[],[[34,[12]]]],[2,[[34,[2]]]],[[[34,[[42,[[42,[[42,[42]]]]]],2]],[34,[[42,[[42,[[42,[42]]]]]],2]]],[[13,[18]]]],[[[34,[2]]],13],[[[34,[2]]]],[[[34,[2]]],21],[[[34,[2]],47]],[[[34,[2]],47]],[[[34,[2]],47]],[[[34,[16,2]],47,16]],[[[34,[2]],47,9]],[[[34,[2]],9]],[[[34,[2]],9]],[[[34,[2]],47]],[[[34,[2]],47]],[[[34,[2]]]],[[[34,[2]]],[[6,[5]]]],[[[34,[2]],[70,[47]],40],[[90,[2]]]],[[[34,[2]]]],[[[34,[16,2]],47],[[34,[16,2]]]],[[[34,[2]],47]],[[]],[[[34,[2]],47]],[[],21],[[],21],[[],21],[[],21],[[[34,[2]],47],[[21,[83]]]],[[[34,[2]],47],[[21,[83]]]],[[],58],[[],58],[47,[[34,[12]]]],[[47,2],[[34,[2]]]]],"c":[],"p":[[8,"Sized"],[8,"Allocator"],[3,"UniqueBox"],[3,"AliasableBox"],[19,"MaybeUninit"],[15,"slice"],[8,"Tuple"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Error"],[3,"Global"],[4,"Option"],[15,"str"],[3,"CStr"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"Any"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Hasher"],[15,"u64"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"Display"],[3,"UniqueString"],[8,"Send"],[8,"Sync"],[3,"UniqueVec"],[15,"array"],[3,"CString"],[4,"Cow"],[15,"u8"],[15,"never"],[8,"IntoIterator"],[3,"Pin"],[8,"PartialOrd"],[8,"Hash"],[3,"CharPredicateSearcher"],[8,"ExactSizeIterator"],[8,"Iterator"],[15,"usize"],[8,"DoubleEndedIterator"],[8,"Future"],[8,"Unpin"],[3,"Context"],[4,"Poll"],[8,"AsyncIterator"],[3,"Demand"],[8,"Generator"],[4,"GeneratorState"],[3,"AllocError"],[3,"TypeId"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u32"],[3,"AliasableMut"],[3,"AliasableString"],[8,"RangeBounds"],[3,"Drain"],[15,"char"],[3,"FromUtf16Error"],[3,"FromUtf8Error"],[3,"RangeFull"],[3,"RangeToInclusive"],[3,"RangeTo"],[3,"RangeFrom"],[3,"RangeInclusive"],[3,"Range"],[3,"AliasableVec"],[8,"Pattern"],[3,"TryReserveError"],[3,"Drain"],[3,"DrainFilter"],[8,"Copy"],[3,"BinaryHeap"],[3,"VecDeque"],[8,"SliceIndex"],[3,"Splice"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"O","n":["bitflags"],"q":[[0,"bitflags"]],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"c":[],"p":[]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between plain …","t":"NICIQSSINIEINNIIIALLFFFFFFFALLLLLLFFLLLLLLOOLLLLLLLLLLFFFLLFFFFFLFFLFLLLLLLLLLLLLLIFFFFFFFLLLLFFFFFFFFFFFLLLLFFFQIENNLLFFFFFLLLLLLLFFLLKFLLFFFFFLFFLFL","n":["AlignmentMismatch","AnyBitPattern","CheckedBitPattern","Contiguous","Int","MAX_VALUE","MIN_VALUE","NoUninit","OutputSliceWouldHaveSlop","Pod","PodCastError","PodInOption","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","ZeroableInOption","allocation","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","checked","clone","clone_into","eq","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","offset_of","peel","peel","peel_mut","peel_mut","peel_ref","peel_ref","peel_slice","peel_slice","peel_slice_mut","peel_slice_mut","pod_align_to","pod_align_to_mut","pod_read_unaligned","to_owned","to_string","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","wrap","wrap","wrap_mut","wrap_mut","wrap_ref","wrap_ref","wrap_slice","wrap_slice","wrap_slice_mut","wrap_slice_mut","zeroed","zeroed","TransparentWrapperAlloc","cast_arc","cast_box","cast_rc","cast_slice_arc","cast_slice_box","cast_slice_rc","cast_vec","peel_arc","peel_box","peel_rc","peel_vec","pod_collect_to_vec","try_cast_arc","try_cast_box","try_cast_rc","try_cast_slice_arc","try_cast_slice_box","try_cast_slice_rc","try_cast_vec","try_zeroed_box","try_zeroed_slice_box","try_zeroed_vec","wrap_arc","wrap_box","wrap_rc","wrap_vec","zeroed_box","zeroed_slice_box","zeroed_vec","Bits","CheckedBitPattern","CheckedCastError","InvalidBitPattern","PodCastError","borrow","borrow_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","clone_into","eq","fmt","fmt","from","from","from_bytes","from_bytes_mut","hash","into","is_valid_bit_pattern","pod_read_unaligned","to_owned","to_string","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id"],"q":[[0,"bytemuck"],[82,"bytemuck::allocation"],[112,"bytemuck::checked"]],"d":["For this type of cast the alignments must be exactly the …","Marker trait for “plain old data” types that are valid …","","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this type.","The lower <em>inclusive</em> bound for valid instances of this type.","Marker trait for “plain old data” types with no uninit …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between <code>Pod</code> data …","Trait for types which are Pod when wrapped in Option.","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a higher …","A trait which indicates that a type is a …","Trait for types that can be safely created with <code>zeroed</code>.","Trait for types which are Zeroable when wrapped in Option.","Stuff to boost things in the <code>alloc</code> crate.","","","Re-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.","Re-interprets <code>&amp;mut T</code> as <code>&amp;mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","Checked versions of the casting functions exposed in crate …","","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","Calls <code>U::from(self)</code>.","Perform the conversion from <code>C</code> into the underlying integral …","Perform the conversion from <code>C</code> into the underlying integral …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Convert the wrapper type into the inner type.","Convert the wrapper type into the inner type.","Convert a mutable reference to the wrapper type into a …","Convert a mutable reference to the wrapper type into a …","Convert a reference to the wrapper type into a reference …","Convert a reference to the wrapper type into a reference …","Convert a slice to the wrapped type into a slice to the …","Convert a slice to the wrapped type into a slice to the …","Convert a mutable slice to the wrapped type into a mutable …","Convert a mutable slice to the wrapped type into a mutable …","As <code>align_to</code>, but safe because of the <code>Pod</code> bound.","As <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.","Reads the slice into a <code>T</code> value.","","","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","","Convert the inner type into the wrapper type.","Convert the inner type into the wrapper type.","Convert a mutable reference to the inner type into a …","Convert a mutable reference to the inner type into a …","Convert a reference to the inner type into a reference to …","Convert a reference to the inner type into a reference to …","Convert a slice to the inner type into a slice to the …","Convert a slice to the inner type into a slice to the …","Convert a mutable slice to the inner type into a mutable …","Convert a mutable slice to the inner type into a mutable …","Calls <code>zeroed</code>.","Calls <code>zeroed</code>.","An extension trait for <code>TransparentWrapper</code> and alloc types.","As <code>try_cast_arc</code>, but unwraps for you.","As <code>try_cast_box</code>, but unwraps for you.","As <code>try_cast_rc</code>, but unwraps for you.","As <code>try_cast_slice_arc</code>, but unwraps for you.","As <code>try_cast_slice_box</code>, but unwraps for you.","As <code>try_cast_slice_rc</code>, but unwraps for you.","As <code>try_cast_vec</code>, but unwraps for you.","Convert an <code>Arc</code> to the wrapper type into an <code>Arc</code> to the …","Convert a box to the wrapper type into a box to the inner …","Convert an <code>Rc</code> to the wrapper type into an <code>Rc</code> to the inner …","Convert a vec of the wrapper type into a vec of the inner …","This “collects” a slice of pod data into a vec of a …","Attempts to cast the content type of a <code>Arc</code>.","Attempts to cast the content type of a <code>Box</code>.","Attempts to cast the content type of a <code>Rc</code>.","Attempts to cast the content type of a <code>Arc&lt;[T]&gt;</code>.","Attempts to cast the content type of a <code>Box&lt;[T]&gt;</code>.","Attempts to cast the content type of a <code>Rc&lt;[T]&gt;</code>.","Attempts to cast the content type of a <code>Vec</code>.","Allocates a <code>Box&lt;T&gt;</code> with all of the contents being zeroed …","Allocates a <code>Box&lt;[T]&gt;</code> with all contents being zeroed out.","Allocates a <code>Vec&lt;T&gt;</code> of length and capacity exactly equal to …","Convert an <code>Arc</code> to the inner type into an <code>Arc</code> to the …","Convert a box to the inner type into a box to the wrapper …","Convert an <code>Rc</code> to the inner type into an <code>Rc</code> to the wrapper …","Convert a vec of the inner type into a vec of the wrapper …","As <code>try_zeroed_box</code>, but unwraps for you.","As <code>try_zeroed_slice_box</code>, but unwraps for you.","As <code>try_zeroed_vec</code> but unwraps for you","<code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> …","A marker trait that allows types that have some invalid …","The things that can go wrong when casting between …","When casting to a <code>CheckedBitPattern</code> type, it is possible …","An error occurred during a true-<code>Pod</code> cast","","","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","","","","","","Returns the argument unchanged.","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Calls <code>U::from(self)</code>.","If this function returns true, then it must be valid to …","Reads the slice into a <code>T</code> value.","","","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.",""],"i":[5,0,0,0,23,23,23,0,5,0,0,0,5,5,0,0,0,0,5,5,0,0,0,0,0,0,0,0,5,5,5,5,5,5,0,0,23,23,5,5,23,23,0,0,24,24,24,24,24,24,24,24,24,24,0,0,0,5,5,0,0,0,0,0,5,0,0,5,0,5,24,24,24,24,24,24,24,24,24,24,19,19,0,0,0,0,0,0,0,0,25,25,25,25,0,0,0,0,0,0,0,0,0,0,0,25,25,25,25,0,0,0,21,0,0,22,22,22,22,0,0,0,0,0,22,22,22,22,22,22,22,0,0,22,22,21,0,22,22,0,0,0,0,0,22,0,0,22,0,22],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,[[3,[2]]]],[[[0,[1,4]]],[[3,[2]]]],[1,4],[[[0,[1,4]]],[[0,[1,4]]]],[1,4],[[[3,[1]]],[[3,[4]]]],[[[3,[[0,[1,4]]]]],[[3,[[0,[1,4]]]]]],0,[5,5],[[]],[[5,5],6],[[5,7],8],[[5,7],8],[[]],[[[3,[2]]],4],[[[3,[2]]],[[0,[1,4]]]],[[],9],[[],9],[[5,10]],[[]],[[]],[[]],0,0,[11,11],[11,11],[[]],[[]],[[]],[[]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[[3,[1]]]],[[[3,[[0,[1,4]]]]]],[[[3,[2]]],4],[[]],[[],12],[1,[[13,[4,5]]]],[[[0,[1,4]]],[[13,[[0,[1,4]],5]]]],[1,[[13,[4,5]]]],[[[3,[1]]],[[13,[[3,[4]],5]]]],[[[3,[[0,[1,4]]]]],[[13,[[3,[[0,[1,4]]]],5]]]],[[],13],[[[3,[2]]],[[13,[4,5]]]],[[[3,[2]]],[[13,[[0,[1,4]],5]]]],[[],13],[[[3,[2]]],[[13,[4,5]]]],[[],14],[11,11],[11,11],[[]],[[]],[[]],[[]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[[3,[11]]],[[3,[11]]]],[[]],[[]],0,[[[15,[[0,[1,4]]]]],[[15,[[0,[1,4]]]]]],[[[16,[1]]],[[16,[4]]]],[[[17,[[0,[1,4]]]]],[[17,[[0,[1,4]]]]]],[[[15,[[3,[[0,[1,4]]]]]]],[[15,[[3,[[0,[1,4]]]]]]]],[[[16,[[3,[1]]]]],[[16,[[3,[4]]]]]],[[[17,[[3,[[0,[1,4]]]]]]],[[17,[[3,[[0,[1,4]]]]]]]],[[[18,[1]]],[[18,[4]]]],[15,15],[16,16],[17,17],[[[18,[11]]],[[18,[11]]]],[[[3,[1]]],[[18,[[0,[1,4]]]]]],[[[15,[[0,[1,4]]]]],[[13,[[15,[[0,[1,4]]]]]]]],[[[16,[1]]],[[13,[[16,[4]]]]]],[[[17,[[0,[1,4]]]]],[[13,[[17,[[0,[1,4]]]]]]]],[[[15,[[3,[[0,[1,4]]]]]]],[[13,[[15,[[3,[[0,[1,4]]]]]]]]]],[[[16,[[3,[1]]]]],[[13,[[16,[[3,[4]]]]]]]],[[[17,[[3,[[0,[1,4]]]]]]],[[13,[[17,[[3,[[0,[1,4]]]]]]]]]],[[[18,[1]]],[[13,[[18,[4]]]]]],[[],[[13,[[16,[19]]]]]],[20,[[13,[[16,[[3,[19]]]]]]]],[20,[[13,[[18,[19]]]]]],[15,15],[16,16],[17,17],[[[18,[11]]],[[18,[11]]]],[[],[[16,[19]]]],[20,[[16,[[3,[19]]]]]],[20,[[18,[19]]]],0,0,0,0,0,[[]],[[]],[1,21],[[[0,[1,4]]],[[0,[1,21]]]],[1,21],[[[3,[1]]],[[3,[21]]]],[[[3,[[0,[1,4]]]]],[[3,[[0,[1,21]]]]]],[22,22],[[]],[[22,22],6],[[22,7],8],[[22,7],8],[[]],[5,22],[[[3,[2]]],21],[[[3,[2]]],[[0,[1,21]]]],[[22,10]],[[]],[[],6],[[[3,[2]]],21],[[]],[[],12],[1,[[13,[21,22]]]],[[[0,[1,4]]],[[13,[[0,[21,1]],22]]]],[1,[[13,[21,22]]]],[[[3,[1]]],[[13,[[3,[21]],22]]]],[[[3,[[0,[1,4]]]]],[[13,[[3,[[0,[21,1]]]],22]]]],[[],13],[[[3,[2]]],[[13,[21,22]]]],[[[3,[2]]],[[13,[[0,[21,1]],22]]]],[[],13],[[[3,[2]]],[[13,[21,22]]]],[[],14]],"c":[],"p":[[8,"NoUninit"],[15,"u8"],[15,"slice"],[8,"AnyBitPattern"],[4,"PodCastError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"Hasher"],[8,"Sized"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Arc"],[3,"Box"],[3,"Rc"],[3,"Vec"],[8,"Zeroable"],[15,"usize"],[8,"CheckedBitPattern"],[4,"CheckedCastError"],[8,"Contiguous"],[8,"TransparentWrapper"],[8,"TransparentWrapperAlloc"]]},\
"cosmic_text":{"doc":"COSMIC Text","t":"ENENEDDDSSNNNDDDNDNDNNNDNENNNDNNNNSSIDNNNNNNNEENNDDNNNNNSDDDDDNNNNSNDNNNSNNNNNNNNNNNNNDDNNNNNNSNNNNNNNDDDDEEEENDEDSNNNNNNDNENLKLLLMLLLLLLLLLMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLMKLKLLMLLLLLLLLLLLLKLLLMKLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLMLLLMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMMMMMMLLLLMMMMLLMMLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLMMCLLLKLLLKLLLLLKLLLLLLLLLLKLLLLLLLLLLLMLMLLMMLMMLMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMLMLLMMMMMMMMMMMMMMMMMMM","n":["Action","Advanced","Affinity","After","Align","Attrs","AttrsList","AttrsOwned","BLACK","BOLD","Backspace","Basic","Before","BidiParagraphs","BorrowedWithFontSystem","Buffer","BufferEnd","BufferLine","BufferStart","CacheKey","Center","Click","Close","Color","Color","Command","Condensed","Cursive","Cursive","Cursor","CurveTo","Delete","Down","Drag","EXTRA_BOLD","EXTRA_LIGHT","Edit","Editor","End","End","Enter","Escape","Expanded","ExtraCondensed","ExtraExpanded","Family","FamilyOwned","Fantasy","Fantasy","Font","FontSystem","Glyph","Home","Insert","Italic","Justified","LIGHT","LayoutCursor","LayoutGlyph","LayoutLine","LayoutRun","LayoutRunIter","Left","Left","LeftWord","LineTo","MEDIUM","Mask","Metrics","Monospace","Monospace","MoveTo","NORMAL","Name","Name","Next","NextWord","None","Normal","Normal","Oblique","One","PageDown","PageUp","ParagraphEnd","ParagraphStart","PhysicalGlyph","Placement","Previous","PreviousWord","QuadTo","Right","Right","RightWord","SEMIBOLD","SansSerif","SansSerif","Scroll","SemiCondensed","SemiExpanded","Serif","Serif","ShapeGlyph","ShapeLine","ShapeSpan","ShapeWord","Shaping","Stretch","Style","SubpixelBin","SubpixelMask","SwashCache","SwashContent","SwashImage","THIN","Three","Two","UltraCondensed","UltraExpanded","Up","Vertical","Weight","Word","Wrap","Zero","a","action","action","action","add_span","affinity","after","align","append","as_attrs","as_family","as_float","as_rgba","as_rgba_tuple","as_swash","ascent","attrs_list","b","before","blank","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_with","borrow_with","borrow_with","buffer","buffer","buffer_mut","buffer_mut","buffer_mut","cache_key","clear","clear_spans","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","color","color","color_opt","color_opt","color_opt","color_opt","compatible","compute","content","copy_selection","copy_selection","cursor","cursor","data","data","db","db_mut","default","default","default","default","default","default","default","default","default","defaults","delete_selection","delete_selection","deref","deref_mut","descent","draw","draw","draw","draw","draw","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","family","family","family_owned","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font_id","font_id","font_id","font_size","font_size","font_size_bits","fontdb","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_after","from_before","g","get_font","get_font_matches","get_image","get_image_uncached","get_outline_commands","get_span","glyph","glyph_id","glyph_id","glyph_id","glyphs","glyphs","glyphs","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","highlight","hit","id","image_cache","index","insert_string","insert_string","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_locale_and_db","into_text","is_reset","layout","layout","layout","layout_cursor","layout_opt","layout_runs","left","level","level","line","line","line_height","line_i","line_layout","line_layout","line_shape","line_shape","line_top","line_w","line_y","lines","locale","matches","max_ascent","max_descent","metadata","metadata","metadata","metadata","metadata","metrics","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_empty","new_with_affinity","new_with_color","new_with_fonts","new_with_locale_and_db","next","next","outline_command_cache","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","physical","placement","r","redraw","reset","reset_layout","rgb","rgba","rtl","rtl","rustybuzz","rustybuzz","scale","scroll","select_opt","select_opt","set_align","set_attrs_list","set_cursor","set_cursor","set_metrics","set_metrics","set_redraw","set_scroll","set_select_opt","set_select_opt","set_size","set_size","set_text","set_text","set_text","set_wrap","set_wrap","set_wrap","shape","shape_as_needed","shape_as_needed","shape_as_needed","shape_opt","shape_until","shape_until","shape_until_cursor","shape_until_cursor","shape_until_scroll","shape_until_scroll","size","size_hint","source","spans","spans","split_off","split_off","start","start","stretch","stretch","stretch","style","style","style","text","text","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","top","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verb","visible_lines","w","w","weight","weight","weight","width","with_pixels","words","wrap","wrap","x","x","x_advance","x_advance","x_bin","x_offset","x_offset","y","y","y_advance","y_advance","y_bin","y_offset","y_offset","lines","x","x","y","y"],"q":[[0,"cosmic_text"],[857,"cosmic_text::Action"]],"d":["An action to perform on an <code>Editor</code>","Advanced text shaping and font fallback.","Whether to associate cursors placed at a boundary between …","","Align or justify","Text attributes","List of text attributes to apply to a line","An owned version of <code>Attrs</code>","Black weight (900), the thickest value.","Bold weight (700).","Delete text behind cursor","Basic shaping with no font fallback.","","An iterator over the paragraphs in the input text. It is …","A value borrowed together with an <code>FontSystem</code>","A buffer of text that is shaped and laid out","Move cursor to the end of the document","A line (or paragraph) of text that is shaped and laid out","Move cursor to the start of the document","Key for building a glyph cache","","Mouse click at specified position","Closes a subpath, connecting the final point to the …","Text color","32-bit RGBA bitmap.","Path command.","","Glyphs in cursive fonts generally use a more informal …","","Current cursor location","A cubic bezier curve from the previous point to the final …","Delete text in front of cursor","Move cursor down","Mouse drag to specified position","Extra-bold weight (800).","Extra light weight (200).","A trait to allow easy replacements of <code>Editor</code>, like …","A wrapper of <code>Buffer</code> for easy editing","Move cursor to end of line","","Create new line","Escape, clears selection","","","","A font family.","An owned version of <code>Family</code>","Fantasy fonts are primarily decorative or expressive fonts …","","A font","Access to the system fonts.","Wraps at a glyph level","Move cursor to start of line","Insert character at cursor","A form that is generally cursive in nature.","","Light weight (300).","The position of a cursor within a <code>Buffer</code>.","A laid out glyph","A line of laid out glyphs","A line of visible text for rendering","An iterator of visible text lines, see <code>LayoutRun</code>","Move cursor left","","Move cursor to next word boundary to the left","A straight line from the previous point to the specified …","Medium weight (500, higher than normal).","8-bit alpha mask.","Metrics of text","The sole criterion of a monospace font is that all glyphs …","","Begins a new subpath at the specified point.","Normal (400).","The name of a font family of choice.","","Move cursor to next character (Self::Right in LTR, …","Move cursor to next word boundary","No wrapping","A face that is neither italic not obliqued.","","A typically-sloped version of the regular face.","","Move cursor down one page","Move cursor up one page","Move cursor to end of paragraph","Move cursor to start of paragraph","","Describes the offset and dimensions of a rendered mask.","Move cursor to previous character (Self::Left in LTR, …","Move cursor to previous word boundary","A quadratic curve from the previous point to the final …","Move cursor right","","Move cursor to next word boundary to the right","Semibold weight (600).","Glyphs in sans-serif fonts, as the term is used in CSS, …","","Scroll specified number of lines","","","Serif fonts represent the formal text style for a script.","","A shaped glyph","A shaped line (or paragraph)","A shaped span (for bidirectional processing)","A shaped word (for word wrapping)","The shaping strategy of some text.","A face width.","Allows italic or oblique faces to be selected.","Binning of subpixel position for cache optimization","32-bit RGBA subpixel mask.","Cache for rasterizing with the swash scaler","Content of a scaled glyph image.","Scaled glyph image.","Thin weight (100), the thinnest value.","","","","","Move cursor up","Move cursor up or down by a number of pixels","Specifies the weight of glyphs in the font, their degree …","Word Wrapping","Wrapping mode","","Get the alpha component","Perform an Action on the editor","","Perform an Action on the editor","Add an attribute span, removes any previous matching parts …","Whether to associate the cursor with the run before it or …","","Get the Text alignment","Append line at end of this line","","","","Get an array over all of the components, in <code>[r, g, b, a]</code> …","Get a tuple over all of the attributes, in <code>(r, g, b, a)</code> …","","","Get attributes list","Get the blue component","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutably borrows <code>self</code> together with an <code>FontSystem</code> for more …","Mutably borrows <code>self</code> together with an <code>FontSystem</code> for more …","Mutably borrows the buffer together with an <code>FontSystem</code> for …","Get the internal <code>Buffer</code>","","Get the internal <code>Buffer</code>, mutably","","Get the internal <code>Buffer</code>, mutably","Cache key, see CacheKey","Resets the image to a default state.","Clear the current attribute spans","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set Color","Cursor color","","","Optional color override","","Check if this set of attributes can be shaped with another","Given an origin, offset and bounding box, computes the …","Content of the image.","Copy selection","","Get the current cursor","","","Raw image data.","Get the database.","Get a mutable reference to the database.","","","","","","","","","","Get the default Attrs","Delete selection, adjusting cursor and returning true if …","","","","","Draw the editor","Draw the buffer","Draw the editor","Draw the buffer","Draw the editor","End index of cluster in original line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set Family","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Font ID","Font id of the glyph","","Font size in pixels","Font size of the glyph","<code>f32</code> bits of font size","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Get the green component","Get a font by its ID.","","Create a swash Image from a cache key, caching results","Create a swash Image from a cache key, without caching …","","Get the attribute span for an index","","Glyph ID","Font id of the glyph","","The array of layout glyphs to draw","Glyphs in line","","","","","","","","","","","","","Height in pixels.","Return the pixel span <code>Some((x_left, x_width))</code> of the …","Convert x, y position to Cursor (hit detection)","","","First-byte-index of glyph at cursor (will insert behind …","Insert a string at the current cursor or replacing the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consume this <code>FontSystem</code> and return the locale and database.","Consume this line, returning only its text contents as a …","Check if shaping and layout information is cleared","Layout line, will cache results","","","","Get line layout cache","Get the visible layout runs for rendering and other tasks","Horizontal offset with respect to the origin specified …","Unicode BiDi embedding level, character is left-to-right …","","Text line the cursor is on","","Line height in pixels","The index of the original text line","Lay out the provided line index and return the result","Lay out the provided line index and return the result","Shape the provided line index and return the result","Shape the provided line index and return the result","Y offset to top of line","Width of line","Y offset to baseline of line","BufferLines (or paragraphs) of text in the buffer","Get the locale.","Check if font matches","Maximum ascent of the glyphs in line","Maximum descent of the glyphs in line","Set metadata","","","Metadata from <code>Attrs</code>","","Get the current <code>Metrics</code>","Create a new <code>FontSystem</code>, that allows access to any …","","Create a new swash cache","","Create a new set of attributes with sane defaults","","Create a new attributes list with a set of default Attrs","Create an iterator to split the input text into paragraphs …","Create a new cursor","","","","Create a new <code>Buffer</code> with the provided <code>FontSystem</code> and …","Create a new line with the given text and attributes list …","","","Create a new <code>Editor</code> with the provided <code>Buffer</code>","","","Panics","Creates a new empty scaled image.","Create an empty <code>Buffer</code> with the provided <code>Metrics</code>. This is …","Create a new cursor, specifying the affinity","Create a new cursor, specifying the color","Create a new <code>FontSystem</code> with a pre-specified set of fonts.","Create a new <code>FontSystem</code> with a pre-specified locale and …","","","","","","","","","","","","Offset and size of the image.","Get the red component","True if a redraw is needed","Reset shaping and layout information","Reset only layout information","Create new color with red, green, and blue components","Create new color with red, green, blue, and alpha …","True if the original paragraph direction is RTL","","","","","Get the current scroll location","Get the current selection position","","Set the text alignment","Set attributes list","Set the current cursor","","Set the current <code>Metrics</code>","Set the current <code>Metrics</code>","Set redraw needed flag","Set the current scroll location","Set the current selection position","","Set the current buffer dimensions","Set the current buffer dimensions","Set text of buffer, using provided attributes for each …","Set text and attributes list","Set text of buffer, using provided attributes for each …","Set the current <code>Wrap</code>","Set wrapping setting (wrap by characters/words or no …","Set the current <code>Wrap</code>","Shape line, will cache results","Shape lines until scroll, after adjusting scroll if the …","","Shape lines until scroll, after adjusting scroll if the …","Get line shaping cache","Pre-shape lines in the buffer, up to <code>lines</code>, return actual …","Pre-shape lines in the buffer, up to <code>lines</code>, return actual …","Shape lines until cursor, also scrolling to include cursor …","Shape lines until cursor, also scrolling to include cursor …","Shape lines until scroll","Shape lines until scroll","Get the current buffer dimensions (width, height)","","Source of the image.","Get the current attribute spans","","Split attributes list at an offset","Split off new line at index","Start index of cluster in original line","","Set Stretch","","","Set Style","","","Get current text","The original text line","Returns a numeric representation of a width.","","","","","","","","","","","","","","","","","","","","","","","","","","Vertical offset with respect to the origin specified when …","Returns the result of a transformation matrix applied to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the associated verb for the command.","Get the number of lines that can be viewed in the buffer","Width of hitbox","Width of the line","Set Weight","","","Width in pixels.","Enumerate pixels in an Image, use <code>with_image</code> for better …","","Get the current <code>Wrap</code>","Get wrapping setting (wrap by characters/words or no …","X offset of hitbox","Integer component of X offset in line","","","Binning of fractional X offset","X offset in line","","Y offset of hitbox","Integer component of Y offset in line","","","Binning of fractional Y offset","Y offset in line","","","","","",""],"i":[0,36,0,12,0,0,0,0,28,28,4,36,12,0,0,0,4,0,4,0,15,4,33,0,38,0,37,19,18,0,33,4,4,4,28,28,0,0,4,15,4,4,37,37,37,0,0,19,18,0,0,34,4,4,29,15,28,0,0,0,0,0,4,15,4,33,28,38,0,19,18,33,28,19,18,4,4,34,29,37,29,20,4,4,4,4,0,0,4,4,33,4,15,4,28,19,18,4,37,37,19,18,0,0,0,0,0,0,0,0,38,0,0,0,28,20,20,37,37,4,4,0,34,0,20,1,6,5,7,8,30,12,14,14,17,18,20,1,1,23,61,14,1,12,62,19,28,29,3,23,47,1,18,11,17,8,53,30,12,54,55,56,31,26,14,32,20,5,33,4,7,58,59,60,34,35,15,36,61,62,63,64,37,38,27,19,28,29,3,23,47,1,18,11,17,8,53,30,12,54,55,56,31,26,14,32,20,5,33,4,7,58,59,60,34,35,15,36,61,62,63,64,37,38,27,6,6,26,6,5,6,5,7,59,27,8,19,28,29,1,18,11,17,8,30,12,31,32,20,33,4,34,35,15,36,37,38,27,19,28,29,1,18,11,17,8,30,12,31,32,20,33,4,34,35,15,36,37,38,27,28,1,30,12,32,20,37,11,30,11,17,58,61,11,35,27,6,5,6,5,23,27,3,3,28,29,30,12,31,35,37,38,27,8,6,5,7,7,61,6,26,5,7,7,58,61,19,28,29,1,18,11,17,8,30,12,31,32,20,33,4,34,15,36,37,38,19,19,28,28,29,29,1,1,18,18,11,11,17,17,8,8,30,30,12,12,32,32,20,20,4,4,34,34,15,15,36,36,37,37,38,38,11,11,17,19,28,29,3,23,47,1,18,11,17,8,53,30,12,54,55,56,31,31,26,14,32,20,5,33,4,7,58,59,60,34,34,35,15,15,36,61,62,63,64,37,38,32,58,61,31,58,32,0,19,28,29,3,23,47,1,18,11,17,8,53,30,12,54,55,56,31,26,14,32,20,5,33,4,7,58,59,60,34,35,15,36,61,62,63,64,37,38,27,12,12,1,3,3,47,47,47,8,54,32,58,61,55,60,62,19,28,29,1,18,11,17,32,20,36,37,35,55,26,23,47,30,6,5,19,28,29,3,23,47,1,18,11,17,8,53,30,12,54,55,56,31,26,14,32,20,5,33,4,7,58,59,60,34,35,15,36,61,62,63,64,37,38,27,53,56,3,14,14,14,64,54,26,14,26,35,58,63,30,54,31,55,26,7,26,7,55,55,55,26,3,11,60,60,11,11,17,58,61,26,3,23,47,18,11,17,8,53,30,54,56,31,26,14,32,20,5,62,63,64,27,26,30,30,3,3,53,56,47,28,1,30,12,32,20,37,58,27,1,26,14,14,1,1,55,64,0,23,31,26,6,5,14,14,6,5,26,7,26,26,6,5,26,7,26,14,7,26,14,7,14,6,5,7,14,26,7,26,7,26,7,26,56,27,8,64,8,14,58,61,11,11,17,11,11,17,14,55,37,19,28,29,1,18,11,17,8,30,12,31,32,20,33,4,34,35,15,36,37,38,27,31,34,15,35,33,19,28,29,3,23,47,1,18,11,17,8,53,30,12,54,55,56,31,26,14,32,20,5,33,4,7,58,59,60,34,35,15,36,61,62,63,64,37,38,27,19,28,29,3,23,47,1,18,11,17,8,53,30,12,54,55,56,31,26,14,32,20,5,33,4,7,58,59,60,34,35,15,36,61,62,63,64,37,38,27,19,28,29,3,23,47,1,18,11,17,8,53,30,12,54,55,56,31,26,14,32,20,5,33,4,7,58,59,60,34,35,15,36,61,62,63,64,37,38,27,33,26,58,60,11,11,17,35,47,63,26,14,58,59,61,62,32,58,61,58,59,61,62,32,58,61,80,81,82,81,82],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,4]],[[5,3,4]],[[[7,[6]],4]],[[8,[10,[9]],11]],0,[12,13],[14,[[16,[15]]]],[[14,14]],[17,11],[18,19],[20,21],[1,[[22,[2]]]],[1],[23,24],0,[14,8],[1,2],[12,13],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,3],[[7,[25]]]],[[25,3],[[7,[25]]]],[[26,3],[[7,[26]]]],[[],26],[5,26],[[],26],[5,26],[[[7,[6]]],[[7,[26]]]],0,[27],[8],[19,19],[28,28],[29,29],[1,1],[18,18],[11,11],[17,17],[8,8],[30,30],[12,12],[31,31],[32,32],[20,20],[33,33],[4,4],[34,34],[35,35],[15,15],[36,36],[37,37],[38,38],[27,27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[28,28],39],[[1,1],39],[[30,30],39],[[12,12],39],[[32,32],39],[[20,20],39],[[37,37],39],[[11,1],11],0,0,0,0,0,[[11,11],13],[[40,[42,[41]],43]],0,[[],[[16,[44]]]],[5,[[16,[44]]]],[[],30],[5,30],[23,[[45,[2]]]],0,[3,46],[3,46],[[],28],[[],29],[[],30],[[],12],[[],31],[[],35],[[],37],[[],38],[[],27],[8,11],[[],13],[5,13],[7],[7],0,[[3,47,1,48]],[[26,3,47,1,48]],[[5,3,47,1,48]],[[[7,[26]],47,1,48]],[[[7,[6]],47,1,48]],0,0,[[19,19],13],[[28,28],13],[[29,29],13],[[1,1],13],[[18,18],13],[[11,11],13],[[17,17],13],[[8,8],13],[[30,30],13],[[12,12],13],[[31,31],13],[[32,32],13],[[20,20],13],[[33,33],13],[[4,4],13],[[34,34],13],[[15,15],13],[[36,36],13],[[37,37],13],[[38,38],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[11,19],11],0,0,[[19,49],[[51,[50]]]],[[28,49],[[51,[50]]]],[[29,49],[[51,[50]]]],[[3,49],52],[[23,49],52],[[47,49],52],[[1,49],52],[[18,49],52],[[11,49],52],[[17,49],52],[[8,49],52],[[53,49],52],[[30,49],52],[[12,49],52],[[54,49],52],[[55,49],52],[[56,49],52],[[31,49],52],[[31,49],52],[[26,49],52],[[14,49],52],[[32,49],52],[[20,49],52],[[5,49],52],[[33,49],[[51,[50]]]],[[4,49],52],[[[7,[57]],49],52],[[58,49],52],[[59,49],52],[[60,49],52],[[34,49],52],[[34,49],52],[[35,49],[[51,[50]]]],[[15,49],52],[[15,49],52],[[36,49],52],[[61,49],52],[[62,49],52],[[63,49],52],[[64,49],52],[[37,49],[[51,[50]]]],[[38,49],[[51,[50]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,12],[13,12],[1,2],[[3,65],[[16,[[66,[23]]]]]],[[3,11],[[66,[[67,[65]]]]]],[[47,3,32],[[16,[27]]]],[[47,3,32],[[16,[27]]]],[[47,3,32],[[16,[[45,[33]]]]]],[[8,9],11],0,0,0,0,0,0,0,[[19,68]],[[28,68]],[[29,68]],[[1,68]],[[18,68]],[[11,68]],[[17,68]],[[32,68]],[[20,68]],[[36,68]],[[37,68]],0,[[55,30,30],16],[[26,21,21],[[16,[30]]]],[23,65],0,0,[[69,[16,[8]]]],[[5,69,[16,[8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[14,44],[14,13],[[14,3,21,21,34],[[45,[60]]]],[[64,21,21,34,[16,[15]]],[[67,[60]]]],0,[[26,30],54],[14,[[16,[[67,[60]]]]]],[26,56],0,0,0,0,0,0,0,[[26,3,9],[[16,[[45,[60]]]]]],[[[7,[26]],9],[[16,[[45,[60]]]]]],[[26,3,9],[[16,[64]]]],[[[7,[26]],9],[[16,[64]]]],0,0,0,0,[3,69],[[11,70],13],0,0,[[11,9],11],0,0,0,0,[26,31],[[],3],[70,[[16,[23]]]],[[],47],[19,18],[[],11],[11,17],[11,8],[69,53],[[9,9],30],[[9,9,9],54],[26,56],[[21,21],31],[[3,31],26],[[[42,[44]],8,36],14],[[65,71,21]],[21],[26,5],[[3,69,8,[10,[9]],72,13,36],62],[[3,69,8,[10,[9]],13,72,36],63],[[3,69,8,36],64],[[],27],[31,26],[[9,9,12],30],[[9,9,1],30],[73,3],[[44,46],3],[53,16],[56,16],0,[[28,28],[[16,[39]]]],[[1,1],[[16,[39]]]],[[30,30],[[16,[39]]]],[[12,12],[[16,[39]]]],[[32,32],[[16,[39]]]],[[20,20],[[16,[39]]]],[[37,37],[[16,[39]]]],[[58,21],59],0,[1,2],[26,13],[14],[14],[[2,2,2],1],[[2,2,2,2],1],0,0,0,[23,74],[[31,21],31],[26,75],[[],[[16,[30]]]],[5,[[16,[30]]]],[[14,[16,[15]]],13],[[14,8],13],[30],[[5,30]],[[26,3,31]],[[[7,[26]],31]],[[26,13]],[[26,75]],[[[16,[30]]]],[[5,[16,[30]]]],[[26,3,21,21]],[[[7,[26]],21,21]],[[26,3,69,11,36]],[[14,[76,[69]],8],13],[[[7,[26]],69,11,36]],[[26,3,34]],[[14,34],13],[[[7,[26]],34]],[[14,3],64],[3],[[5,3]],[[[7,[6]]]],[14,[[16,[64]]]],[[26,3,75],75],[[[7,[26]],75],75],[[26,3,30]],[[[7,[26]],30]],[[26,3]],[[[7,[26]]]],[26],[56],0,[8,67],0,[[8,9],8],[[14,9],14],0,0,[[11,37],11],0,0,[[11,29],11],0,0,[14,69],0,[37,71],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],44],[[],44],[[],44],0,[[33,77],33],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[[],78],[33,79],[26,75],0,0,[[11,28],11],0,0,0,[[47,3,32,1,48]],0,[26,34],[14,34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"Color"],[15,"u8"],[3,"FontSystem"],[4,"Action"],[3,"Editor"],[8,"Edit"],[3,"BorrowedWithFontSystem"],[3,"AttrsList"],[15,"usize"],[3,"Range"],[3,"Attrs"],[4,"Affinity"],[15,"bool"],[3,"BufferLine"],[4,"Align"],[4,"Option"],[3,"AttrsOwned"],[4,"FamilyOwned"],[4,"Family"],[4,"SubpixelBin"],[15,"f32"],[15,"array"],[3,"Font"],[3,"FontRef"],[8,"Sized"],[3,"Buffer"],[3,"SwashImage"],[3,"Weight"],[4,"Style"],[3,"Cursor"],[3,"Metrics"],[3,"CacheKey"],[4,"Command"],[4,"Wrap"],[3,"Placement"],[4,"Shaping"],[4,"Stretch"],[4,"SwashContent"],[4,"Ordering"],[4,"Origin"],[3,"Vector"],[8,"Into"],[3,"Bounds"],[3,"String"],[15,"slice"],[3,"Database"],[3,"SwashCache"],[8,"FnMut"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"BidiParagraphs"],[3,"LayoutCursor"],[3,"LayoutRun"],[3,"LayoutRunIter"],[8,"Debug"],[3,"LayoutGlyph"],[3,"PhysicalGlyph"],[3,"LayoutLine"],[3,"ShapeGlyph"],[3,"ShapeWord"],[3,"ShapeSpan"],[3,"ShapeLine"],[3,"ID"],[3,"Arc"],[3,"Vec"],[8,"Hasher"],[15,"str"],[3,"FaceInfo"],[15,"u16"],[3,"Level"],[8,"IntoIterator"],[3,"Face"],[15,"i32"],[8,"AsRef"],[3,"Transform"],[3,"TypeId"],[4,"Verb"],[13,"Scroll"],[13,"Click"],[13,"Drag"]]},\
"fontdb":{"doc":"<code>fontdb</code> is a simple, in-memory font database with CSS-like …","t":"NNNNNNNNNNNNNNNNNNNNNNNNSSNNNNNNNNNNNNNNNNNNNNNNNNDNNNSSNNNNNNNNNNNNNNNNNNNNDENNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNNNNNNNNNNNSENNNNNSNNNNNNNNNNNNSNNNNNNNNNNNNNNNNNDNNNSNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNEENNNSNNNNNNNNNNNNNNNNNNNDNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLNNLLLLLLLLMLLLLMLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMML","n":["Afrikaans_SouthAfrica","Albanian_Albania","Alsatian_France","Amharic_Ethiopia","Arabic_Algeria","Arabic_Bahrain","Arabic_Egypt","Arabic_Iraq","Arabic_Jordan","Arabic_Kuwait","Arabic_Lebanon","Arabic_Libya","Arabic_Morocco","Arabic_Oman","Arabic_Qatar","Arabic_SaudiArabia","Arabic_Syria","Arabic_Tunisia","Arabic_UAE","Arabic_Yemen","Armenian_Armenia","Assamese_India","Azeri_Cyrillic_Azerbaijan","Azeri_Latin_Azerbaijan","BLACK","BOLD","Bashkir_Russia","Basque_Basque","Belarusian_Belarus","Bengali_Bangladesh","Bengali_India","Binary","Bosnian_Cyrillic_BosniaAndHerzegovina","Bosnian_Latin_BosniaAndHerzegovina","Breton_France","Bulgarian_Bulgaria","Catalan_Catalan","Chinese_HongKongSAR","Chinese_MacaoSAR","Chinese_PeoplesRepublicOfChina","Chinese_Singapore","Chinese_Taiwan","Condensed","Corsican_France","Croatian_Croatia","Croatian_Latin_BosniaAndHerzegovina","Cursive","Czech_CzechRepublic","Danish_Denmark","Dari_Afghanistan","Database","Divehi_Maldives","Dutch_Belgium","Dutch_Netherlands","EXTRA_BOLD","EXTRA_LIGHT","English_Australia","English_Belize","English_Canada","English_Caribbean","English_India","English_Ireland","English_Jamaica","English_Malaysia","English_NewZealand","English_RepublicOfThePhilippines","English_Singapore","English_SouthAfrica","English_TrinidadAndTobago","English_UnitedKingdom","English_UnitedStates","English_Zimbabwe","Estonian_Estonia","Expanded","ExtraCondensed","ExtraExpanded","FaceInfo","Family","Fantasy","Faroese_FaroeIslands","File","Filipino_Philippines","Finnish_Finland","French_Belgium","French_Canada","French_France","French_Luxembourg","French_PrincipalityOfMonaco","French_Switzerland","Frisian_Netherlands","Galician_Galician","Georgian_Georgia","German_Austria","German_Germany","German_Liechtenstein","German_Luxembourg","German_Switzerland","Greek_Greece","Greenlandic_Greenland","Gujarati_India","Hausa_Latin_Nigeria","Hebrew_Israel","Hindi_India","Hungarian_Hungary","ID","Icelandic_Iceland","Igbo_Nigeria","Indonesian_Indonesia","Inuktitut_Canada","Inuktitut_Latin_Canada","Irish_Ireland","Italian_Italy","Italian_Switzerland","Italic","Japanese_Japan","Kannada_India","Kazakh_Kazakhstan","Khmer_Cambodia","Kiche_Guatemala","Kinyarwanda_Rwanda","Kiswahili_Kenya","Konkani_India","Korean_Korea","Kyrgyz_Kyrgyzstan","LIGHT","Language","Lao_LaoPDR","Latvian_Latvia","Lithuanian_Lithuania","LowerSorbian_Germany","Luxembourgish_Luxembourg","MEDIUM","Macedonian_NorthMacedonia","Malay_BruneiDarussalam","Malay_Malaysia","Malayalam_India","Maltese_Malta","Maori_NewZealand","Mapudungun_Chile","Marathi_India","Mohawk_Mohawk","Mongolian_Cyrillic_Mongolia","Mongolian_Traditional_PeoplesRepublicOfChina","Monospace","NORMAL","Name","Nepali_Nepal","Normal","Normal","Norwegian_Bokmal_Norway","Norwegian_Nynorsk_Norway","Oblique","Occitan_France","Odia_India","Pashto_Afghanistan","Polish_Poland","Portuguese_Brazil","Portuguese_Portugal","Punjabi_India","Quechua_Bolivia","Quechua_Ecuador","Quechua_Peru","Query","Romanian_Romania","Romansh_Switzerland","Russian_Russia","SEMIBOLD","Sami_Inari_Finland","Sami_Lule_Norway","Sami_Lule_Sweden","Sami_Northern_Finland","Sami_Northern_Norway","Sami_Northern_Sweden","Sami_Skolt_Finland","Sami_Southern_Norway","Sami_Southern_Sweden","SansSerif","Sanskrit_India","SemiCondensed","SemiExpanded","Serbian_Cyrillic_BosniaAndHerzegovina","Serbian_Cyrillic_Serbia","Serbian_Latin_BosniaAndHerzegovina","Serbian_Latin_Serbia","Serif","SesothoSaLeboa_SouthAfrica","Setswana_SouthAfrica","SharedFile","Sinhala_SriLanka","Slovak_Slovakia","Slovenian_Slovenia","Source","Spanish_Argentina","Spanish_Bolivia","Spanish_Chile","Spanish_Colombia","Spanish_CostaRica","Spanish_DominicanRepublic","Spanish_Ecuador","Spanish_ElSalvador","Spanish_Guatemala","Spanish_Honduras","Spanish_Mexico","Spanish_ModernSort_Spain","Spanish_Nicaragua","Spanish_Panama","Spanish_Paraguay","Spanish_Peru","Spanish_PuertoRico","Spanish_TraditionalSort_Spain","Spanish_UnitedStates","Spanish_Uruguay","Spanish_Venezuela","Stretch","Style","Swedish_Finland","Swedish_Sweden","Syriac_Syria","THIN","Tajik_Cyrillic_Tajikistan","Tamazight_Latin_Algeria","Tamil_India","Tatar_Russia","Telugu_India","Thai_Thailand","Tibetan_PRC","Turkish_Turkey","Turkmen_Turkmenistan","Uighur_PRC","Ukrainian_Ukraine","UltraCondensed","UltraExpanded","Unknown","UpperSorbian_Germany","Urdu_IslamicRepublicOfPakistan","Uzbek_Cyrillic_Uzbekistan","Uzbek_Latin_Uzbekistan","Vietnamese_Vietnam","Weight","Welsh_UnitedKingdom","Wolof_Senegal","Yakut_Russia","Yi_PRC","Yoruba_Nigeria","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","default","default","default","dummy","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","face","face_source","faces","families","families","family_name","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","id","index","into","into","into","into","into","into","into","into","into","into","is_empty","isiXhosa_SouthAfrica","isiZulu_SouthAfrica","len","load_font_data","load_font_file","load_font_source","load_fonts_dir","load_system_fonts","make_face_data_unshared","make_shared_face_data","monospaced","new","partial_cmp","partial_cmp","partial_cmp","post_script_name","primary_language","push_face_info","query","region","remove_face","set_cursive_family","set_fantasy_family","set_monospace_family","set_sans_serif_family","set_serif_family","source","stretch","stretch","style","style","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","weight","weight","with_face_data"],"q":[[0,"fontdb"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Black weight (900), the thickest value.","Bold weight (700).","","","","","","A font’s raw data, typically backed by a Vec.","","","","","","","","","","","","","","","Glyphs in cursive fonts generally use a more informal …","","","","A font database.","","","","Extra-bold weight (800).","Extra light weight (200).","","","","","","","","","","","","","","","","","","","","","A single font face info.","A font family.","Fantasy fonts are primarily decorative or expressive fonts …","","A font’s path.","","","","","","","","","","","","","","","","","","","","","","","","A unique per database face ID.","","","","","","","","","A form that is generally cursive in nature.","","","","","","","","","","","Light weight (300).","A [<code>Name</code>] language.","","","","","","Medium weight (500, higher than normal).","","","","","","","","","","","","The sole criterion of a monospace font is that all glyphs …","Normal (400).","The name of a font family of choice.","","A face that is neither italic not obliqued.","","","","A typically-sloped version of the regular face.","","","","","","","","","","","A database query.","","","","Semibold weight (600).","","","","","","","","","","Glyphs in sans-serif fonts, as the term is used in CSS, …","","","","","","","","Serif fonts represent the formal text style for a script.","","","A font’s raw data originating from a shared file mapping.","","","","A font source.","","","","","","","","","","","","","","","","","","","","","","A face width.","Allows italic or oblique faces to be selected.","","","","Thin weight (100), the thinnest value.","","","","","","","","","","","","","","","","","","","","Specifies the weight of glyphs in the font, their degree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a dummy ID.","","","","","","","","","","","","","","","Selects a <code>FaceInfo</code> by <code>id</code>.","Returns font face storage and the face index by <code>ID</code>.","Returns an iterator over the internal storage.","A list of family names.","A prioritized list of font family names or generic family …","Returns the generic family name or the <code>Family::Name</code> itself.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","An unique ID.","A face index in the <code>source</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the <code>Database</code> contains no font faces.","","","Returns the number of font faces in the <code>Database</code>.","Loads a font data into the <code>Database</code>.","Loads a font file into the <code>Database</code>.","Loads a font from the given source into the <code>Database</code> and …","Loads font files from the selected directory into the …","Attempts to load system fonts.","Transfers ownership of shared font data back to the font …","Makes the font data that backs the specified face id …","Indicates that the font face is monospaced.","Create a new, empty <code>Database</code>.","","","","A PostScript name.","Returns the primary language.","Pushes a user-provided <code>FaceInfo</code> to the database.","Performs a CSS-like query and returns the best matched …","Returns a language region.","Removes a font face by <code>id</code> from the database.","Sets the family that will be used by <code>Family::Cursive</code>.","Sets the family that will be used by <code>Family::Fantasy</code>.","Sets the family that will be used by <code>Family::Monospace</code>.","Sets the family that will be used by <code>Family::SansSerif</code>.","Sets the family that will be used by <code>Family::Serif</code>.","A font source.","A font face stretch.","Selects a normal, condensed, or expanded face from a font …","A font face style.","Allows italic or oblique faces to be selected.","Returns a numeric representation of a width.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A font face weight.","Specifies the weight of glyphs in the font, their degree …","Executes a closure with a font’s data."],"i":[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,7,9,9,9,9,9,4,9,9,9,9,9,9,9,9,9,9,10,9,9,9,6,9,9,9,0,9,9,9,7,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,0,0,6,9,4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,7,0,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,6,7,6,9,8,10,9,9,8,9,9,9,9,9,9,9,9,9,9,0,9,9,9,7,9,9,9,9,9,9,9,9,9,6,9,10,10,9,9,9,9,6,9,9,4,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,10,10,9,9,9,9,9,9,0,9,9,9,9,9,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,7,10,1,2,5,7,8,10,1,1,5,6,7,8,9,10,1,5,6,7,8,9,10,2,2,2,3,5,2,1,1,2,3,4,5,6,7,8,9,9,10,1,2,3,4,5,6,7,8,9,10,1,5,6,7,8,10,3,3,1,2,3,4,5,6,7,8,9,10,2,9,9,2,2,2,2,2,2,2,2,3,2,1,7,10,3,9,2,2,9,2,2,2,2,2,2,3,3,5,3,5,10,1,2,3,4,5,6,7,8,9,10,1,9,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,3,5,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],11],[[7,7],11],[[10,10],11],[[],1],[[],2],[[],5],[[],7],[[],8],[[],10],[[],1],[[1,1],12],[[5,5],12],[[6,6],12],[[7,7],12],[[8,8],12],[[9,9],12],[[10,10],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[2,1],[[13,[3]]]],[[2,1],13],[2,14],0,0,[[2,6],15],[[1,16],17],[[1,16],17],[[2,16],17],[[3,16],17],[[4,16],17],[[5,16],17],[[6,16],17],[[7,16],17],[[8,16],17],[[9,16],[[19,[18]]]],[[9,16],[[19,[18]]]],[[10,16],[[19,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,20]],[[5,20]],[[6,20]],[[7,20]],[[8,20]],[[10,20]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,12],0,0,[2,21],[[2,[23,[22]]]],[[2,[25,[24]]],[[19,[26]]]],[[2,4],[[28,[[27,[1]]]]]],[[2,[25,[24]]]],[2],[[2,1]],[[2,1],13],0,[[],2],[[1,1],[[13,[11]]]],[[7,7],[[13,[11]]]],[[10,10],[[13,[11]]]],0,[9,15],[[2,3]],[[2,5],[[13,[1]]]],[9,15],[[2,1]],[[2,[30,[29]]]],[[2,[30,[29]]]],[[2,[30,[29]]]],[[2,[30,[29]]]],[[2,[30,[29]]]],0,0,0,0,0,[10,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,[[2,1,33],13]],"c":[],"p":[[3,"ID"],[3,"Database"],[3,"FaceInfo"],[4,"Source"],[3,"Query"],[4,"Family"],[3,"Weight"],[4,"Style"],[4,"Language"],[4,"Stretch"],[4,"Ordering"],[15,"bool"],[4,"Option"],[8,"Iterator"],[15,"str"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[8,"Hasher"],[15,"usize"],[15,"u8"],[3,"Vec"],[3,"Path"],[8,"AsRef"],[3,"Error"],[15,"array"],[4,"TinyVec"],[3,"String"],[8,"Into"],[15,"u16"],[3,"TypeId"],[8,"FnOnce"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":"NNIDDELLLLLKLLLAALLLLLMEDEEDDDDDDDDNNNDDDDDEDDNNNDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLDDEDDDDDNDDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AllocError","CapacityOverflow","Equivalent","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","fmt","from","hash_map","hash_set","into","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","Entry","EntryRef","ExtractIf","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","Occupied","OccupiedEntry","OccupiedEntryRef","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","Vacant","VacantEntry","VacantEntryRef","Values","ValuesMut","allocator","and_modify","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","entry","entry","entry_ref","eq","equivalent","extend","extend","extend","extract_if","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_many_key_value_mut","get_many_key_value_unchecked_mut","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_unique_unchecked","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key","into_key_value","into_keys","into_mut","into_mut","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next","next","or_default","or_default","or_insert","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","raw_entry","raw_entry_mut","remove","remove","remove","remove","remove_entry","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry","replace_entry_with","replace_entry_with","replace_entry_with","replace_key","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","Difference","Drain","Entry","ExtractIf","HashSet","Intersection","IntoIter","Iter","Occupied","OccupiedEntry","SymmetricDifference","Union","Vacant","VacantEntry","allocator","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","entry","eq","equivalent","extend","extend","extract_if","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","insert","insert","insert_unique_unchecked","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_value","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","next","next","next","next","next","next","next","next","or_insert","remove","remove","replace","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in"],"q":[[0,"hashbrown"],[22,"hashbrown::TryReserveError"],[23,"hashbrown::hash_map"],[422,"hashbrown::hash_set"]],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","Key equivalence trait.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","Checks if this value is equivalent to the given key.","","","Returns the argument unchanged.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Calls <code>U::from(self)</code>.","","","","","The layout of the allocation request that failed.","Dummy default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code> in …","A view into a single entry in a map, which may either be …","A view into a single entry in a map, which may either be …","A draining iterator over entries of a <code>HashMap</code> which don’…","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code> in …","An owning iterator over the keys of a <code>HashMap</code> in arbitrary …","An owning iterator over the values of a <code>HashMap</code> in …","An iterator over the entries of a <code>HashMap</code> in arbitrary …","A mutable iterator over the entries of a <code>HashMap</code> in …","An iterator over the keys of a <code>HashMap</code> in arbitrary order. …","An occupied entry.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a <code>HashMap</code> a key-value …","A builder for computing where in a <code>HashMap</code> a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code> in arbitrary …","A mutable iterator over the values of a <code>HashMap</code> in …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","Gets the given key’s corresponding entry by reference in …","","","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash and matching …","Access an immutable entry by hash and matching function.","","Creates a <code>RawEntryMut</code> from the given key.","Access an immutable entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an immutable entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntryRef’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Insert a key-value pair into the map without checking if …","Set the value of an entry with a custom hasher function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a consuming iterator, that is, one that moves each …","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates an iterator over the entries of a <code>HashMap</code> in …","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to the …","Creates a consuming iterator visiting all the keys in …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntryRef into a mutable reference to …","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Removes a key from the map, returning the value at the key …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it. Keeps …","Takes the value out of the entry, and returns it. Keeps …","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map. …","Take the ownership of the key and value from the map. …","Replaces the entry, returning the old key and value. The …","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate. …","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A view into a single entry in a set, which may either be …","A draining iterator over entries of a <code>HashSet</code> which don’…","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","An occupied entry.","A view into an occupied entry in a <code>HashSet</code>. It is part of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","A vacant entry.","A view into a vacant entry in a <code>HashSet</code>. It is part of the …","Returns a reference to the underlying allocator.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Gets the given value’s corresponding entry in the set …","","","","","Drains elements which are true under the given predicate, …","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value in the set, if any, that …","Returns a reference to this entry’s value.","Gets a reference to the value in the entry.","Gets a reference to the value that would be used when …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry with the VacantEntry’s value.","Insert a value the set without checking if the value …","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","Take ownership of the value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","","","","","","","","","Ensures a value is in the entry by inserting if it was …","Removes a value from the set. Returns whether the value was","Takes the value out of the entry, and returns it. Keeps …","Adds a value to the set, replacing the existing value, if …","Replaces the entry, returning the old value. The new value …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …"],"i":[1,1,0,0,0,0,1,1,1,1,1,21,1,1,1,0,0,1,1,1,1,1,64,0,0,0,0,0,0,0,0,0,0,0,0,9,11,13,0,0,0,0,0,0,0,0,9,11,13,0,0,0,0,8,9,11,13,9,11,13,65,8,15,30,31,32,33,16,17,23,28,34,35,9,36,37,38,11,39,40,13,42,43,44,65,8,15,30,31,32,33,16,17,23,28,34,35,9,36,37,38,11,39,40,13,42,43,44,8,8,8,15,16,17,8,8,15,16,17,8,8,8,8,44,8,8,8,8,8,8,8,8,15,30,31,32,33,16,17,23,34,35,9,36,37,38,11,39,40,13,42,43,44,44,65,8,15,30,31,32,33,16,17,23,28,34,35,9,36,37,38,11,39,40,13,42,43,44,35,38,8,35,38,35,38,8,36,39,42,8,36,8,36,8,8,8,8,8,36,39,42,8,8,8,9,36,37,11,39,40,13,42,43,37,36,8,37,65,8,15,30,31,32,33,16,17,23,28,34,35,9,36,37,38,11,39,40,13,42,43,44,8,8,8,15,30,31,32,33,16,17,23,28,34,36,40,43,36,8,36,39,42,8,8,8,8,36,11,39,40,13,42,43,36,8,8,15,30,31,32,33,16,17,23,34,15,30,31,32,33,16,17,23,28,34,11,13,9,11,13,9,11,13,11,13,8,8,8,36,39,42,8,36,39,42,39,42,36,39,42,39,42,8,8,8,8,15,30,31,32,33,16,17,23,28,34,8,15,16,17,44,65,8,15,30,31,32,33,16,17,23,28,34,35,9,36,37,38,11,39,40,13,42,43,44,8,65,8,15,30,31,32,33,16,17,23,28,34,35,9,36,37,38,11,39,40,13,42,43,44,8,65,8,15,30,31,32,33,16,17,23,28,34,35,9,36,37,38,11,39,40,13,42,43,44,44,8,8,8,8,8,8,0,0,0,0,0,0,0,0,58,0,0,0,58,0,51,51,51,51,51,52,60,57,59,53,54,55,56,58,61,62,51,52,60,57,59,53,54,55,56,58,61,62,51,51,51,52,53,54,55,56,51,51,52,53,54,55,56,51,51,51,51,51,51,51,51,51,51,51,52,60,57,53,54,55,56,58,61,62,51,51,52,60,57,59,53,54,55,56,58,61,62,51,51,58,61,62,51,51,51,51,51,58,62,51,51,51,52,60,57,59,53,54,55,56,58,61,62,51,51,52,60,57,59,53,54,55,56,62,51,51,51,51,51,51,52,60,57,52,60,57,59,53,54,55,56,58,51,61,51,61,51,51,51,51,52,60,57,59,53,54,55,56,51,51,51,51,52,53,54,55,56,51,52,60,57,59,53,54,55,56,58,61,62,51,52,60,57,59,53,54,55,56,58,61,62,51,51,52,60,57,59,53,54,55,56,58,61,62,51,51,51,51,51],"f":[0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[[],2],[[],2],[[1,3],4],[[]],0,0,[[]],[[]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[[0,[0,7]]]]],[[0,[0,7]]]],[[[9,[[0,[0,7]]]],10],[[9,[[0,[0,7]]]]]],[[[11,[[0,[0,7]]]],10],[[11,[[0,[0,7]]]]]],[[[13,[12,[0,[0,7]]]],10],[[13,[12,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]],10],[[9,[[0,[0,7]]]]]],[[[11,[[0,[0,7]]]],10],[[11,[[0,[0,7]]]]]],[[[13,[12,[0,[0,7]]]],10],[[13,[12,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[0,7]]]]],14],[[[8,[[0,[0,7]]]]]],[[[8,[7,7,7,[0,[0,7]]]]],[[8,[7,7,7,[0,[0,7]]]]]],[15,15],[16,16],[17,17],[[[8,[7,7,7,[0,[0,7]]]],[8,[7,7,7,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],2],[[],[[8,[22,[0,[22,0,7]]]]]],[[[8,[[0,[0,7]]]]],[[23,[[0,[0,7]]]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[18,19]]],[[11,[[0,[18,19]],20,[0,[0,7]]]]]],0,[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],[[13,[[0,[18,19]],[0,[19,[21,[[0,[18,19]]]],12]],20,[0,[0,7]]]]]],[[[8,[[0,[18,19]],24,20,[0,[0,7]]]],[8,[[0,[18,19]],24,20,[0,[0,7]]]]],2],[[],2],[[[8,[[0,[18,19]],20,[0,[0,7]]]],25]],[[[8,[[0,[18,19,26]],26,20,[0,[0,7]]]],25]],[[[8,[[0,[18,19,26]],26,20,[0,[0,7]]]],25]],[[[8,[[0,[0,7]]]],27],[[28,[27,[0,[0,7]]]]]],[[[8,[29,29,[0,[0,7]]]],3],4],[[[15,[29,29]],3],4],[[[30,[29,29]],3],4],[[[31,[29,29,[0,[0,7]]]],3],4],[[[32,[29,29,[0,[0,7]]]],3],4],[[[33,[29,[0,[0,7]]]],3],4],[[[16,[29]],3],4],[[[17,[29]],3],4],[[[23,[29,29,[0,[0,7]]]],3],4],[[[34,[29]],3],4],[[[35,[[0,[0,7]]]],3],4],[[[9,[29,29,[0,[0,7]]]],3],4],[[[36,[29,29,[0,[0,7]]]],3],4],[[[37,[[0,[0,7]]]],3],4],[[[38,[[0,[0,7]]]],3],4],[[[11,[29,29,[0,[0,7]]]],3],4],[[[39,[29,29,[0,[0,7]]]],3],4],[[[40,[29,[0,[0,7]]]],3],4],[[[13,[[41,[[0,[12,29]]]],[0,[12,29]],29,[0,[0,7]]]],3],4],[[[42,[[41,[[0,[12,29]]]],[0,[12,29]],29,[0,[0,7]]]],3],4],[[[43,[[41,[[0,[12,29]]]],[0,[12,29]],[0,[0,7]]]],3],4],[[[44,[29,29,[0,[0,7]]]],3],4],[[[44,[29,29,[0,[0,7]]]],3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[[0,[0,7]]]],45,27],[[9,[[0,[0,7]]]]]],[[[38,[[0,[0,7]]]],45,27],46],[25,[[8,[[0,[18,19]],[0,[20,22]],[0,[22,0,7]]]]]],[[[35,[20,[0,[0,7]]]],[0,[19,21,12]]],[[9,[20,[0,[0,7]]]]]],[[[38,[20,[0,[0,7]]]],[0,[19,21,12]]],46],[[[35,[[0,[0,7]]]],45,[0,[21,12]]],[[9,[[0,[0,7]]]]]],[[[38,[[0,[0,7]]]],45,[0,[21,12]]],46],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],46],[[[36,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[42,[12,[0,[0,7]]]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],46],[[[36,[[0,[0,7]]]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],46],[[[36,[[0,[0,7]]]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[47,[[0,[19,[21,[[0,[18,19]]]],12]]]]],[[46,[47]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[47,[[0,[19,[21,[[0,[18,19]]]],12]]]]],[[46,[47]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[47,[[0,[19,[21,[[0,[18,19]]]],12]]]]],[[46,[47]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[47,[[0,[19,[21,[[0,[18,19]]]],12]]]]],[[46,[47]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],46],[[[36,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[42,[12,[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[18,19]]],46],[[[9,[19,20,[0,[0,7]]]],19],[[36,[19,20,[0,[0,7]]]]]],[[[36,[[0,[0,7]]]]]],[[[37,[19,20,[0,[0,7]]]],19]],[[[11,[19,20,[0,[0,7]]]]],[[39,[19,20,[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[40,[19,20,[0,[0,7]]]]]],[[[13,[[0,[19,[48,[12]]]],12,20,[0,[0,7]]]]],[[42,[[0,[19,[48,[12]]]],12,20,[0,[0,7]]]]]],[[[42,[12,[0,[0,7]]]]]],[[[43,[[0,[19,[48,[12]]]],12,20,[0,[0,7]]]]]],[[[37,[19,20,[0,[0,7]]]],45,19]],[[[36,[[0,[0,7]]]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[18,19]]]],[[[37,[[0,[0,7]]]],45,49]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[0,7]]]]],[[31,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],15],[[[8,[[0,[0,7]]]]],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]]]],[[[43,[[48,[12]],12,[0,[0,7]]]]],[[48,[12]]]],[[[36,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[32,[[0,[0,7]]]]]],[[[36,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[42,[12,[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[33,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],2],[[[8,[[0,[0,7]]]]],15],[[[8,[[0,[0,7]]]]],30],[[[36,[[0,[0,7]]]]]],[[[11,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]]]],[[[13,[[41,[12]],12,[0,[0,7]]]]],12],[[[42,[12,[0,[0,7]]]]]],[[[43,[[41,[12]],12,[0,[0,7]]]]],12],[[[36,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],16],[[[8,[[0,[0,7]]]]],14],[15,14],[30,14],[[[31,[[0,[0,7]]]]],14],[[[32,[[0,[0,7]]]]],14],[[[33,[[0,[0,7]]]]],14],[16,14],[17,14],[[[23,[[0,[0,7]]]]],14],[34,14],[15,46],[30,46],[[[31,[[0,[0,7]]]]],46],[[[32,[[0,[0,7]]]]],46],[[[33,[[0,[0,7]]]]],46],[16,46],[17,46],[[[23,[[0,[0,7]]]]],46],[[[28,[27,[0,[0,7]]]]],46],[34,46],[[[11,[19,22,20,[0,[0,7]]]]],22],[[[13,[[0,[19,[48,[12]]]],12,22,20,[0,[0,7]]]]],22],[[[9,[19,20,[0,[0,7]]]],19]],[[[11,[19,20,[0,[0,7]]]]]],[[[13,[[0,[19,[48,[12]]]],12,20,[0,[0,7]]]]]],[[[9,[19,20,[0,[0,7]]]],10]],[[[11,[19,20,[0,[0,7]]]],10]],[[[13,[[0,[19,[48,[12]]]],12,20,[0,[0,7]]]],10]],[[[11,[19,20,[0,[0,7]]]],10]],[[[13,[[0,[19,[41,[12]],[48,[12]]]],12,20,[0,[0,7]]]],10]],[[[8,[[0,[0,7]]]]],[[38,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[35,[[0,[0,7]]]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],46],[[[36,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[42,[12,[0,[0,7]]]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],46],[[[36,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[42,[12,[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[42,[[48,[12]],12,[0,[0,7]]]]]],[[[36,[[0,[0,7]]]],10],[[9,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]],10],[[11,[[0,[0,7]]]]]],[[[42,[12,[0,[0,7]]]],10],[[13,[12,[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[42,[[48,[12]],12,[0,[0,7]]]]],[[48,[12]]]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],14]],[[[8,[[0,[0,7]]]],27]],[[[8,[[0,[18,19]],20,[0,[0,7]]]],14]],[[[8,[[0,[18,19]],20,[0,[0,7]]]]]],[15],[30],[[[31,[[0,[0,7]]]]]],[[[32,[[0,[0,7]]]]]],[[[33,[[0,[0,7]]]]]],[16],[17],[[[23,[[0,[0,7]]]]]],[[[28,[27,[0,[0,7]]]]]],[34],[[]],[[]],[[]],[[]],[[],50],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[8,[[0,[18,19]],20,[0,[0,7]]]],[0,[18,19]]],[[5,[[44,[[0,[18,19]],20,[0,[0,7]]]]]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[8,[[0,[18,19]],20,[0,[0,7]]]],14],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[8,[[0,[0,7]]]]],17],[[[8,[[0,[0,7]]]]],34],[14,8],[[14,[0,[0,7]]],[[8,[[0,[0,7]]]]]],[[],8],[[[0,[0,7]]],[[8,[[0,[0,7]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[51,[[0,[0,7]]]]],[[0,[0,7]]]],[[[51,[[0,[18,19,7]],[0,[20,22]],[0,[0,7]]]],[51,[[0,[18,19,7]],[0,[20,22]],[0,[0,7]]]]],[[51,[[0,[18,19,7]],[0,[20,22]]]]]],[[[51,[[0,[18,19,7]],[0,[20,22]],[0,[0,7]]]],[51,[[0,[18,19,7]],[0,[20,22]],[0,[0,7]]]]],[[51,[[0,[18,19,7]],[0,[20,22]]]]]],[[[51,[[0,[18,19,7]],[0,[20,22]]]],[51,[[0,[18,19,7]],[0,[20,22]]]]],[[51,[[0,[18,19,7]],[0,[20,22]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[[0,[0,7]]]]],14],[[[51,[[0,[0,7]]]]]],[[[51,[7,7,[0,[0,7]]]]],[[51,[7,7,[0,[0,7]]]]]],[52,52],[[[53,[[0,[0,7]]]]],[[53,[[0,[0,7]]]]]],[[[54,[[0,[0,7]]]]],[[54,[[0,[0,7]]]]]],[[[55,[[0,[0,7]]]]],[[55,[[0,[0,7]]]]]],[[[56,[[0,[0,7]]]]],[[56,[[0,[0,7]]]]]],[[[51,[7,7,[0,[0,7]]]],[51,[7,7,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],2],[[],[[51,[22,[0,[22,0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[51,[[0,[18,19]],20,[0,[0,7]]]]],[[54,[[0,[18,19]],20,[0,[0,7]]]]]],[[[51,[[0,[0,7]]]]],[[57,[[0,[0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[18,19]]],[[58,[[0,[18,19]],20,[0,[0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[51,[[0,[18,19]],20,[0,[0,7]]]]],2],[[],2],[[[51,[[0,[18,19,26]],20,[0,[0,7]]]],25]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],25]],[[[51,[[0,[0,7]]]],27],[[59,[27,[0,[0,7]]]]]],[[[51,[29,[0,[0,7]]]],3],4],[[[52,[29]],3],4],[[[60,[29,[0,[0,7]]]],3],4],[[[57,[29,[0,[0,7]]]],3],4],[[[53,[[0,[29,18,19]],20,[0,[0,7]]]],3],4],[[[54,[[0,[29,18,19]],20,[0,[0,7]]]],3],4],[[[55,[[0,[29,18,19]],20,[0,[0,7]]]],3],4],[[[56,[[0,[29,18,19]],20,[0,[0,7]]]],3],4],[[[58,[29,[0,[0,7]]]],3],4],[[[61,[29,[0,[0,7]]]],3],4],[[[62,[29,[0,[0,7]]]],3],4],[[]],[[[8,[[0,[0,7]]]]],[[51,[[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,[[51,[[0,[18,19]],[0,[20,22]],[0,[22,0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],[[46,[[0,[18,19]]]]]],[[[58,[[0,[0,7]]]]]],[[[61,[[0,[0,7]]]]]],[[[62,[[0,[0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[18,19]]],[[0,[18,19]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],63,12]]],[[0,[18,19]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]],10],[[0,[18,19]]]],[[[51,[[0,[0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[18,19]]],2],[[[58,[19,20,[0,[0,7]]]]],[[61,[19,20,[0,[0,7]]]]]],[[[62,[19,20,[0,[0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[18,19]]],[[0,[18,19]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[51,[[0,[18,19]],20,[0,[0,7]]]]],[[53,[[0,[18,19]],20,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[[0,[0,7]]]]],52],[[[51,[[0,[0,7]]]]],[[60,[[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[62,[[0,[0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[51,[[0,[18,19]],20,[0,[0,7]]]]],2],[[[51,[[0,[0,7]]]]],2],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[51,[[0,[18,19]],20,[0,[0,7]]]]],2],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[51,[[0,[18,19]],20,[0,[0,7]]]]],2],[[[51,[[0,[0,7]]]]],52],[[[51,[[0,[0,7]]]]],14],[52,14],[[[60,[[0,[0,7]]]]],14],[[[57,[[0,[0,7]]]]],14],[52,46],[[[60,[[0,[0,7]]]]],46],[[[57,[[0,[0,7]]]]],46],[[[59,[27,[0,[0,7]]]]],46],[[[53,[[0,[18,19]],20,[0,[0,7]]]]],[[46,[[0,[18,19]]]]]],[[[54,[[0,[18,19]],20,[0,[0,7]]]]],[[46,[[0,[18,19]]]]]],[[[55,[[0,[18,19]],20,[0,[0,7]]]]],[[46,[[0,[18,19]]]]]],[[[56,[[0,[18,19]],20,[0,[0,7]]]]],[[46,[[0,[18,19]]]]]],[[[58,[19,20,[0,[0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],2],[[[61,[[0,[0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[18,19]]],[[46,[[0,[18,19]]]]]],[[[61,[[0,[0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],14]],[[[51,[[0,[0,7]]]],27]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],14]],[[[51,[[0,[18,19]],20,[0,[0,7]]]]]],[52],[[[60,[[0,[0,7]]]]]],[[[57,[[0,[0,7]]]]]],[[[59,[27,[0,[0,7]]]]]],[[[53,[[0,[18,19]],20,[0,[0,7]]]]]],[[[54,[[0,[18,19]],20,[0,[0,7]]]]]],[[[55,[[0,[18,19]],20,[0,[0,7]]]]]],[[[56,[[0,[18,19]],20,[0,[0,7]]]]]],[[[51,[[0,[18,19,7]],[0,[20,22]]]],[51,[[0,[18,19,7]],[0,[20,22]]]]],[[51,[[0,[18,19,7]],[0,[20,22]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[51,[[0,[18,19]],20,[0,[0,7]]]]],[[55,[[0,[18,19]],20,[0,[0,7]]]]]],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[0,[19,[21,[[0,[18,19]]]],12]]],[[46,[[0,[18,19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[51,[[0,[18,19]],20,[0,[0,7]]]],14],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[51,[[0,[18,19]],20,[0,[0,7]]]],[51,[[0,[18,19]],20,[0,[0,7]]]]],[[56,[[0,[18,19]],20,[0,[0,7]]]]]],[14,[[51,[0]]]],[[14,[0,[0,7]]],[[51,[[0,[0,7]]]]]],[[],[[51,[0]]]],[[[0,[0,7]]],[[51,[[0,[0,7]]]]]]],"c":[],"p":[[4,"TryReserveError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"HashMap"],[4,"RawEntryMut"],[8,"FnOnce"],[4,"Entry"],[8,"Sized"],[4,"EntryRef"],[15,"usize"],[3,"Iter"],[3,"Keys"],[3,"Values"],[8,"Eq"],[8,"Hash"],[8,"BuildHasher"],[8,"Equivalent"],[8,"Default"],[3,"Drain"],[8,"PartialEq"],[8,"IntoIterator"],[8,"Copy"],[8,"FnMut"],[3,"ExtractIf"],[8,"Debug"],[3,"IterMut"],[3,"IntoIter"],[3,"IntoKeys"],[3,"IntoValues"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"Borrow"],[3,"OccupiedEntryRef"],[3,"VacantEntryRef"],[3,"OccupiedError"],[15,"u64"],[4,"Option"],[15,"array"],[8,"From"],[8,"Fn"],[3,"String"],[3,"HashSet"],[3,"Iter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Drain"],[4,"Entry"],[3,"ExtractIf"],[3,"IntoIter"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"ToOwned"],[13,"AllocError"],[4,"DefaultHashBuilder"]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":"","n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ABS_CNT","ABS_MAX","ACCOUNTING","ADDR_COMPAT_LAYOUT","ADDR_LIMIT_32BIT","ADDR_LIMIT_3GB","ADDR_NO_RANDOMIZE","ADFS_SUPER_MAGIC","ADJ_ESTERROR","ADJ_FREQUENCY","ADJ_MAXERROR","ADJ_MICRO","ADJ_NANO","ADJ_OFFSET","ADJ_OFFSET_SINGLESHOT","ADJ_OFFSET_SS_READ","ADJ_SETOFFSET","ADJ_STATUS","ADJ_TAI","ADJ_TICK","ADJ_TIMECONST","AFFS_SUPER_MAGIC","AFS_SUPER_MAGIC","AF_ALG","AF_APPLETALK","AF_ASH","AF_ATMPVC","AF_ATMSVC","AF_AX25","AF_BLUETOOTH","AF_BRIDGE","AF_CAIF","AF_CAN","AF_DECnet","AF_ECONET","AF_IB","AF_IEEE802154","AF_INET","AF_INET6","AF_IPX","AF_IRDA","AF_ISDN","AF_IUCV","AF_KEY","AF_LLC","AF_LOCAL","AF_MPLS","AF_NETBEUI","AF_NETLINK","AF_NETROM","AF_NFC","AF_PACKET","AF_PHONET","AF_PPPOX","AF_RDS","AF_ROSE","AF_ROUTE","AF_RXRPC","AF_SECURITY","AF_SNA","AF_TIPC","AF_UNIX","AF_UNSPEC","AF_VSOCK","AF_WANPIPE","AF_X25","AF_XDP","AIO_ALLDONE","AIO_CANCELED","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_V4MAPPED","ALG_OP_DECRYPT","ALG_OP_ENCRYPT","ALG_SET_AEAD_ASSOCLEN","ALG_SET_AEAD_AUTHSIZE","ALG_SET_IV","ALG_SET_KEY","ALG_SET_OP","ALT_DIGITS","AM_STR","ARPD_FLUSH","ARPD_LOOKUP","ARPD_UPDATE","ARPHRD_ADAPT","ARPHRD_APPLETLK","ARPHRD_ARCNET","ARPHRD_ASH","ARPHRD_ATM","ARPHRD_AX25","ARPHRD_BIF","ARPHRD_CAN","ARPHRD_CHAOS","ARPHRD_CISCO","ARPHRD_CSLIP","ARPHRD_CSLIP6","ARPHRD_DDCMP","ARPHRD_DLCI","ARPHRD_ECONET","ARPHRD_EETHER","ARPHRD_ETHER","ARPHRD_EUI64","ARPHRD_FCAL","ARPHRD_FCFABRIC","ARPHRD_FCPL","ARPHRD_FCPP","ARPHRD_FDDI","ARPHRD_FRAD","ARPHRD_HDLC","ARPHRD_HIPPI","ARPHRD_HWX25","ARPHRD_IEEE1394","ARPHRD_IEEE802","ARPHRD_IEEE80211","ARPHRD_IEEE80211_PRISM","ARPHRD_IEEE80211_RADIOTAP","ARPHRD_IEEE802154","ARPHRD_IEEE802_TR","ARPHRD_INFINIBAND","ARPHRD_IPDDP","ARPHRD_IPGRE","ARPHRD_IRDA","ARPHRD_LAPB","ARPHRD_LOCALTLK","ARPHRD_LOOPBACK","ARPHRD_METRICOM","ARPHRD_NETROM","ARPHRD_NONE","ARPHRD_PIMREG","ARPHRD_PPP","ARPHRD_PRONET","ARPHRD_RAWHDLC","ARPHRD_ROSE","ARPHRD_RSRVD","ARPHRD_SIT","ARPHRD_SKIP","ARPHRD_SLIP","ARPHRD_SLIP6","ARPHRD_TUNNEL","ARPHRD_TUNNEL6","ARPHRD_VOID","ARPHRD_X25","ARPOP_InREPLY","ARPOP_InREQUEST","ARPOP_NAK","ARPOP_REPLY","ARPOP_REQUEST","ARPOP_RREPLY","ARPOP_RREQUEST","ATF_COM","ATF_DONTPUB","ATF_MAGIC","ATF_NETMASK","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_BASE","AT_BASE_PLATFORM","AT_CLKTCK","AT_EACCESS","AT_EGID","AT_EMPTY_PATH","AT_ENTRY","AT_EUID","AT_EXECFD","AT_EXECFN","AT_FDCWD","AT_FLAGS","AT_GID","AT_HWCAP","AT_HWCAP2","AT_IGNORE","AT_NOTELF","AT_NO_AUTOMOUNT","AT_NULL","AT_PAGESZ","AT_PHDR","AT_PHENT","AT_PHNUM","AT_PLATFORM","AT_RANDOM","AT_RECURSIVE","AT_REMOVEDIR","AT_SECURE","AT_STATX_DONT_SYNC","AT_STATX_FORCE_SYNC","AT_STATX_SYNC_AS_STAT","AT_STATX_SYNC_TYPE","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AT_SYSINFO_EHDR","AT_UID","AUTOFS_SUPER_MAGIC","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BINDERFS_SUPER_MAGIC","BLKIOMIN","BLKIOOPT","BLKPBSZGET","BLKSSZGET","BOOT_TIME","BOTHER","BPF_ABS","BPF_ADD","BPF_ALU","BPF_AND","BPF_B","BPF_DIV","BPF_FS_MAGIC","BPF_H","BPF_IMM","BPF_IND","BPF_JA","BPF_JEQ","BPF_JGE","BPF_JGT","BPF_JMP","BPF_JSET","BPF_JUMP","BPF_K","BPF_LD","BPF_LDX","BPF_LEN","BPF_LL_OFF","BPF_LSH","BPF_MAXINSNS","BPF_MEM","BPF_MEMWORDS","BPF_MISC","BPF_MISCOP","BPF_MOD","BPF_MSH","BPF_MUL","BPF_NEG","BPF_NET_OFF","BPF_OR","BPF_RET","BPF_RSH","BPF_RVAL","BPF_ST","BPF_STMT","BPF_STX","BPF_SUB","BPF_W","BPF_X","BPF_XOR","BRKINT","BS0","BS1","BSDLY","BTRFS_SUPER_MAGIC","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_MCEERR_AO","BUS_MCEERR_AR","BUS_OBJERR","CANFD_BRS","CANFD_ESI","CANFD_MAX_DLC","CANFD_MAX_DLEN","CANFD_MTU","CANXL_HDR_SIZE","CANXL_MAX_DLC","CANXL_MAX_DLC_MASK","CANXL_MAX_DLEN","CANXL_MAX_MTU","CANXL_MIN_DLC","CANXL_MIN_DLEN","CANXL_MIN_MTU","CANXL_MTU","CANXL_PRIO_BITS","CANXL_PRIO_MASK","CANXL_SEC","CANXL_XLF","CAN_BCM","CAN_EFF_FLAG","CAN_EFF_ID_BITS","CAN_EFF_MASK","CAN_ERR_FLAG","CAN_ERR_MASK","CAN_INV_FILTER","CAN_ISOTP","CAN_J1939","CAN_MAX_DLC","CAN_MAX_DLEN","CAN_MCNET","CAN_MTU","CAN_NPROTO","CAN_RAW","CAN_RAW_ERR_FILTER","CAN_RAW_FD_FRAMES","CAN_RAW_FILTER","CAN_RAW_FILTER_MAX","CAN_RAW_JOIN_FILTERS","CAN_RAW_LOOPBACK","CAN_RAW_RECV_OWN_MSGS","CAN_RAW_XL_FRAMES","CAN_RTR_FLAG","CAN_SFF_ID_BITS","CAN_SFF_MASK","CAN_TP16","CAN_TP20","CBAUD","CBAUDEX","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CIBAUD","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_TAI","CLOCK_THREAD_CPUTIME_ID","CLONE_CHILD_CLEARTID","CLONE_CHILD_SETTID","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PARENT_SETTID","CLONE_PIDFD","CLONE_PTRACE","CLONE_SETTLS","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CLOSE_RANGE_CLOEXEC","CLOSE_RANGE_UNSHARE","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CMSPAR","CODA_SUPER_MAGIC","CODESET","CPU_ALLOC_SIZE","CPU_CLR","CPU_COUNT","CPU_COUNT_S","CPU_EQUAL","CPU_ISSET","CPU_SET","CPU_SETSIZE","CPU_ZERO","CR0","CR1","CR2","CR3","CRAMFS_MAGIC","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTRL_ATTR_FAMILY_ID","CTRL_ATTR_FAMILY_NAME","CTRL_ATTR_HDRSIZE","CTRL_ATTR_MAXATTR","CTRL_ATTR_MCAST_GROUPS","CTRL_ATTR_MCAST_GRP_ID","CTRL_ATTR_MCAST_GRP_NAME","CTRL_ATTR_MCAST_GRP_UNSPEC","CTRL_ATTR_OPS","CTRL_ATTR_OP_FLAGS","CTRL_ATTR_OP_ID","CTRL_ATTR_OP_UNSPEC","CTRL_ATTR_UNSPEC","CTRL_ATTR_VERSION","CTRL_CMD_DELFAMILY","CTRL_CMD_DELMCAST_GRP","CTRL_CMD_DELOPS","CTRL_CMD_GETFAMILY","CTRL_CMD_GETMCAST_GRP","CTRL_CMD_GETOPS","CTRL_CMD_NEWFAMILY","CTRL_CMD_NEWMCAST_GRP","CTRL_CMD_NEWOPS","CTRL_CMD_UNSPEC","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DCCP_SERVICE_LIST_MAX_LEN","DCCP_SOCKOPT_AVAILABLE_CCIDS","DCCP_SOCKOPT_CCID","DCCP_SOCKOPT_CCID_RX_INFO","DCCP_SOCKOPT_CCID_TX_INFO","DCCP_SOCKOPT_CHANGE_L","DCCP_SOCKOPT_CHANGE_R","DCCP_SOCKOPT_GET_CUR_MPS","DCCP_SOCKOPT_PACKET_SIZE","DCCP_SOCKOPT_QPOLICY_ID","DCCP_SOCKOPT_QPOLICY_TXQLEN","DCCP_SOCKOPT_RECV_CSCOV","DCCP_SOCKOPT_RX_CCID","DCCP_SOCKOPT_SEND_CSCOV","DCCP_SOCKOPT_SERVER_TIMEWAIT","DCCP_SOCKOPT_SERVICE","DCCP_SOCKOPT_TX_CCID","DEAD_PROCESS","DEBUGFS_MAGIC","DEVPTS_SUPER_MAGIC","DIR","DS","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","ECRYPTFS_SUPER_MAGIC","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EFLAGS","EFS_SUPER_MAGIC","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EI_ABIVERSION","EI_CLASS","EI_DATA","EI_MAG0","EI_MAG1","EI_MAG2","EI_MAG3","EI_NIDENT","EI_OSABI","EI_PAD","EI_VERSION","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELFCLASS32","ELFCLASS64","ELFCLASSNONE","ELFCLASSNUM","ELFDATA2LSB","ELFDATA2MSB","ELFDATANONE","ELFDATANUM","ELFMAG0","ELFMAG1","ELFMAG2","ELFMAG3","ELFOSABI_AIX","ELFOSABI_ARM","ELFOSABI_ARM_AEABI","ELFOSABI_FREEBSD","ELFOSABI_GNU","ELFOSABI_HPUX","ELFOSABI_IRIX","ELFOSABI_LINUX","ELFOSABI_MODESTO","ELFOSABI_NETBSD","ELFOSABI_NONE","ELFOSABI_OPENBSD","ELFOSABI_SOLARIS","ELFOSABI_STANDALONE","ELFOSABI_SYSV","ELFOSABI_TRU64","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","EM_386","EM_68HC05","EM_68HC08","EM_68HC11","EM_68HC12","EM_68HC16","EM_68K","EM_860","EM_88K","EM_960","EM_AARCH64","EM_ALPHA","EM_ARC","EM_ARC_A5","EM_ARM","EM_AVR","EM_COLDFIRE","EM_CRIS","EM_D10V","EM_D30V","EM_FAKE_ALPHA","EM_FIREPATH","EM_FR20","EM_FR30","EM_FX66","EM_H8S","EM_H8_300","EM_H8_300H","EM_H8_500","EM_HUANY","EM_IA_64","EM_JAVELIN","EM_M32","EM_M32R","EM_ME16","EM_MIPS","EM_MIPS_RS3_LE","EM_MIPS_X","EM_MMA","EM_MMIX","EM_MN10200","EM_MN10300","EM_NCPU","EM_NDR1","EM_NONE","EM_OPENRISC","EM_PARISC","EM_PCP","EM_PDSP","EM_PJ","EM_PPC","EM_PPC64","EM_PRISM","EM_RCE","EM_RH32","EM_S370","EM_S390","EM_SH","EM_SPARC","EM_SPARC32PLUS","EM_SPARCV9","EM_ST100","EM_ST19","EM_ST7","EM_ST9PLUS","EM_STARCORE","EM_SVX","EM_TILEGX","EM_TILEPRO","EM_TINYJ","EM_TRICORE","EM_V800","EM_V850","EM_VAX","EM_VPP500","EM_X86_64","EM_XTENSA","EM_ZSP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOATTR","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EPOLL_CTL_ADD","EPOLL_CTL_DEL","EPOLL_CTL_MOD","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ES","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETH_ALEN","ETH_DATA_LEN","ETH_FCS_LEN","ETH_FRAME_LEN","ETH_HLEN","ETH_P_1588","ETH_P_8021AD","ETH_P_8021AH","ETH_P_8021Q","ETH_P_80221","ETH_P_802_2","ETH_P_802_3","ETH_P_802_3_MIN","ETH_P_802_EX1","ETH_P_AARP","ETH_P_AF_IUCV","ETH_P_ALL","ETH_P_AOE","ETH_P_ARCNET","ETH_P_ARP","ETH_P_ATALK","ETH_P_ATMFATE","ETH_P_ATMMPOA","ETH_P_AX25","ETH_P_BATMAN","ETH_P_BPQ","ETH_P_CAIF","ETH_P_CANFD","ETH_P_CONTROL","ETH_P_CUST","ETH_P_DDCMP","ETH_P_DEC","ETH_P_DIAG","ETH_P_DNA_DL","ETH_P_DNA_RC","ETH_P_DNA_RT","ETH_P_DSA","ETH_P_ECONET","ETH_P_EDSA","ETH_P_FCOE","ETH_P_FIP","ETH_P_HDLC","ETH_P_IEEE802154","ETH_P_IEEEPUP","ETH_P_IEEEPUPAT","ETH_P_IP","ETH_P_IPV6","ETH_P_IPX","ETH_P_IRDA","ETH_P_LAT","ETH_P_LINK_CTL","ETH_P_LOCALTALK","ETH_P_LOOP","ETH_P_LOOPBACK","ETH_P_MACSEC","ETH_P_MOBITEX","ETH_P_MPLS_MC","ETH_P_MPLS_UC","ETH_P_MVRP","ETH_P_PAE","ETH_P_PAUSE","ETH_P_PHONET","ETH_P_PPPTALK","ETH_P_PPP_DISC","ETH_P_PPP_MP","ETH_P_PPP_SES","ETH_P_PRP","ETH_P_PUP","ETH_P_PUPAT","ETH_P_QINQ1","ETH_P_QINQ2","ETH_P_QINQ3","ETH_P_RARP","ETH_P_SCA","ETH_P_SLOW","ETH_P_SNAP","ETH_P_TDLS","ETH_P_TEB","ETH_P_TIPC","ETH_P_TRAILER","ETH_P_TR_802_2","ETH_P_WAN_PPP","ETH_P_WCCP","ETH_P_X25","ETH_ZLEN","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","ET_CORE","ET_DYN","ET_EXEC","ET_HIOS","ET_HIPROC","ET_LOOS","ET_LOPROC","ET_NONE","ET_NUM","ET_REL","EUCLEAN","EUNATCH","EUSERS","EV_CNT","EV_CURRENT","EV_MAX","EV_NONE","EV_NUM","EWOULDBLOCK","EXDEV","EXFULL","EXIT_FAILURE","EXIT_SUCCESS","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","EXTA","EXTB","EXTPROC","Elf32_Addr","Elf32_Chdr","Elf32_Ehdr","Elf32_Half","Elf32_Off","Elf32_Phdr","Elf32_Section","Elf32_Shdr","Elf32_Sym","Elf32_Word","Elf64_Addr","Elf64_Chdr","Elf64_Ehdr","Elf64_Half","Elf64_Off","Elf64_Phdr","Elf64_Section","Elf64_Shdr","Elf64_Sxword","Elf64_Sym","Elf64_Word","Elf64_Xword","F2FS_SUPER_MAGIC","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FANOTIFY_METADATA_VERSION","FAN_ACCESS","FAN_ACCESS_PERM","FAN_ALLOW","FAN_CLASS_CONTENT","FAN_CLASS_NOTIF","FAN_CLASS_PRE_CONTENT","FAN_CLOEXEC","FAN_CLOSE","FAN_CLOSE_NOWRITE","FAN_CLOSE_WRITE","FAN_DENY","FAN_EVENT_ON_CHILD","FAN_MARK_ADD","FAN_MARK_DONT_FOLLOW","FAN_MARK_FILESYSTEM","FAN_MARK_FLUSH","FAN_MARK_IGNORED_MASK","FAN_MARK_IGNORED_SURV_MODIFY","FAN_MARK_INODE","FAN_MARK_MOUNT","FAN_MARK_ONLYDIR","FAN_MARK_REMOVE","FAN_MODIFY","FAN_NOFD","FAN_NONBLOCK","FAN_ONDIR","FAN_OPEN","FAN_OPEN_PERM","FAN_Q_OVERFLOW","FAN_UNLIMITED_MARKS","FAN_UNLIMITED_QUEUE","FDPIC_FUNCPTRS","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FF_CNT","FF_MAX","FICLONE","FICLONERANGE","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIONBIO","FIONCLEX","FIONREAD","FIOQSIZE","FLUSHO","FOPEN_MAX","FS","FS_BASE","FUSE_SUPER_MAGIC","FUTEXFS_SUPER_MAGIC","FUTEX_BITSET_MATCH_ANY","FUTEX_CLOCK_REALTIME","FUTEX_CMD_MASK","FUTEX_CMP_REQUEUE","FUTEX_CMP_REQUEUE_PI","FUTEX_FD","FUTEX_LOCK_PI","FUTEX_LOCK_PI2","FUTEX_OP","FUTEX_OP_ADD","FUTEX_OP_ANDN","FUTEX_OP_CMP_EQ","FUTEX_OP_CMP_GE","FUTEX_OP_CMP_GT","FUTEX_OP_CMP_LE","FUTEX_OP_CMP_LT","FUTEX_OP_CMP_NE","FUTEX_OP_OPARG_SHIFT","FUTEX_OP_OR","FUTEX_OP_SET","FUTEX_OP_XOR","FUTEX_PRIVATE_FLAG","FUTEX_REQUEUE","FUTEX_TRYLOCK_PI","FUTEX_UNLOCK_PI","FUTEX_WAIT","FUTEX_WAIT_BITSET","FUTEX_WAIT_REQUEUE_PI","FUTEX_WAKE","FUTEX_WAKE_BITSET","FUTEX_WAKE_OP","F_ADD_SEALS","F_CANCELLK","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLEASE","F_GETLK","F_GETOWN","F_GETPIPE_SZ","F_GET_SEALS","F_LOCK","F_NOTIFY","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_OK","F_RDLCK","F_SEAL_FUTURE_WRITE","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLEASE","F_SETLK","F_SETLKW","F_SETOWN","F_SETPIPE_SZ","F_TEST","F_TLOCK","F_ULOCK","F_UNLCK","F_WRLCK","GENL_ADMIN_PERM","GENL_CMD_CAP_DO","GENL_CMD_CAP_DUMP","GENL_CMD_CAP_HASPOL","GENL_ID_CTRL","GENL_ID_PMCRAID","GENL_ID_VFS_DQUOT","GENL_MAX_ID","GENL_MIN_ID","GENL_NAMSIZ","GENL_UNS_ADMIN_PERM","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRND_INSECURE","GRND_NONBLOCK","GRND_RANDOM","GRPQUOTA","GS","GS_BASE","HOSTFS_SUPER_MAGIC","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","HUGETLB_FLAG_ENCODE_16GB","HUGETLB_FLAG_ENCODE_16MB","HUGETLB_FLAG_ENCODE_1GB","HUGETLB_FLAG_ENCODE_1MB","HUGETLB_FLAG_ENCODE_256MB","HUGETLB_FLAG_ENCODE_2GB","HUGETLB_FLAG_ENCODE_2MB","HUGETLB_FLAG_ENCODE_32MB","HUGETLB_FLAG_ENCODE_512KB","HUGETLB_FLAG_ENCODE_512MB","HUGETLB_FLAG_ENCODE_64KB","HUGETLB_FLAG_ENCODE_8MB","HUGETLB_FLAG_ENCODE_MASK","HUGETLB_FLAG_ENCODE_SHIFT","HUPCL","HWTSTAMP_FILTER_ALL","HWTSTAMP_FILTER_NONE","HWTSTAMP_FILTER_NTP_ALL","HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V1_L4_EVENT","HWTSTAMP_FILTER_PTP_V1_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_SYNC","HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L4_EVENT","HWTSTAMP_FILTER_PTP_V2_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_SYNC","HWTSTAMP_FILTER_SOME","HWTSTAMP_TX_OFF","HWTSTAMP_TX_ON","HWTSTAMP_TX_ONESTEP_P2P","HWTSTAMP_TX_ONESTEP_SYNC","IBSHIFT","ICANON","ICRNL","IEXTEN","IFA_ADDRESS","IFA_ANYCAST","IFA_BROADCAST","IFA_CACHEINFO","IFA_FLAGS","IFA_F_DADFAILED","IFA_F_DEPRECATED","IFA_F_HOMEADDRESS","IFA_F_MANAGETEMPADDR","IFA_F_MCAUTOJOIN","IFA_F_NODAD","IFA_F_NOPREFIXROUTE","IFA_F_OPTIMISTIC","IFA_F_PERMANENT","IFA_F_SECONDARY","IFA_F_STABLE_PRIVACY","IFA_F_TEMPORARY","IFA_F_TENTATIVE","IFA_LABEL","IFA_LOCAL","IFA_MULTICAST","IFA_UNSPEC","IFF_ALLMULTI","IFF_ATTACH_QUEUE","IFF_AUTOMEDIA","IFF_BROADCAST","IFF_DEBUG","IFF_DETACH_QUEUE","IFF_DORMANT","IFF_DYNAMIC","IFF_ECHO","IFF_LOOPBACK","IFF_LOWER_UP","IFF_MASTER","IFF_MULTICAST","IFF_MULTI_QUEUE","IFF_NOARP","IFF_NOFILTER","IFF_NOTRAILERS","IFF_NO_PI","IFF_ONE_QUEUE","IFF_PERSIST","IFF_POINTOPOINT","IFF_PORTSEL","IFF_PROMISC","IFF_RUNNING","IFF_SLAVE","IFF_TAP","IFF_TUN","IFF_TUN_EXCL","IFF_UP","IFF_VNET_HDR","IFLA_ADDRESS","IFLA_AF_SPEC","IFLA_ALLMULTI","IFLA_ALT_IFNAME","IFLA_BROADCAST","IFLA_CARRIER","IFLA_CARRIER_CHANGES","IFLA_CARRIER_DOWN_COUNT","IFLA_CARRIER_UP_COUNT","IFLA_COST","IFLA_EVENT","IFLA_EXT_MASK","IFLA_GROUP","IFLA_GRO_MAX_SIZE","IFLA_GSO_MAX_SEGS","IFLA_GSO_MAX_SIZE","IFLA_IFALIAS","IFLA_IFNAME","IFLA_IF_NETNSID","IFLA_INFO_DATA","IFLA_INFO_KIND","IFLA_INFO_SLAVE_DATA","IFLA_INFO_SLAVE_KIND","IFLA_INFO_UNSPEC","IFLA_INFO_XSTATS","IFLA_LINK","IFLA_LINKINFO","IFLA_LINKMODE","IFLA_LINK_NETNSID","IFLA_MAP","IFLA_MASTER","IFLA_MAX_MTU","IFLA_MIN_MTU","IFLA_MTU","IFLA_NET_NS_FD","IFLA_NET_NS_PID","IFLA_NEW_IFINDEX","IFLA_NEW_NETNSID","IFLA_NUM_RX_QUEUES","IFLA_NUM_TX_QUEUES","IFLA_NUM_VF","IFLA_OPERSTATE","IFLA_PAD","IFLA_PARENT_DEV_BUS_NAME","IFLA_PARENT_DEV_NAME","IFLA_PERM_ADDRESS","IFLA_PHYS_PORT_ID","IFLA_PHYS_PORT_NAME","IFLA_PHYS_SWITCH_ID","IFLA_PORT_SELF","IFLA_PRIORITY","IFLA_PROMISCUITY","IFLA_PROP_LIST","IFLA_PROTINFO","IFLA_PROTO_DOWN","IFLA_PROTO_DOWN_REASON","IFLA_QDISC","IFLA_STATS","IFLA_STATS64","IFLA_TARGET_NETNSID","IFLA_TSO_MAX_SEGS","IFLA_TSO_MAX_SIZE","IFLA_TXQLEN","IFLA_UNSPEC","IFLA_VFINFO_LIST","IFLA_VF_PORTS","IFLA_WEIGHT","IFLA_WIRELESS","IFLA_XDP","IFNAMSIZ","IF_LINK_MODE_DEFAULT","IF_LINK_MODE_DORMANT","IF_LINK_MODE_TESTING","IF_NAMESIZE","IF_OPER_DORMANT","IF_OPER_DOWN","IF_OPER_LOWERLAYERDOWN","IF_OPER_NOTPRESENT","IF_OPER_TESTING","IF_OPER_UNKNOWN","IF_OPER_UP","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INPUT_PROP_CNT","INPUT_PROP_MAX","INT_MAX","INT_MIN","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_EXCL_UNLINK","IN_IGNORED","IN_ISDIR","IN_MASK_ADD","IN_MASK_CREATE","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","IP6T_SO_ORIGINAL_DST","IPC_CREAT","IPC_EXCL","IPC_INFO","IPC_NOWAIT","IPC_PRIVATE","IPC_RMID","IPC_SET","IPC_STAT","IPDEFTTL","IPOPT_CLASS","IPOPT_CLASS_MASK","IPOPT_CONTROL","IPOPT_COPIED","IPOPT_COPY","IPOPT_END","IPOPT_EOL","IPOPT_LSRR","IPOPT_MEASUREMENT","IPOPT_MINOFF","IPOPT_NOOP","IPOPT_NOP","IPOPT_NUMBER","IPOPT_NUMBER_MASK","IPOPT_OFFSET","IPOPT_OLEN","IPOPT_OPTVAL","IPOPT_RA","IPOPT_RESERVED1","IPOPT_RESERVED2","IPOPT_RR","IPOPT_SEC","IPOPT_SID","IPOPT_SSRR","IPOPT_TIMESTAMP","IPOPT_TS","IPOPT_TS_PRESPEC","IPOPT_TS_TSANDADDR","IPOPT_TS_TSONLY","IPPROTO_AH","IPPROTO_BEETPH","IPPROTO_COMP","IPPROTO_DCCP","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_ENCAP","IPPROTO_ESP","IPPROTO_ETHERNET","IPPROTO_FRAGMENT","IPPROTO_GRE","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IGMP","IPPROTO_IP","IPPROTO_IPIP","IPPROTO_IPV6","IPPROTO_MAX","IPPROTO_MH","IPPROTO_MPLS","IPPROTO_MPTCP","IPPROTO_MTP","IPPROTO_NONE","IPPROTO_PIM","IPPROTO_PUP","IPPROTO_RAW","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_SCTP","IPPROTO_TCP","IPPROTO_TP","IPPROTO_UDP","IPPROTO_UDPLITE","IPTOS_ECN","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOT_ECT","IPTOS_LOWDELAY","IPTOS_MINCOST","IPTOS_PREC","IPTOS_PREC_CRITIC_ECP","IPTOS_PREC_FLASH","IPTOS_PREC_FLASHOVERRIDE","IPTOS_PREC_IMMEDIATE","IPTOS_PREC_INTERNETCONTROL","IPTOS_PREC_MASK","IPTOS_PREC_NETCONTROL","IPTOS_PREC_PRIORITY","IPTOS_PREC_ROUTINE","IPTOS_RELIABILITY","IPTOS_THROUGHPUT","IPTOS_TOS","IPTOS_TOS_MASK","IPV6_2292DSTOPTS","IPV6_2292HOPLIMIT","IPV6_2292HOPOPTS","IPV6_2292PKTINFO","IPV6_2292PKTOPTIONS","IPV6_2292RTHDR","IPV6_ADDRFORM","IPV6_ADDR_PREFERENCES","IPV6_ADD_MEMBERSHIP","IPV6_AUTHHDR","IPV6_AUTOFLOWLABEL","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_DROP_MEMBERSHIP","IPV6_DSTOPTS","IPV6_FLOWINFO","IPV6_FLOWINFO_FLOWLABEL","IPV6_FLOWINFO_PRIORITY","IPV6_FLOWINFO_SEND","IPV6_FLOWLABEL_MGR","IPV6_FREEBIND","IPV6_HDRINCL","IPV6_HOPLIMIT","IPV6_HOPOPTS","IPV6_IPSEC_POLICY","IPV6_JOIN_ANYCAST","IPV6_LEAVE_ANYCAST","IPV6_MINHOPCOUNT","IPV6_MTU","IPV6_MTU_DISCOVER","IPV6_MULTICAST_ALL","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_NEXTHOP","IPV6_ORIGDSTADDR","IPV6_PATHMTU","IPV6_PKTINFO","IPV6_PMTUDISC_DO","IPV6_PMTUDISC_DONT","IPV6_PMTUDISC_INTERFACE","IPV6_PMTUDISC_OMIT","IPV6_PMTUDISC_PROBE","IPV6_PMTUDISC_WANT","IPV6_PREFER_SRC_CGA","IPV6_PREFER_SRC_COA","IPV6_PREFER_SRC_HOME","IPV6_PREFER_SRC_NONCGA","IPV6_PREFER_SRC_PUBLIC","IPV6_PREFER_SRC_PUBTMP_DEFAULT","IPV6_PREFER_SRC_TMP","IPV6_RECVDSTOPTS","IPV6_RECVERR","IPV6_RECVFRAGSIZE","IPV6_RECVHOPLIMIT","IPV6_RECVHOPOPTS","IPV6_RECVORIGDSTADDR","IPV6_RECVPATHMTU","IPV6_RECVPKTINFO","IPV6_RECVRTHDR","IPV6_RECVTCLASS","IPV6_ROUTER_ALERT","IPV6_ROUTER_ALERT_ISOLATE","IPV6_RTHDR","IPV6_RTHDRDSTOPTS","IPV6_RTHDR_LOOSE","IPV6_RTHDR_STRICT","IPV6_TCLASS","IPV6_TRANSPARENT","IPV6_UNICAST_HOPS","IPV6_UNICAST_IF","IPV6_V6ONLY","IPV6_XFRM_POLICY","IPVERSION","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BIND_ADDRESS_NO_PORT","IP_BLOCK_SOURCE","IP_CHECKSUM","IP_DEFAULT_MULTICAST_LOOP","IP_DEFAULT_MULTICAST_TTL","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_FREEBIND","IP_HDRINCL","IP_IPSEC_POLICY","IP_MINTTL","IP_MSFILTER","IP_MTU","IP_MTU_DISCOVER","IP_MULTICAST_ALL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_NODEFRAG","IP_OPTIONS","IP_ORIGDSTADDR","IP_PASSSEC","IP_PKTINFO","IP_PKTOPTIONS","IP_PMTUDISC_DO","IP_PMTUDISC_DONT","IP_PMTUDISC_INTERFACE","IP_PMTUDISC_OMIT","IP_PMTUDISC_PROBE","IP_PMTUDISC_WANT","IP_RECVERR","IP_RECVFRAGSIZE","IP_RECVOPTS","IP_RECVORIGDSTADDR","IP_RECVTOS","IP_RECVTTL","IP_RETOPTS","IP_ROUTER_ALERT","IP_TOS","IP_TRANSPARENT","IP_TTL","IP_UNBLOCK_SOURCE","IP_UNICAST_IF","IP_XFRM_POLICY","ISIG","ISOFS_SUPER_MAGIC","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","J1939_EE_INFO_NONE","J1939_EE_INFO_RX_ABORT","J1939_EE_INFO_RX_DPO","J1939_EE_INFO_RX_RTS","J1939_EE_INFO_TX_ABORT","J1939_FILTER_MAX","J1939_IDLE_ADDR","J1939_MAX_UNICAST_ADDR","J1939_NLA_BYTES_ACKED","J1939_NLA_DEST_ADDR","J1939_NLA_DEST_NAME","J1939_NLA_PAD","J1939_NLA_PGN","J1939_NLA_SRC_ADDR","J1939_NLA_SRC_NAME","J1939_NLA_TOTAL_SIZE","J1939_NO_ADDR","J1939_NO_NAME","J1939_NO_PGN","J1939_PGN_ADDRESS_CLAIMED","J1939_PGN_ADDRESS_COMMANDED","J1939_PGN_MAX","J1939_PGN_PDU1_MAX","J1939_PGN_REQUEST","JFFS2_SUPER_MAGIC","KERNEL_VERSION","KEXEC_ARCH_MASK","KEXEC_FILE_NO_INITRAMFS","KEXEC_FILE_ON_CRASH","KEXEC_FILE_UNLOAD","KEXEC_ON_CRASH","KEXEC_PRESERVE_CONTEXT","KEYCTL_ASSUME_AUTHORITY","KEYCTL_CAPABILITIES","KEYCTL_CAPS0_BIG_KEY","KEYCTL_CAPS0_CAPABILITIES","KEYCTL_CAPS0_DIFFIE_HELLMAN","KEYCTL_CAPS0_INVALIDATE","KEYCTL_CAPS0_MOVE","KEYCTL_CAPS0_PERSISTENT_KEYRINGS","KEYCTL_CAPS0_PUBLIC_KEY","KEYCTL_CAPS0_RESTRICT_KEYRING","KEYCTL_CAPS1_NS_KEYRING_NAME","KEYCTL_CAPS1_NS_KEY_TAG","KEYCTL_CHOWN","KEYCTL_CLEAR","KEYCTL_DESCRIBE","KEYCTL_DH_COMPUTE","KEYCTL_GET_KEYRING_ID","KEYCTL_GET_PERSISTENT","KEYCTL_GET_SECURITY","KEYCTL_INSTANTIATE","KEYCTL_INSTANTIATE_IOV","KEYCTL_INVALIDATE","KEYCTL_JOIN_SESSION_KEYRING","KEYCTL_LINK","KEYCTL_MOVE","KEYCTL_NEGATE","KEYCTL_PKEY_DECRYPT","KEYCTL_PKEY_ENCRYPT","KEYCTL_PKEY_QUERY","KEYCTL_PKEY_SIGN","KEYCTL_PKEY_VERIFY","KEYCTL_READ","KEYCTL_REJECT","KEYCTL_RESTRICT_KEYRING","KEYCTL_REVOKE","KEYCTL_SEARCH","KEYCTL_SESSION_TO_PARENT","KEYCTL_SETPERM","KEYCTL_SET_REQKEY_KEYRING","KEYCTL_SET_TIMEOUT","KEYCTL_SUPPORTS_DECRYPT","KEYCTL_SUPPORTS_ENCRYPT","KEYCTL_SUPPORTS_SIGN","KEYCTL_SUPPORTS_VERIFY","KEYCTL_UNLINK","KEYCTL_UPDATE","KEY_CNT","KEY_MAX","KEY_REQKEY_DEFL_DEFAULT","KEY_REQKEY_DEFL_GROUP_KEYRING","KEY_REQKEY_DEFL_NO_CHANGE","KEY_REQKEY_DEFL_PROCESS_KEYRING","KEY_REQKEY_DEFL_REQUESTOR_KEYRING","KEY_REQKEY_DEFL_SESSION_KEYRING","KEY_REQKEY_DEFL_THREAD_KEYRING","KEY_REQKEY_DEFL_USER_KEYRING","KEY_REQKEY_DEFL_USER_SESSION_KEYRING","KEY_SPEC_GROUP_KEYRING","KEY_SPEC_PROCESS_KEYRING","KEY_SPEC_REQKEY_AUTH_KEY","KEY_SPEC_REQUESTOR_KEYRING","KEY_SPEC_SESSION_KEYRING","KEY_SPEC_THREAD_KEYRING","KEY_SPEC_USER_KEYRING","KEY_SPEC_USER_SESSION_KEYRING","LC_ADDRESS","LC_ADDRESS_MASK","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_IDENTIFICATION","LC_IDENTIFICATION_MASK","LC_MEASUREMENT","LC_MEASUREMENT_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NAME","LC_NAME_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_PAPER","LC_PAPER_MASK","LC_TELEPHONE","LC_TELEPHONE_MASK","LC_TIME","LC_TIME_MASK","LED_CNT","LED_MAX","LINUX_REBOOT_CMD_CAD_OFF","LINUX_REBOOT_CMD_CAD_ON","LINUX_REBOOT_CMD_HALT","LINUX_REBOOT_CMD_KEXEC","LINUX_REBOOT_CMD_POWER_OFF","LINUX_REBOOT_CMD_RESTART","LINUX_REBOOT_CMD_RESTART2","LINUX_REBOOT_CMD_SW_SUSPEND","LINUX_REBOOT_MAGIC1","LINUX_REBOOT_MAGIC2","LINUX_REBOOT_MAGIC2A","LINUX_REBOOT_MAGIC2B","LINUX_REBOOT_MAGIC2C","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LM_ID_BASE","LM_ID_NEWLM","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_KERN","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","Lmid_t","MADV_COLD","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_DONTNEED_LOCKED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_KEEPONFORK","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_PAGEOUT","MADV_POPULATE_READ","MADV_POPULATE_WRITE","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MADV_WIPEONFORK","MAP_32BIT","MAP_ANON","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_FIXED_NOREPLACE","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_HUGE_MASK","MAP_HUGE_SHIFT","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_SHARED_VALIDATE","MAP_STACK","MAP_SYNC","MAP_TYPE","MAXTC","MAXTTL","MAX_ADDR_LEN","MAX_IPOPTLEN","MAX_LINKS","MCAST_BLOCK_SOURCE","MCAST_EXCLUDE","MCAST_INCLUDE","MCAST_JOIN_GROUP","MCAST_JOIN_SOURCE_GROUP","MCAST_LEAVE_GROUP","MCAST_LEAVE_SOURCE_GROUP","MCAST_MSFILTER","MCAST_UNBLOCK_SOURCE","MCL_CURRENT","MCL_FUTURE","MEMBARRIER_CMD_GLOBAL","MEMBARRIER_CMD_GLOBAL_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE","MEMBARRIER_CMD_QUERY","MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE","MFD_ALLOW_SEALING","MFD_CLOEXEC","MFD_HUGETLB","MFD_HUGE_16GB","MFD_HUGE_16MB","MFD_HUGE_1GB","MFD_HUGE_1MB","MFD_HUGE_256MB","MFD_HUGE_2GB","MFD_HUGE_2MB","MFD_HUGE_32MB","MFD_HUGE_512KB","MFD_HUGE_512MB","MFD_HUGE_64KB","MFD_HUGE_8MB","MFD_HUGE_MASK","MFD_HUGE_SHIFT","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX3_SUPER_MAGIC","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MINSIGSTKSZ","MLOCK_ONFAULT","MMAP_PAGE_ZERO","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MODULE_INIT_IGNORE_MODVERSIONS","MODULE_INIT_IGNORE_VERMAGIC","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MPOL_BIND","MPOL_DEFAULT","MPOL_F_NUMA_BALANCING","MPOL_F_RELATIVE_NODES","MPOL_F_STATIC_NODES","MPOL_INTERLEAVE","MPOL_LOCAL","MPOL_PREFERRED","MREMAP_DONTUNMAP","MREMAP_FIXED","MREMAP_MAYMOVE","MSC_CNT","MSC_MAX","MSDOS_SUPER_MAGIC","MSG_CMSG_CLOEXEC","MSG_CONFIRM","MSG_COPY","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOR","MSG_ERRQUEUE","MSG_EXCEPT","MSG_FASTOPEN","MSG_FIN","MSG_INFO","MSG_MORE","MSG_NOERROR","MSG_NOSIGNAL","MSG_NOTIFICATION","MSG_OOB","MSG_PEEK","MSG_RST","MSG_STAT","MSG_SYN","MSG_TRUNC","MSG_TRYHARD","MSG_WAITALL","MSG_WAITFORONE","MSG_ZEROCOPY","MS_ACTIVE","MS_ASYNC","MS_BIND","MS_DIRSYNC","MS_INVALIDATE","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNC","MS_SYNCHRONOUS","MS_UNBINDABLE","M_ARENA_MAX","M_ARENA_TEST","M_CHECK_ACTION","M_GRAIN","M_KEEP","M_MMAP_MAX","M_MMAP_THRESHOLD","M_MXFAST","M_NLBLKS","M_PERTURB","M_TOP_PAD","M_TRIM_THRESHOLD","NCCS","NCP_SUPER_MAGIC","NDA_CACHEINFO","NDA_DST","NDA_IFINDEX","NDA_LINK_NETNSID","NDA_LLADDR","NDA_MASTER","NDA_PORT","NDA_PROBES","NDA_SRC_VNI","NDA_UNSPEC","NDA_VLAN","NDA_VNI","NETLINK_ADD_MEMBERSHIP","NETLINK_AUDIT","NETLINK_BROADCAST_ERROR","NETLINK_CAP_ACK","NETLINK_CONNECTOR","NETLINK_CRYPTO","NETLINK_DNRTMSG","NETLINK_DROP_MEMBERSHIP","NETLINK_ECRYPTFS","NETLINK_EXT_ACK","NETLINK_FIB_LOOKUP","NETLINK_FIREWALL","NETLINK_GENERIC","NETLINK_GET_STRICT_CHK","NETLINK_INET_DIAG","NETLINK_IP6_FW","NETLINK_ISCSI","NETLINK_KOBJECT_UEVENT","NETLINK_LISTEN_ALL_NSID","NETLINK_LIST_MEMBERSHIPS","NETLINK_NETFILTER","NETLINK_NFLOG","NETLINK_NO_ENOBUFS","NETLINK_PKTINFO","NETLINK_RDMA","NETLINK_ROUTE","NETLINK_RX_RING","NETLINK_SCSITRANSPORT","NETLINK_SELINUX","NETLINK_SOCK_DIAG","NETLINK_TX_RING","NETLINK_UNUSED","NETLINK_USERSOCK","NETLINK_XFRM","NEW_TIME","NFNETLINK_V0","NFNLGRP_ACCT_QUOTA","NFNLGRP_CONNTRACK_DESTROY","NFNLGRP_CONNTRACK_EXP_DESTROY","NFNLGRP_CONNTRACK_EXP_NEW","NFNLGRP_CONNTRACK_EXP_UPDATE","NFNLGRP_CONNTRACK_NEW","NFNLGRP_CONNTRACK_UPDATE","NFNLGRP_NFTABLES","NFNLGRP_NFTRACE","NFNLGRP_NONE","NFNL_BATCH_GENID","NFNL_BATCH_UNSPEC","NFNL_MSG_BATCH_BEGIN","NFNL_MSG_BATCH_END","NFNL_SUBSYS_ACCT","NFNL_SUBSYS_COUNT","NFNL_SUBSYS_CTHELPER","NFNL_SUBSYS_CTNETLINK","NFNL_SUBSYS_CTNETLINK_EXP","NFNL_SUBSYS_CTNETLINK_TIMEOUT","NFNL_SUBSYS_HOOK","NFNL_SUBSYS_IPSET","NFNL_SUBSYS_NFTABLES","NFNL_SUBSYS_NFT_COMPAT","NFNL_SUBSYS_NONE","NFNL_SUBSYS_OSF","NFNL_SUBSYS_QUEUE","NFNL_SUBSYS_ULOG","NFPROTO_ARP","NFPROTO_BRIDGE","NFPROTO_DECNET","NFPROTO_INET","NFPROTO_IPV4","NFPROTO_IPV6","NFPROTO_NETDEV","NFPROTO_NUMPROTO","NFPROTO_UNSPEC","NFQA_CAP_LEN","NFQA_CFG_CMD","NFQA_CFG_FLAGS","NFQA_CFG_F_CONNTRACK","NFQA_CFG_F_FAIL_OPEN","NFQA_CFG_F_GSO","NFQA_CFG_F_MAX","NFQA_CFG_F_SECCTX","NFQA_CFG_F_UID_GID","NFQA_CFG_MASK","NFQA_CFG_PARAMS","NFQA_CFG_QUEUE_MAXLEN","NFQA_CFG_UNSPEC","NFQA_CT","NFQA_CT_INFO","NFQA_EXP","NFQA_GID","NFQA_HWADDR","NFQA_IFINDEX_INDEV","NFQA_IFINDEX_OUTDEV","NFQA_IFINDEX_PHYSINDEV","NFQA_IFINDEX_PHYSOUTDEV","NFQA_L2HDR","NFQA_MARK","NFQA_PACKET_HDR","NFQA_PAYLOAD","NFQA_PRIORITY","NFQA_SECCTX","NFQA_SKB_CSUMNOTREADY","NFQA_SKB_CSUM_NOTVERIFIED","NFQA_SKB_GSO","NFQA_SKB_INFO","NFQA_TIMESTAMP","NFQA_UID","NFQA_UNSPEC","NFQA_VERDICT_HDR","NFQA_VLAN","NFQA_VLAN_PROTO","NFQA_VLAN_TCI","NFQA_VLAN_UNSPEC","NFQNL_CFG_CMD_BIND","NFQNL_CFG_CMD_NONE","NFQNL_CFG_CMD_PF_BIND","NFQNL_CFG_CMD_PF_UNBIND","NFQNL_CFG_CMD_UNBIND","NFQNL_COPY_META","NFQNL_COPY_NONE","NFQNL_COPY_PACKET","NFQNL_MSG_CONFIG","NFQNL_MSG_PACKET","NFQNL_MSG_VERDICT","NFQNL_MSG_VERDICT_BATCH","NFS_SUPER_MAGIC","NFT_BREAK","NFT_BYTEORDER_HTON","NFT_BYTEORDER_NTOH","NFT_CHAIN_MAXNAMELEN","NFT_CMP_EQ","NFT_CMP_GT","NFT_CMP_GTE","NFT_CMP_LT","NFT_CMP_LTE","NFT_CMP_NEQ","NFT_CONTINUE","NFT_CT_BYTES","NFT_CT_DIRECTION","NFT_CT_DST","NFT_CT_EXPIRATION","NFT_CT_HELPER","NFT_CT_L3PROTOCOL","NFT_CT_LABELS","NFT_CT_MARK","NFT_CT_PKTS","NFT_CT_PROTOCOL","NFT_CT_PROTO_DST","NFT_CT_PROTO_SRC","NFT_CT_SECMARK","NFT_CT_SRC","NFT_CT_STATE","NFT_CT_STATUS","NFT_DATA_RESERVED_MASK","NFT_DATA_VALUE","NFT_DATA_VALUE_MAXLEN","NFT_DATA_VERDICT","NFT_DYNSET_F_INV","NFT_DYNSET_OP_ADD","NFT_DYNSET_OP_UPDATE","NFT_GOTO","NFT_JUMP","NFT_LIMIT_F_INV","NFT_LIMIT_PKTS","NFT_LIMIT_PKT_BYTES","NFT_LOOKUP_F_INV","NFT_META_BRI_IIFNAME","NFT_META_BRI_OIFNAME","NFT_META_CGROUP","NFT_META_CPU","NFT_META_IIF","NFT_META_IIFGROUP","NFT_META_IIFNAME","NFT_META_IIFTYPE","NFT_META_L4PROTO","NFT_META_LEN","NFT_META_MARK","NFT_META_NFPROTO","NFT_META_NFTRACE","NFT_META_OIF","NFT_META_OIFGROUP","NFT_META_OIFNAME","NFT_META_OIFTYPE","NFT_META_PKTTYPE","NFT_META_PRANDOM","NFT_META_PRIORITY","NFT_META_PROTOCOL","NFT_META_RTCLASSID","NFT_META_SECMARK","NFT_META_SKGID","NFT_META_SKUID","NFT_MSG_DELCHAIN","NFT_MSG_DELOBJ","NFT_MSG_DELRULE","NFT_MSG_DELSET","NFT_MSG_DELSETELEM","NFT_MSG_DELTABLE","NFT_MSG_GETCHAIN","NFT_MSG_GETGEN","NFT_MSG_GETOBJ","NFT_MSG_GETOBJ_RESET","NFT_MSG_GETRULE","NFT_MSG_GETSET","NFT_MSG_GETSETELEM","NFT_MSG_GETTABLE","NFT_MSG_MAX","NFT_MSG_NEWCHAIN","NFT_MSG_NEWGEN","NFT_MSG_NEWOBJ","NFT_MSG_NEWRULE","NFT_MSG_NEWSET","NFT_MSG_NEWSETELEM","NFT_MSG_NEWTABLE","NFT_MSG_TRACE","NFT_NAT_DNAT","NFT_NAT_SNAT","NFT_NG_INCREMENTAL","NFT_NG_RANDOM","NFT_OBJ_MAXNAMELEN","NFT_PAYLOAD_CSUM_INET","NFT_PAYLOAD_CSUM_NONE","NFT_PAYLOAD_LL_HEADER","NFT_PAYLOAD_NETWORK_HEADER","NFT_PAYLOAD_TRANSPORT_HEADER","NFT_QUEUE_FLAG_BYPASS","NFT_QUEUE_FLAG_CPU_FANOUT","NFT_QUEUE_FLAG_MASK","NFT_QUOTA_F_INV","NFT_RANGE_EQ","NFT_RANGE_NEQ","NFT_REG32_00","NFT_REG32_01","NFT_REG32_02","NFT_REG32_03","NFT_REG32_04","NFT_REG32_05","NFT_REG32_06","NFT_REG32_07","NFT_REG32_08","NFT_REG32_09","NFT_REG32_10","NFT_REG32_11","NFT_REG32_12","NFT_REG32_13","NFT_REG32_14","NFT_REG32_15","NFT_REG32_SIZE","NFT_REG_1","NFT_REG_2","NFT_REG_3","NFT_REG_4","NFT_REG_SIZE","NFT_REG_VERDICT","NFT_REJECT_ICMPX_ADMIN_PROHIBITED","NFT_REJECT_ICMPX_HOST_UNREACH","NFT_REJECT_ICMPX_NO_ROUTE","NFT_REJECT_ICMPX_PORT_UNREACH","NFT_REJECT_ICMPX_UNREACH","NFT_REJECT_ICMP_UNREACH","NFT_REJECT_TCP_RST","NFT_RETURN","NFT_SET_ANONYMOUS","NFT_SET_CONSTANT","NFT_SET_ELEM_INTERVAL_END","NFT_SET_EVAL","NFT_SET_INTERVAL","NFT_SET_MAP","NFT_SET_MAXNAMELEN","NFT_SET_POL_MEMORY","NFT_SET_POL_PERFORMANCE","NFT_SET_TIMEOUT","NFT_TABLE_MAXNAMELEN","NFT_TRACETYPE_POLICY","NFT_TRACETYPE_RETURN","NFT_TRACETYPE_RULE","NFT_TRACETYPE_UNSPEC","NFT_USERDATA_MAXLEN","NFULA_CFG_CMD","NFULA_CFG_FLAGS","NFULA_CFG_MODE","NFULA_CFG_NLBUFSIZ","NFULA_CFG_QTHRESH","NFULA_CFG_TIMEOUT","NFULA_CFG_UNSPEC","NFULA_CT","NFULA_CT_INFO","NFULA_GID","NFULA_HWADDR","NFULA_HWHEADER","NFULA_HWLEN","NFULA_HWTYPE","NFULA_IFINDEX_INDEV","NFULA_IFINDEX_OUTDEV","NFULA_IFINDEX_PHYSINDEV","NFULA_IFINDEX_PHYSOUTDEV","NFULA_L2HDR","NFULA_MARK","NFULA_PACKET_HDR","NFULA_PAYLOAD","NFULA_PREFIX","NFULA_SEQ","NFULA_SEQ_GLOBAL","NFULA_TIMESTAMP","NFULA_UID","NFULA_UNSPEC","NFULA_VLAN","NFULA_VLAN_PROTO","NFULA_VLAN_TCI","NFULA_VLAN_UNSPEC","NFULNL_CFG_CMD_BIND","NFULNL_CFG_CMD_NONE","NFULNL_CFG_CMD_PF_BIND","NFULNL_CFG_CMD_PF_UNBIND","NFULNL_CFG_CMD_UNBIND","NFULNL_CFG_F_CONNTRACK","NFULNL_CFG_F_SEQ","NFULNL_CFG_F_SEQ_GLOBAL","NFULNL_COPY_META","NFULNL_COPY_NONE","NFULNL_COPY_PACKET","NFULNL_MSG_CONFIG","NFULNL_MSG_PACKET","NF_ACCEPT","NF_DROP","NF_INET_FORWARD","NF_INET_LOCAL_IN","NF_INET_LOCAL_OUT","NF_INET_NUMHOOKS","NF_INET_POST_ROUTING","NF_INET_PRE_ROUTING","NF_IP6_FORWARD","NF_IP6_LOCAL_IN","NF_IP6_LOCAL_OUT","NF_IP6_NUMHOOKS","NF_IP6_POST_ROUTING","NF_IP6_PRE_ROUTING","NF_IP6_PRI_CONNTRACK","NF_IP6_PRI_CONNTRACK_DEFRAG","NF_IP6_PRI_CONNTRACK_HELPER","NF_IP6_PRI_FILTER","NF_IP6_PRI_FIRST","NF_IP6_PRI_LAST","NF_IP6_PRI_MANGLE","NF_IP6_PRI_NAT_DST","NF_IP6_PRI_NAT_SRC","NF_IP6_PRI_RAW","NF_IP6_PRI_SECURITY","NF_IP6_PRI_SELINUX_FIRST","NF_IP6_PRI_SELINUX_LAST","NF_IP_FORWARD","NF_IP_LOCAL_IN","NF_IP_LOCAL_OUT","NF_IP_NUMHOOKS","NF_IP_POST_ROUTING","NF_IP_PRE_ROUTING","NF_IP_PRI_CONNTRACK","NF_IP_PRI_CONNTRACK_CONFIRM","NF_IP_PRI_CONNTRACK_DEFRAG","NF_IP_PRI_CONNTRACK_HELPER","NF_IP_PRI_FILTER","NF_IP_PRI_FIRST","NF_IP_PRI_LAST","NF_IP_PRI_MANGLE","NF_IP_PRI_NAT_DST","NF_IP_PRI_NAT_SRC","NF_IP_PRI_RAW","NF_IP_PRI_SECURITY","NF_IP_PRI_SELINUX_FIRST","NF_IP_PRI_SELINUX_LAST","NF_MAX_VERDICT","NF_NETDEV_INGRESS","NF_NETDEV_NUMHOOKS","NF_QUEUE","NF_REPEAT","NF_STOLEN","NF_STOP","NF_VERDICT_BITS","NF_VERDICT_FLAG_QUEUE_BYPASS","NF_VERDICT_MASK","NF_VERDICT_QBITS","NF_VERDICT_QMASK","NILFS_SUPER_MAGIC","NI_DGRAM","NI_MAXHOST","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSERV","NL0","NL1","NLA_ALIGN","NLA_ALIGNTO","NLA_F_NESTED","NLA_F_NET_BYTEORDER","NLA_TYPE_MASK","NLDLY","NLMSG_DONE","NLMSG_ERROR","NLMSG_MIN_TYPE","NLMSG_NOOP","NLMSG_OVERRUN","NLM_F_ACK","NLM_F_APPEND","NLM_F_ATOMIC","NLM_F_CREATE","NLM_F_DUMP","NLM_F_DUMP_FILTERED","NLM_F_DUMP_INTR","NLM_F_ECHO","NLM_F_EXCL","NLM_F_MATCH","NLM_F_MULTI","NLM_F_REPLACE","NLM_F_REQUEST","NLM_F_ROOT","NOEXPR","NOFLSH","NOSTR","NSFS_MAGIC","NTF_EXT_LEARNED","NTF_MASTER","NTF_OFFLOADED","NTF_PROXY","NTF_ROUTER","NTF_SELF","NTF_USE","NTP_API","NT_ASRS","NT_AUXV","NT_FPREGSET","NT_GWINDOWS","NT_LWPSINFO","NT_LWPSTATUS","NT_PLATFORM","NT_PRCRED","NT_PRFPREG","NT_PRFPXREG","NT_PRPSINFO","NT_PRSTATUS","NT_PRXREG","NT_PSINFO","NT_PSTATUS","NT_TASKSTRUCT","NT_UTSNAME","NUD_DELAY","NUD_FAILED","NUD_INCOMPLETE","NUD_NOARP","NUD_NONE","NUD_PERMANENT","NUD_PROBE","NUD_REACHABLE","NUD_STALE","OCFS2_SUPER_MAGIC","OCRNL","OFDEL","OFILL","OLCUC","OLD_TIME","ONLCR","ONLRET","ONOCR","OPENPROM_SUPER_MAGIC","OPEN_TREE_CLOEXEC","OPEN_TREE_CLONE","OPOST","ORIG_RAX","OVERLAYFS_SUPER_MAGIC","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_FSYNC","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","PACKET_ADD_MEMBERSHIP","PACKET_DROP_MEMBERSHIP","PACKET_MR_ALLMULTI","PACKET_MR_MULTICAST","PACKET_MR_PROMISC","PACKET_MR_UNICAST","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_ALG","PF_APPLETALK","PF_ASH","PF_ATMPVC","PF_ATMSVC","PF_AX25","PF_BLUETOOTH","PF_BRIDGE","PF_CAIF","PF_CAN","PF_DECnet","PF_ECONET","PF_IB","PF_IEEE802154","PF_INET","PF_INET6","PF_IPX","PF_IRDA","PF_ISDN","PF_IUCV","PF_KEY","PF_LLC","PF_LOCAL","PF_MASKOS","PF_MASKPROC","PF_MPLS","PF_NETBEUI","PF_NETLINK","PF_NETROM","PF_NFC","PF_PACKET","PF_PHONET","PF_PPPOX","PF_R","PF_RDS","PF_ROSE","PF_ROUTE","PF_RXRPC","PF_SECURITY","PF_SNA","PF_TIPC","PF_UNIX","PF_UNSPEC","PF_VSOCK","PF_W","PF_WANPIPE","PF_X","PF_X25","PF_XDP","PIDFD_NONBLOCK","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDHUP","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSCHEDPARAM","POSIX_SPAWN_SETSCHEDULER","POSIX_SPAWN_SETSID","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_USEVFORK","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROC_SUPER_MAGIC","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_WRITE","PR_CAPBSET_DROP","PR_CAPBSET_READ","PR_CAP_AMBIENT","PR_CAP_AMBIENT_CLEAR_ALL","PR_CAP_AMBIENT_IS_SET","PR_CAP_AMBIENT_LOWER","PR_CAP_AMBIENT_RAISE","PR_ENDIAN_BIG","PR_ENDIAN_LITTLE","PR_ENDIAN_PPC_LITTLE","PR_FPEMU_NOPRINT","PR_FPEMU_SIGFPE","PR_FP_EXC_ASYNC","PR_FP_EXC_DISABLED","PR_FP_EXC_DIV","PR_FP_EXC_INV","PR_FP_EXC_NONRECOV","PR_FP_EXC_OVF","PR_FP_EXC_PRECISE","PR_FP_EXC_RES","PR_FP_EXC_SW_ENABLE","PR_FP_EXC_UND","PR_FP_MODE_FR","PR_FP_MODE_FRE","PR_GET_CHILD_SUBREAPER","PR_GET_DUMPABLE","PR_GET_ENDIAN","PR_GET_FPEMU","PR_GET_FPEXC","PR_GET_FP_MODE","PR_GET_KEEPCAPS","PR_GET_NAME","PR_GET_NO_NEW_PRIVS","PR_GET_PDEATHSIG","PR_GET_SECCOMP","PR_GET_SECUREBITS","PR_GET_SPECULATION_CTRL","PR_GET_THP_DISABLE","PR_GET_TID_ADDRESS","PR_GET_TIMERSLACK","PR_GET_TIMING","PR_GET_TSC","PR_GET_UNALIGN","PR_MCE_KILL","PR_MCE_KILL_CLEAR","PR_MCE_KILL_DEFAULT","PR_MCE_KILL_EARLY","PR_MCE_KILL_GET","PR_MCE_KILL_LATE","PR_MCE_KILL_SET","PR_MPX_DISABLE_MANAGEMENT","PR_MPX_ENABLE_MANAGEMENT","PR_SCHED_CORE","PR_SCHED_CORE_CREATE","PR_SCHED_CORE_GET","PR_SCHED_CORE_MAX","PR_SCHED_CORE_SCOPE_PROCESS_GROUP","PR_SCHED_CORE_SCOPE_THREAD","PR_SCHED_CORE_SCOPE_THREAD_GROUP","PR_SCHED_CORE_SHARE_FROM","PR_SCHED_CORE_SHARE_TO","PR_SET_CHILD_SUBREAPER","PR_SET_DUMPABLE","PR_SET_ENDIAN","PR_SET_FPEMU","PR_SET_FPEXC","PR_SET_FP_MODE","PR_SET_KEEPCAPS","PR_SET_MM","PR_SET_MM_ARG_END","PR_SET_MM_ARG_START","PR_SET_MM_AUXV","PR_SET_MM_BRK","PR_SET_MM_END_CODE","PR_SET_MM_END_DATA","PR_SET_MM_ENV_END","PR_SET_MM_ENV_START","PR_SET_MM_EXE_FILE","PR_SET_MM_MAP","PR_SET_MM_MAP_SIZE","PR_SET_MM_START_BRK","PR_SET_MM_START_CODE","PR_SET_MM_START_DATA","PR_SET_MM_START_STACK","PR_SET_NAME","PR_SET_NO_NEW_PRIVS","PR_SET_PDEATHSIG","PR_SET_PTRACER","PR_SET_PTRACER_ANY","PR_SET_SECCOMP","PR_SET_SECUREBITS","PR_SET_SPECULATION_CTRL","PR_SET_THP_DISABLE","PR_SET_TIMERSLACK","PR_SET_TIMING","PR_SET_TSC","PR_SET_UNALIGN","PR_SET_VMA","PR_SET_VMA_ANON_NAME","PR_SPEC_DISABLE","PR_SPEC_DISABLE_NOEXEC","PR_SPEC_ENABLE","PR_SPEC_FORCE_DISABLE","PR_SPEC_INDIRECT_BRANCH","PR_SPEC_NOT_AFFECTED","PR_SPEC_PRCTL","PR_SPEC_STORE_BYPASS","PR_TASK_PERF_EVENTS_DISABLE","PR_TASK_PERF_EVENTS_ENABLE","PR_TIMING_STATISTICAL","PR_TIMING_TIMESTAMP","PR_TSC_ENABLE","PR_TSC_SIGSEGV","PR_UNALIGN_NOPRINT","PR_UNALIGN_SIGBUS","PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","PTHREAD_MUTEX_ADAPTIVE_NP","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_MUTEX_ROBUST","PTHREAD_MUTEX_STALLED","PTHREAD_PRIO_INHERIT","PTHREAD_PRIO_NONE","PTHREAD_PRIO_PROTECT","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PTRACE_ATTACH","PTRACE_CONT","PTRACE_DETACH","PTRACE_EVENT_CLONE","PTRACE_EVENT_EXEC","PTRACE_EVENT_EXIT","PTRACE_EVENT_FORK","PTRACE_EVENT_SECCOMP","PTRACE_EVENT_STOP","PTRACE_EVENT_VFORK","PTRACE_EVENT_VFORK_DONE","PTRACE_GETEVENTMSG","PTRACE_GETFPREGS","PTRACE_GETFPXREGS","PTRACE_GETREGS","PTRACE_GETREGSET","PTRACE_GETSIGINFO","PTRACE_GET_RSEQ_CONFIGURATION","PTRACE_GET_SYSCALL_INFO","PTRACE_INTERRUPT","PTRACE_KILL","PTRACE_LISTEN","PTRACE_O_EXITKILL","PTRACE_O_MASK","PTRACE_O_SUSPEND_SECCOMP","PTRACE_O_TRACECLONE","PTRACE_O_TRACEEXEC","PTRACE_O_TRACEEXIT","PTRACE_O_TRACEFORK","PTRACE_O_TRACESECCOMP","PTRACE_O_TRACESYSGOOD","PTRACE_O_TRACEVFORK","PTRACE_O_TRACEVFORKDONE","PTRACE_PEEKDATA","PTRACE_PEEKSIGINFO","PTRACE_PEEKSIGINFO_SHARED","PTRACE_PEEKTEXT","PTRACE_PEEKUSER","PTRACE_POKEDATA","PTRACE_POKETEXT","PTRACE_POKEUSER","PTRACE_SEIZE","PTRACE_SETFPREGS","PTRACE_SETFPXREGS","PTRACE_SETOPTIONS","PTRACE_SETREGS","PTRACE_SETREGSET","PTRACE_SETSIGINFO","PTRACE_SINGLESTEP","PTRACE_SYSCALL","PTRACE_SYSCALL_INFO_ENTRY","PTRACE_SYSCALL_INFO_EXIT","PTRACE_SYSCALL_INFO_NONE","PTRACE_SYSCALL_INFO_SECCOMP","PTRACE_SYSEMU","PTRACE_SYSEMU_SINGLESTEP","PTRACE_TRACEME","PT_DYNAMIC","PT_GNU_EH_FRAME","PT_GNU_RELRO","PT_GNU_STACK","PT_HIOS","PT_HIPROC","PT_HISUNW","PT_INTERP","PT_LOAD","PT_LOOS","PT_LOPROC","PT_LOSUNW","PT_NOTE","PT_NULL","PT_NUM","PT_PHDR","PT_SHLIB","PT_SUNWBSS","PT_SUNWSTACK","PT_TLS","P_ALL","P_PGID","P_PID","P_PIDFD","QCMD","QFMT_VFS_OLD","QFMT_VFS_V0","QFMT_VFS_V1","QIF_ALL","QIF_BLIMITS","QIF_BTIME","QIF_ILIMITS","QIF_INODES","QIF_ITIME","QIF_LIMITS","QIF_SPACE","QIF_TIMES","QIF_USAGE","QNX4_SUPER_MAGIC","QNX6_SUPER_MAGIC","Q_GETFMT","Q_GETINFO","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETINFO","Q_SETQUOTA","Q_SYNC","R10","R11","R12","R13","R14","R15","R8","R9","RADIXCHAR","RAND_MAX","RAX","RBP","RBX","RB_AUTOBOOT","RB_DISABLE_CAD","RB_ENABLE_CAD","RB_HALT_SYSTEM","RB_KEXEC","RB_POWER_OFF","RB_SW_SUSPEND","RCX","RDI","RDTGROUP_SUPER_MAGIC","RDX","READ_IMPLIES_EXEC","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_CR2","REG_CSGSFS","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EEND","REG_EESCAPE","REG_EFL","REG_ENOSYS","REG_EPAREN","REG_ERANGE","REG_ERPAREN","REG_ERR","REG_ESIZE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_NEWLINE","REG_NOMATCH","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_OLDMASK","REG_R10","REG_R11","REG_R12","REG_R13","REG_R14","REG_R15","REG_R8","REG_R9","REG_RAX","REG_RBP","REG_RBX","REG_RCX","REG_RDI","REG_RDX","REG_RIP","REG_RSI","REG_RSP","REG_STARTEND","REG_TRAPNO","REISERFS_SUPER_MAGIC","REL_CNT","REL_MAX","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","REP_CNT","REP_MAX","RESOLVE_BENEATH","RESOLVE_CACHED","RESOLVE_IN_ROOT","RESOLVE_NO_MAGICLINKS","RESOLVE_NO_SYMLINKS","RESOLVE_NO_XDEV","RIP","RLIM64_INFINITY","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NLIMITS","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RLIM_SAVED_CUR","RLIM_SAVED_MAX","RSI","RSP","RTA_CACHEINFO","RTA_DST","RTA_ENCAP","RTA_ENCAP_TYPE","RTA_EXPIRES","RTA_FLOW","RTA_GATEWAY","RTA_IIF","RTA_MARK","RTA_METRICS","RTA_MFC_STATS","RTA_MP_ALGO","RTA_MULTIPATH","RTA_NEWDST","RTA_OIF","RTA_PAD","RTA_PREF","RTA_PREFSRC","RTA_PRIORITY","RTA_PROTOINFO","RTA_SESSION","RTA_SRC","RTA_TABLE","RTA_TTL_PROPAGATE","RTA_UID","RTA_UNSPEC","RTA_VIA","RTCF_DIRECTSRC","RTCF_DOREDIRECT","RTCF_LOG","RTCF_MASQ","RTCF_NAT","RTCF_VALVE","RTEXT_FILTER_BRVLAN","RTEXT_FILTER_BRVLAN_COMPRESSED","RTEXT_FILTER_CFM_CONFIG","RTEXT_FILTER_CFM_STATUS","RTEXT_FILTER_MRP","RTEXT_FILTER_SKIP_STATS","RTEXT_FILTER_VF","RTF_ADDRCLASSMASK","RTF_ADDRCONF","RTF_ALLONLINK","RTF_BROADCAST","RTF_CACHE","RTF_DEFAULT","RTF_DYNAMIC","RTF_FLOW","RTF_GATEWAY","RTF_HOST","RTF_INTERFACE","RTF_IRTT","RTF_LINKRT","RTF_LOCAL","RTF_MODIFIED","RTF_MSS","RTF_MTU","RTF_MULTICAST","RTF_NAT","RTF_NOFORWARD","RTF_NONEXTHOP","RTF_NOPMTUDISC","RTF_POLICY","RTF_REINSTATE","RTF_REJECT","RTF_STATIC","RTF_THROW","RTF_UP","RTF_WINDOW","RTF_XRESOLVE","RTLD_DEEPBIND","RTLD_DEFAULT","RTLD_DI_CONFIGADDR","RTLD_DI_LINKMAP","RTLD_DI_LMID","RTLD_DI_ORIGIN","RTLD_DI_PROFILENAME","RTLD_DI_PROFILEOUT","RTLD_DI_SERINFO","RTLD_DI_SERINFOSIZE","RTLD_DI_TLS_DATA","RTLD_DI_TLS_MODID","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTMGRP_DECnet_IFADDR","RTMGRP_DECnet_ROUTE","RTMGRP_IPV4_IFADDR","RTMGRP_IPV4_MROUTE","RTMGRP_IPV4_ROUTE","RTMGRP_IPV4_RULE","RTMGRP_IPV6_IFADDR","RTMGRP_IPV6_IFINFO","RTMGRP_IPV6_MROUTE","RTMGRP_IPV6_PREFIX","RTMGRP_IPV6_ROUTE","RTMGRP_LINK","RTMGRP_NEIGH","RTMGRP_NOTIFY","RTMGRP_TC","RTMSG_AR_FAILED","RTMSG_CONTROL","RTMSG_DELDEVICE","RTMSG_DELROUTE","RTMSG_DELRULE","RTMSG_NEWDEVICE","RTMSG_NEWROUTE","RTMSG_NEWRULE","RTMSG_OVERRUN","RTM_DELACTION","RTM_DELADDR","RTM_DELADDRLABEL","RTM_DELLINK","RTM_DELMDB","RTM_DELNEIGH","RTM_DELNETCONF","RTM_DELNSID","RTM_DELQDISC","RTM_DELROUTE","RTM_DELRULE","RTM_DELTCLASS","RTM_DELTFILTER","RTM_F_CLONED","RTM_F_EQUALIZE","RTM_F_FIB_MATCH","RTM_F_LOOKUP_TABLE","RTM_F_NOTIFY","RTM_F_PREFIX","RTM_GETACTION","RTM_GETADDR","RTM_GETADDRLABEL","RTM_GETANYCAST","RTM_GETDCB","RTM_GETLINK","RTM_GETMDB","RTM_GETMULTICAST","RTM_GETNEIGH","RTM_GETNEIGHTBL","RTM_GETNETCONF","RTM_GETNSID","RTM_GETQDISC","RTM_GETROUTE","RTM_GETRULE","RTM_GETSTATS","RTM_GETTCLASS","RTM_GETTFILTER","RTM_NEWACTION","RTM_NEWADDR","RTM_NEWADDRLABEL","RTM_NEWCACHEREPORT","RTM_NEWLINK","RTM_NEWMDB","RTM_NEWNDUSEROPT","RTM_NEWNEIGH","RTM_NEWNEIGHTBL","RTM_NEWNETCONF","RTM_NEWNSID","RTM_NEWPREFIX","RTM_NEWQDISC","RTM_NEWROUTE","RTM_NEWRULE","RTM_NEWSTATS","RTM_NEWTCLASS","RTM_NEWTFILTER","RTM_SETDCB","RTM_SETLINK","RTM_SETNEIGHTBL","RTNLGRP_BRVLAN","RTNLGRP_DCB","RTNLGRP_DECnet_IFADDR","RTNLGRP_DECnet_ROUTE","RTNLGRP_DECnet_RULE","RTNLGRP_IPV4_IFADDR","RTNLGRP_IPV4_MROUTE","RTNLGRP_IPV4_MROUTE_R","RTNLGRP_IPV4_NETCONF","RTNLGRP_IPV4_ROUTE","RTNLGRP_IPV4_RULE","RTNLGRP_IPV6_IFADDR","RTNLGRP_IPV6_IFINFO","RTNLGRP_IPV6_MROUTE","RTNLGRP_IPV6_MROUTE_R","RTNLGRP_IPV6_NETCONF","RTNLGRP_IPV6_PREFIX","RTNLGRP_IPV6_ROUTE","RTNLGRP_IPV6_RULE","RTNLGRP_LINK","RTNLGRP_MCTP_IFADDR","RTNLGRP_MDB","RTNLGRP_MPLS_NETCONF","RTNLGRP_MPLS_ROUTE","RTNLGRP_ND_USEROPT","RTNLGRP_NEIGH","RTNLGRP_NEXTHOP","RTNLGRP_NONE","RTNLGRP_NOP2","RTNLGRP_NOP4","RTNLGRP_NOTIFY","RTNLGRP_NSID","RTNLGRP_PHONET_IFADDR","RTNLGRP_PHONET_ROUTE","RTNLGRP_STATS","RTNLGRP_TC","RTNLGRP_TUNNEL","RTN_ANYCAST","RTN_BLACKHOLE","RTN_BROADCAST","RTN_LOCAL","RTN_MULTICAST","RTN_NAT","RTN_PROHIBIT","RTN_THROW","RTN_UNICAST","RTN_UNREACHABLE","RTN_UNSPEC","RTN_XRESOLVE","RTPROT_BOOT","RTPROT_KERNEL","RTPROT_REDIRECT","RTPROT_STATIC","RTPROT_UNSPEC","RT_ADDRCLASS","RT_CLASS_DEFAULT","RT_CLASS_LOCAL","RT_CLASS_MAIN","RT_CLASS_MAX","RT_CLASS_UNSPEC","RT_LOCALADDR","RT_SCOPE_HOST","RT_SCOPE_LINK","RT_SCOPE_NOWHERE","RT_SCOPE_SITE","RT_SCOPE_UNIVERSE","RT_TABLE_COMPAT","RT_TABLE_DEFAULT","RT_TABLE_LOCAL","RT_TABLE_MAIN","RT_TABLE_UNSPEC","RT_TOS","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","RUSAGE_THREAD","RWF_APPEND","RWF_DSYNC","RWF_HIPRI","RWF_NOWAIT","RWF_SYNC","R_OK","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCHED_BATCH","SCHED_FIFO","SCHED_IDLE","SCHED_OTHER","SCHED_RESET_ON_FORK","SCHED_RR","SCM_CREDENTIALS","SCM_J1939_DEST_ADDR","SCM_J1939_DEST_NAME","SCM_J1939_ERRQUEUE","SCM_J1939_PRIO","SCM_RIGHTS","SCM_TIMESTAMP","SCM_TIMESTAMPING","SCM_TIMESTAMPING_OPT_STATS","SCM_TIMESTAMPING_PKTINFO","SCM_TIMESTAMPNS","SCM_TXTIME","SCM_WIFI_STATUS","SCTP_ABORT","SCTP_ADAPTATION_LAYER","SCTP_ADDR_OVER","SCTP_ALL_ASSOC","SCTP_ASSOCINFO","SCTP_AUTHINFO","SCTP_AUTH_ACTIVE_KEY","SCTP_AUTH_CHUNK","SCTP_AUTH_DEACTIVATE_KEY","SCTP_AUTH_DELETE_KEY","SCTP_AUTH_KEY","SCTP_AUTOCLOSE","SCTP_AUTO_ASCONF","SCTP_CONTEXT","SCTP_CURRENT_ASSOC","SCTP_DEFAULT_SEND_PARAM","SCTP_DEFAULT_SNDINFO","SCTP_DELAYED_ACK","SCTP_DELAYED_ACK_TIME","SCTP_DELAYED_SACK","SCTP_DISABLE_FRAGMENTS","SCTP_DSTADDRV4","SCTP_DSTADDRV6","SCTP_ENABLE_CHANGE_ASSOC_REQ","SCTP_ENABLE_RESET_ASSOC_REQ","SCTP_ENABLE_RESET_STREAM_REQ","SCTP_ENABLE_STRRESET_MASK","SCTP_EOF","SCTP_EVENTS","SCTP_FRAGMENT_INTERLEAVE","SCTP_FUTURE_ASSOC","SCTP_GET_ASSOC_ID_LIST","SCTP_GET_ASSOC_NUMBER","SCTP_GET_PEER_ADDR_INFO","SCTP_HMAC_IDENT","SCTP_INIT","SCTP_INITMSG","SCTP_I_WANT_MAPPED_V4_ADDR","SCTP_LOCAL_AUTH_CHUNKS","SCTP_MAXSEG","SCTP_MAX_BURST","SCTP_NODELAY","SCTP_NOTIFICATION","SCTP_NXTINFO","SCTP_PARTIAL_DELIVERY_POINT","SCTP_PEER_ADDR_PARAMS","SCTP_PEER_ADDR_THLDS","SCTP_PEER_ADDR_THLDS_V2","SCTP_PEER_AUTH_CHUNKS","SCTP_PRIMARY_ADDR","SCTP_PRINFO","SCTP_PR_INDEX","SCTP_PR_POLICY","SCTP_PR_PRIO_ENABLED","SCTP_PR_RTX_ENABLED","SCTP_PR_SCTP_ALL","SCTP_PR_SCTP_MASK","SCTP_PR_SCTP_MAX","SCTP_PR_SCTP_NONE","SCTP_PR_SCTP_PRIO","SCTP_PR_SCTP_RTX","SCTP_PR_SCTP_TTL","SCTP_PR_SET_POLICY","SCTP_PR_TTL_ENABLED","SCTP_RCVINFO","SCTP_RECVNXTINFO","SCTP_RECVRCVINFO","SCTP_REUSE_PORT","SCTP_RTOINFO","SCTP_SACK_IMMEDIATELY","SCTP_SENDALL","SCTP_SET_PEER_PRIMARY_ADDR","SCTP_SNDINFO","SCTP_SNDRCV","SCTP_STATUS","SCTP_STREAM_RESET_INCOMING","SCTP_STREAM_RESET_OUTGOING","SCTP_UNORDERED","SECCOMP_FILTER_FLAG_LOG","SECCOMP_FILTER_FLAG_SPEC_ALLOW","SECCOMP_FILTER_FLAG_TSYNC","SECCOMP_GET_ACTION_AVAIL","SECCOMP_GET_NOTIF_SIZES","SECCOMP_MODE_DISABLED","SECCOMP_MODE_FILTER","SECCOMP_MODE_STRICT","SECCOMP_RET_ACTION","SECCOMP_RET_ACTION_FULL","SECCOMP_RET_ALLOW","SECCOMP_RET_DATA","SECCOMP_RET_ERRNO","SECCOMP_RET_KILL","SECCOMP_RET_KILL_PROCESS","SECCOMP_RET_KILL_THREAD","SECCOMP_RET_LOG","SECCOMP_RET_TRACE","SECCOMP_RET_TRAP","SECCOMP_SET_MODE_FILTER","SECCOMP_SET_MODE_STRICT","SECURITYFS_MAGIC","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SELFMAG","SELINUX_MAGIC","SEM_FAILED","SFD_CLOEXEC","SFD_NONBLOCK","SHM_EXEC","SHM_HUGETLB","SHM_LOCK","SHM_NORESERVE","SHM_R","SHM_RDONLY","SHM_REMAP","SHM_RND","SHM_UNLOCK","SHM_W","SHORT_INODE","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGEV_THREAD_ID","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGRTMAX","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCADDMULTI","SIOCADDRT","SIOCDARP","SIOCDELMULTI","SIOCDELRT","SIOCDIFADDR","SIOCDRARP","SIOCETHTOOL","SIOCGARP","SIOCGHWTSTAMP","SIOCGIFADDR","SIOCGIFBR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFCOUNT","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFINDEX","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFPFLAGS","SIOCGIFSLAVE","SIOCGIFTXQLEN","SIOCGMIIPHY","SIOCGMIIREG","SIOCGRARP","SIOCGSKNS","SIOCOUTQNSD","SIOCSARP","SIOCSHWTSTAMP","SIOCSIFADDR","SIOCSIFBR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFHWBROADCAST","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNETMASK","SIOCSIFPFLAGS","SIOCSIFSLAVE","SIOCSIFTXQLEN","SIOCSMIIREG","SIOCSRARP","SIOCWANDEV","SIOGIFINDEX","SI_LOAD_SHIFT","SKF_AD_ALU_XOR_X","SKF_AD_CPU","SKF_AD_HATYPE","SKF_AD_IFINDEX","SKF_AD_MARK","SKF_AD_MAX","SKF_AD_NLATTR","SKF_AD_NLATTR_NEST","SKF_AD_OFF","SKF_AD_PAY_OFFSET","SKF_AD_PKTTYPE","SKF_AD_PROTOCOL","SKF_AD_QUEUE","SKF_AD_RANDOM","SKF_AD_RXHASH","SKF_AD_VLAN_TAG","SKF_AD_VLAN_TAG_PRESENT","SKF_AD_VLAN_TPID","SKF_LL_OFF","SKF_NET_OFF","SK_MEMINFO_BACKLOG","SK_MEMINFO_DROPS","SK_MEMINFO_FWD_ALLOC","SK_MEMINFO_OPTMEM","SK_MEMINFO_RCVBUF","SK_MEMINFO_RMEM_ALLOC","SK_MEMINFO_SNDBUF","SK_MEMINFO_WMEM_ALLOC","SK_MEMINFO_WMEM_QUEUED","SMACK_MAGIC","SMB_SUPER_MAGIC","SND_CNT","SND_MAX","SOCK_CLOEXEC","SOCK_DCCP","SOCK_DGRAM","SOCK_NONBLOCK","SOCK_PACKET","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOF_TIMESTAMPING_OPT_CMSG","SOF_TIMESTAMPING_OPT_ID","SOF_TIMESTAMPING_OPT_PKTINFO","SOF_TIMESTAMPING_OPT_STATS","SOF_TIMESTAMPING_OPT_TSONLY","SOF_TIMESTAMPING_OPT_TX_SWHW","SOF_TIMESTAMPING_RAW_HARDWARE","SOF_TIMESTAMPING_RX_HARDWARE","SOF_TIMESTAMPING_RX_SOFTWARE","SOF_TIMESTAMPING_SOFTWARE","SOF_TIMESTAMPING_SYS_HARDWARE","SOF_TIMESTAMPING_TX_ACK","SOF_TIMESTAMPING_TX_HARDWARE","SOF_TIMESTAMPING_TX_SCHED","SOF_TIMESTAMPING_TX_SOFTWARE","SOF_TXTIME_DEADLINE_MODE","SOF_TXTIME_REPORT_ERRORS","SOL_AAL","SOL_ALG","SOL_ATM","SOL_BLUETOOTH","SOL_CAIF","SOL_CAN_BASE","SOL_CAN_J1939","SOL_CAN_RAW","SOL_DCCP","SOL_DECNET","SOL_ICMPV6","SOL_IP","SOL_IPV6","SOL_IRDA","SOL_IUCV","SOL_LLC","SOL_NETBEUI","SOL_NETLINK","SOL_NFC","SOL_PACKET","SOL_PNPIPE","SOL_PPPOL2TP","SOL_RAW","SOL_RDS","SOL_RXRPC","SOL_SOCKET","SOL_TCP","SOL_TIPC","SOL_UDP","SOL_X25","SOL_XDP","SOMAXCONN","SO_ACCEPTCONN","SO_ATTACH_BPF","SO_ATTACH_FILTER","SO_ATTACH_REUSEPORT_CBPF","SO_ATTACH_REUSEPORT_EBPF","SO_BINDTODEVICE","SO_BINDTOIFINDEX","SO_BPF_EXTENSIONS","SO_BROADCAST","SO_BSDCOMPAT","SO_BUSY_POLL","SO_CNX_ADVICE","SO_COOKIE","SO_DEBUG","SO_DETACH_BPF","SO_DETACH_FILTER","SO_DETACH_REUSEPORT_BPF","SO_DOMAIN","SO_DONTROUTE","SO_EE_OFFENDER","SO_EE_ORIGIN_ICMP","SO_EE_ORIGIN_ICMP6","SO_EE_ORIGIN_LOCAL","SO_EE_ORIGIN_NONE","SO_EE_ORIGIN_TIMESTAMPING","SO_EE_ORIGIN_TXSTATUS","SO_ERROR","SO_GET_FILTER","SO_INCOMING_CPU","SO_INCOMING_NAPI_ID","SO_J1939_ERRQUEUE","SO_J1939_FILTER","SO_J1939_PROMISC","SO_J1939_SEND_PRIO","SO_KEEPALIVE","SO_LINGER","SO_LOCK_FILTER","SO_MARK","SO_MAX_PACING_RATE","SO_MEMINFO","SO_NOFCS","SO_NO_CHECK","SO_OOBINLINE","SO_ORIGINAL_DST","SO_PASSCRED","SO_PASSSEC","SO_PEEK_OFF","SO_PEERCRED","SO_PEERGROUPS","SO_PEERNAME","SO_PEERSEC","SO_PRIORITY","SO_PROTOCOL","SO_RCVBUF","SO_RCVBUFFORCE","SO_RCVLOWAT","SO_RCVTIMEO","SO_RCVTIMEO_NEW","SO_REUSEADDR","SO_REUSEPORT","SO_RXQ_OVFL","SO_SECURITY_AUTHENTICATION","SO_SECURITY_ENCRYPTION_NETWORK","SO_SECURITY_ENCRYPTION_TRANSPORT","SO_SELECT_ERR_QUEUE","SO_SNDBUF","SO_SNDBUFFORCE","SO_SNDLOWAT","SO_SNDTIMEO","SO_SNDTIMEO_NEW","SO_TIMESTAMP","SO_TIMESTAMPING","SO_TIMESTAMPING_NEW","SO_TIMESTAMPNS","SO_TIMESTAMPNS_NEW","SO_TIMESTAMP_NEW","SO_TXTIME","SO_TYPE","SO_WIFI_STATUS","SO_ZEROCOPY","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SS","SS_DISABLE","SS_ONSTACK","STATX_ALL","STATX_ATIME","STATX_ATTR_APPEND","STATX_ATTR_AUTOMOUNT","STATX_ATTR_COMPRESSED","STATX_ATTR_DAX","STATX_ATTR_ENCRYPTED","STATX_ATTR_IMMUTABLE","STATX_ATTR_MOUNT_ROOT","STATX_ATTR_NODUMP","STATX_ATTR_VERITY","STATX_BASIC_STATS","STATX_BLOCKS","STATX_BTIME","STATX_CTIME","STATX_DIOALIGN","STATX_GID","STATX_INO","STATX_MNT_ID","STATX_MODE","STATX_MTIME","STATX_NLINK","STATX_SIZE","STATX_TYPE","STATX_UID","STATX__RESERVED","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","STICKY_TIMEOUTS","ST_APPEND","ST_IMMUTABLE","ST_MANDLOCK","ST_NOATIME","ST_NODEV","ST_NODIRATIME","ST_NOEXEC","ST_NOSUID","ST_RDONLY","ST_RELATIME","ST_SYNCHRONOUS","ST_WRITE","SW_CNT","SW_MAX","SYNC_FILE_RANGE_WAIT_AFTER","SYNC_FILE_RANGE_WAIT_BEFORE","SYNC_FILE_RANGE_WRITE","SYN_CNT","SYN_MAX","SYSFS_MAGIC","SYS__sysctl","SYS_accept","SYS_accept4","SYS_access","SYS_acct","SYS_add_key","SYS_adjtimex","SYS_afs_syscall","SYS_alarm","SYS_arch_prctl","SYS_bind","SYS_bpf","SYS_brk","SYS_capget","SYS_capset","SYS_chdir","SYS_chmod","SYS_chown","SYS_chroot","SYS_clock_adjtime","SYS_clock_getres","SYS_clock_gettime","SYS_clock_nanosleep","SYS_clock_settime","SYS_clone","SYS_clone3","SYS_close","SYS_close_range","SYS_connect","SYS_copy_file_range","SYS_creat","SYS_create_module","SYS_delete_module","SYS_dup","SYS_dup2","SYS_dup3","SYS_epoll_create","SYS_epoll_create1","SYS_epoll_ctl","SYS_epoll_ctl_old","SYS_epoll_pwait","SYS_epoll_pwait2","SYS_epoll_wait","SYS_epoll_wait_old","SYS_eventfd","SYS_eventfd2","SYS_execve","SYS_execveat","SYS_exit","SYS_exit_group","SYS_faccessat","SYS_faccessat2","SYS_fadvise64","SYS_fallocate","SYS_fanotify_init","SYS_fanotify_mark","SYS_fchdir","SYS_fchmod","SYS_fchmodat","SYS_fchown","SYS_fchownat","SYS_fcntl","SYS_fdatasync","SYS_fgetxattr","SYS_finit_module","SYS_flistxattr","SYS_flock","SYS_fork","SYS_fremovexattr","SYS_fsconfig","SYS_fsetxattr","SYS_fsmount","SYS_fsopen","SYS_fspick","SYS_fstat","SYS_fstatfs","SYS_fsync","SYS_ftruncate","SYS_futex","SYS_futex_waitv","SYS_futimesat","SYS_get_kernel_syms","SYS_get_mempolicy","SYS_get_robust_list","SYS_get_thread_area","SYS_getcpu","SYS_getcwd","SYS_getdents","SYS_getdents64","SYS_getegid","SYS_geteuid","SYS_getgid","SYS_getgroups","SYS_getitimer","SYS_getpeername","SYS_getpgid","SYS_getpgrp","SYS_getpid","SYS_getpmsg","SYS_getppid","SYS_getpriority","SYS_getrandom","SYS_getresgid","SYS_getresuid","SYS_getrlimit","SYS_getrusage","SYS_getsid","SYS_getsockname","SYS_getsockopt","SYS_gettid","SYS_gettimeofday","SYS_getuid","SYS_getxattr","SYS_init_module","SYS_inotify_add_watch","SYS_inotify_init","SYS_inotify_init1","SYS_inotify_rm_watch","SYS_io_cancel","SYS_io_destroy","SYS_io_getevents","SYS_io_setup","SYS_io_submit","SYS_io_uring_enter","SYS_io_uring_register","SYS_io_uring_setup","SYS_ioctl","SYS_ioperm","SYS_iopl","SYS_ioprio_get","SYS_ioprio_set","SYS_kcmp","SYS_kexec_file_load","SYS_kexec_load","SYS_keyctl","SYS_kill","SYS_landlock_add_rule","SYS_landlock_create_ruleset","SYS_landlock_restrict_self","SYS_lchown","SYS_lgetxattr","SYS_link","SYS_linkat","SYS_listen","SYS_listxattr","SYS_llistxattr","SYS_lookup_dcookie","SYS_lremovexattr","SYS_lseek","SYS_lsetxattr","SYS_lstat","SYS_madvise","SYS_mbind","SYS_membarrier","SYS_memfd_create","SYS_memfd_secret","SYS_migrate_pages","SYS_mincore","SYS_mkdir","SYS_mkdirat","SYS_mknod","SYS_mknodat","SYS_mlock","SYS_mlock2","SYS_mlockall","SYS_mmap","SYS_modify_ldt","SYS_mount","SYS_mount_setattr","SYS_move_mount","SYS_move_pages","SYS_mprotect","SYS_mq_getsetattr","SYS_mq_notify","SYS_mq_open","SYS_mq_timedreceive","SYS_mq_timedsend","SYS_mq_unlink","SYS_mremap","SYS_msgctl","SYS_msgget","SYS_msgrcv","SYS_msgsnd","SYS_msync","SYS_munlock","SYS_munlockall","SYS_munmap","SYS_name_to_handle_at","SYS_nanosleep","SYS_newfstatat","SYS_nfsservctl","SYS_open","SYS_open_by_handle_at","SYS_open_tree","SYS_openat","SYS_openat2","SYS_pause","SYS_perf_event_open","SYS_personality","SYS_pidfd_getfd","SYS_pidfd_open","SYS_pidfd_send_signal","SYS_pipe","SYS_pipe2","SYS_pivot_root","SYS_pkey_alloc","SYS_pkey_free","SYS_pkey_mprotect","SYS_poll","SYS_ppoll","SYS_prctl","SYS_pread64","SYS_preadv","SYS_preadv2","SYS_prlimit64","SYS_process_madvise","SYS_process_mrelease","SYS_process_vm_readv","SYS_process_vm_writev","SYS_pselect6","SYS_ptrace","SYS_putpmsg","SYS_pwrite64","SYS_pwritev","SYS_pwritev2","SYS_query_module","SYS_quotactl","SYS_quotactl_fd","SYS_read","SYS_readahead","SYS_readlink","SYS_readlinkat","SYS_readv","SYS_reboot","SYS_recvfrom","SYS_recvmmsg","SYS_recvmsg","SYS_remap_file_pages","SYS_removexattr","SYS_rename","SYS_renameat","SYS_renameat2","SYS_request_key","SYS_restart_syscall","SYS_rmdir","SYS_rseq","SYS_rt_sigaction","SYS_rt_sigpending","SYS_rt_sigprocmask","SYS_rt_sigqueueinfo","SYS_rt_sigreturn","SYS_rt_sigsuspend","SYS_rt_sigtimedwait","SYS_rt_tgsigqueueinfo","SYS_sched_get_priority_max","SYS_sched_get_priority_min","SYS_sched_getaffinity","SYS_sched_getattr","SYS_sched_getparam","SYS_sched_getscheduler","SYS_sched_rr_get_interval","SYS_sched_setaffinity","SYS_sched_setattr","SYS_sched_setparam","SYS_sched_setscheduler","SYS_sched_yield","SYS_seccomp","SYS_security","SYS_select","SYS_semctl","SYS_semget","SYS_semop","SYS_semtimedop","SYS_sendfile","SYS_sendmmsg","SYS_sendmsg","SYS_sendto","SYS_set_mempolicy","SYS_set_mempolicy_home_node","SYS_set_robust_list","SYS_set_thread_area","SYS_set_tid_address","SYS_setdomainname","SYS_setfsgid","SYS_setfsuid","SYS_setgid","SYS_setgroups","SYS_sethostname","SYS_setitimer","SYS_setns","SYS_setpgid","SYS_setpriority","SYS_setregid","SYS_setresgid","SYS_setresuid","SYS_setreuid","SYS_setrlimit","SYS_setsid","SYS_setsockopt","SYS_settimeofday","SYS_setuid","SYS_setxattr","SYS_shmat","SYS_shmctl","SYS_shmdt","SYS_shmget","SYS_shutdown","SYS_sigaltstack","SYS_signalfd","SYS_signalfd4","SYS_socket","SYS_socketpair","SYS_splice","SYS_stat","SYS_statfs","SYS_statx","SYS_swapoff","SYS_swapon","SYS_symlink","SYS_symlinkat","SYS_sync","SYS_sync_file_range","SYS_syncfs","SYS_sysfs","SYS_sysinfo","SYS_syslog","SYS_tee","SYS_tgkill","SYS_time","SYS_timer_create","SYS_timer_delete","SYS_timer_getoverrun","SYS_timer_gettime","SYS_timer_settime","SYS_timerfd_create","SYS_timerfd_gettime","SYS_timerfd_settime","SYS_times","SYS_tkill","SYS_truncate","SYS_tuxcall","SYS_umask","SYS_umount2","SYS_uname","SYS_unlink","SYS_unlinkat","SYS_unshare","SYS_uselib","SYS_userfaultfd","SYS_ustat","SYS_utime","SYS_utimensat","SYS_utimes","SYS_vfork","SYS_vhangup","SYS_vmsplice","SYS_vserver","SYS_wait4","SYS_waitid","SYS_write","SYS_writev","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCA_CHAIN","TCA_DUMP_INVISIBLE","TCA_FCNT","TCA_HW_OFFLOAD","TCA_KIND","TCA_OPTIONS","TCA_PAD","TCA_RATE","TCA_STAB","TCA_STATS","TCA_STATS2","TCA_UNSPEC","TCA_XSTATS","TCFLSH","TCGETA","TCGETS","TCGETS2","TCGETX","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_CC_INFO","TCP_CM_INQ","TCP_CONGESTION","TCP_COOKIE_TRANSACTIONS","TCP_CORK","TCP_DEFER_ACCEPT","TCP_FASTOPEN","TCP_FASTOPEN_CONNECT","TCP_FASTOPEN_KEY","TCP_FASTOPEN_NO_COOKIE","TCP_INFO","TCP_INQ","TCP_KEEPCNT","TCP_KEEPIDLE","TCP_KEEPINTVL","TCP_LINGER2","TCP_MAXSEG","TCP_MD5SIG","TCP_MD5SIG_EXT","TCP_MD5SIG_MAXKEYLEN","TCP_NODELAY","TCP_NOTSENT_LOWAT","TCP_QUEUE_SEQ","TCP_QUICKACK","TCP_REPAIR","TCP_REPAIR_OPTIONS","TCP_REPAIR_QUEUE","TCP_REPAIR_WINDOW","TCP_SAVED_SYN","TCP_SAVE_SYN","TCP_SYNCNT","TCP_THIN_DUPACK","TCP_THIN_LINEAR_TIMEOUTS","TCP_TIMESTAMP","TCP_ULP","TCP_USER_TIMEOUT","TCP_WINDOW_CLAMP","TCP_ZEROCOPY_RECEIVE","TCSADRAIN","TCSAFLUSH","TCSANOW","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETS2","TCSETSF","TCSETSF2","TCSETSW","TCSETSW2","TCSETX","TCSETXF","TCSETXW","TCXONC","TFD_CLOEXEC","TFD_NONBLOCK","TFD_TIMER_ABSTIME","TFD_TIMER_CANCEL_ON_SET","THOUSEP","TIMER_ABSTIME","TIME_BAD","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCONS","TIOCEXCL","TIOCGDEV","TIOCGETD","TIOCGEXCL","TIOCGICOUNT","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGPKT","TIOCGPTLCK","TIOCGPTN","TIOCGPTPEER","TIOCGRS485","TIOCGSERIAL","TIOCGSID","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMIWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSBRK","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSIG","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSPTLCK","TIOCSRS485","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","TIOCVHANGUP","TMPFS_MAGIC","TMP_MAX","TOSTOP","TRACEFS_MAGIC","TUN_READQ_SIZE","TUN_TAP_DEV","TUN_TUN_DEV","TUN_TYPE_MASK","T_FMT","T_FMT_AMPM","UDF_SUPER_MAGIC","UDP_CORK","UDP_ENCAP","UDP_GRO","UDP_NO_CHECK6_RX","UDP_NO_CHECK6_TX","UDP_SEGMENT","UINPUT_MAX_NAME_SIZE","UINPUT_VERSION","UIO_MAXIOV","UMOUNT_NOFOLLOW","UNAME26","USBDEVICE_SUPER_MAGIC","USER_PROCESS","USRQUOTA","UTIME_NOW","UTIME_OMIT","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMADDR_CID_ANY","VMADDR_CID_HOST","VMADDR_CID_HYPERVISOR","VMADDR_CID_LOCAL","VMADDR_CID_RESERVED","VMADDR_PORT_ANY","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WHOLE_SECONDS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_EXITCODE","W_OK","W_STOPCODE","XATTR_CREATE","XATTR_REPLACE","XENFS_SUPER_MAGIC","XFS_SUPER_MAGIC","XTABS","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_2_SYMLINKS","_PC_ALLOC_SIZE_MIN","_PC_ASYNC_IO","_PC_CHOWN_RESTRICTED","_PC_FILESIZEBITS","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_PRIO_IO","_PC_REC_INCR_XFER_SIZE","_PC_REC_MAX_XFER_SIZE","_PC_REC_MIN_XFER_SIZE","_PC_REC_XFER_ALIGN","_PC_SOCK_MAXBUF","_PC_SYMLINK_MAX","_PC_SYNC_IO","_PC_VDISABLE","_POSIX_VDISABLE","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_C_VERSION","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_AVPHYS_PAGES","_SC_BARRIERS","_SC_BASE","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHARCLASS_NAME_MAX","_SC_CHAR_BIT","_SC_CHAR_MAX","_SC_CHAR_MIN","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_C_LANG_SUPPORT","_SC_C_LANG_SUPPORT_R","_SC_DELAYTIMER_MAX","_SC_DEVICE_IO","_SC_DEVICE_SPECIFIC","_SC_DEVICE_SPECIFIC_R","_SC_EQUIV_CLASS_MAX","_SC_EXPR_NEST_MAX","_SC_FD_MGMT","_SC_FIFO","_SC_FILE_ATTRIBUTES","_SC_FILE_LOCKING","_SC_FILE_SYSTEM","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_INT_MAX","_SC_INT_MIN","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LEVEL1_DCACHE_ASSOC","_SC_LEVEL1_DCACHE_LINESIZE","_SC_LEVEL1_DCACHE_SIZE","_SC_LEVEL1_ICACHE_ASSOC","_SC_LEVEL1_ICACHE_LINESIZE","_SC_LEVEL1_ICACHE_SIZE","_SC_LEVEL2_CACHE_ASSOC","_SC_LEVEL2_CACHE_LINESIZE","_SC_LEVEL2_CACHE_SIZE","_SC_LEVEL3_CACHE_ASSOC","_SC_LEVEL3_CACHE_LINESIZE","_SC_LEVEL3_CACHE_SIZE","_SC_LEVEL4_CACHE_ASSOC","_SC_LEVEL4_CACHE_LINESIZE","_SC_LEVEL4_CACHE_SIZE","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_LONG_BIT","_SC_MAPPED_FILES","_SC_MB_LEN_MAX","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_MULTI_PROCESS","_SC_NETWORKING","_SC_NGROUPS_MAX","_SC_NL_ARGMAX","_SC_NL_LANGMAX","_SC_NL_MSGMAX","_SC_NL_NMAX","_SC_NL_SETMAX","_SC_NL_TEXTMAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_NZERO","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PII","_SC_PII_INTERNET","_SC_PII_INTERNET_DGRAM","_SC_PII_INTERNET_STREAM","_SC_PII_OSI","_SC_PII_OSI_CLTS","_SC_PII_OSI_COTS","_SC_PII_OSI_M","_SC_PII_SOCKET","_SC_PII_XTI","_SC_PIPE","_SC_POLL","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_REGEX_VERSION","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SCHAR_MAX","_SC_SCHAR_MIN","_SC_SELECT","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SHRT_MAX","_SC_SHRT_MIN","_SC_SIGNALS","_SC_SIGQUEUE_MAX","_SC_SINGLE_PROCESS","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SSIZE_MAX","_SC_SS_REPL_MAX","_SC_STREAMS","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_SYSTEM_DATABASE","_SC_SYSTEM_DATABASE_R","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_ROBUST_PRIO_INHERIT","_SC_THREAD_ROBUST_PRIO_PROTECT","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_T_IOV_MAX","_SC_UCHAR_MAX","_SC_UINT_MAX","_SC_UIO_MAXIOV","_SC_ULONG_MAX","_SC_USER_GROUPS","_SC_USER_GROUPS_R","_SC_USHRT_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_V7_ILP32_OFF32","_SC_V7_ILP32_OFFBIG","_SC_V7_LP64_OFF64","_SC_V7_LPBIG_OFFBIG","_SC_VERSION","_SC_WORD_BIT","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_SC_XOPEN_XPG2","_SC_XOPEN_XPG3","_SC_XOPEN_XPG4","__NFT_REG_MAX","__SIZEOF_PTHREAD_BARRIERATTR_T","__SIZEOF_PTHREAD_BARRIER_T","__SIZEOF_PTHREAD_CONDATTR_T","__SIZEOF_PTHREAD_COND_T","__SIZEOF_PTHREAD_MUTEXATTR_T","__SIZEOF_PTHREAD_MUTEX_T","__SIZEOF_PTHREAD_RWLOCKATTR_T","__SIZEOF_PTHREAD_RWLOCK_T","__UT_HOSTSIZE","__UT_LINESIZE","__UT_NAMESIZE","__WALL","__WCLONE","__WNOTHREAD","__c_anonymous_ifr_ifru","__c_anonymous_ifru_map","__c_anonymous_ptrace_syscall_info_data","__c_anonymous_ptrace_syscall_info_entry","__c_anonymous_ptrace_syscall_info_exit","__c_anonymous_ptrace_syscall_info_seccomp","__c_anonymous_sockaddr_can_can_addr","__c_anonymous_sockaddr_can_j1939","__c_anonymous_sockaddr_can_tp","__errno_location","__exit_status","__fsword_t","__glibc_reserved1","__glibc_reserved2","__glibc_reserved3","__glibc_reserved4","__key","__priority_which_t","__rlimit_resource_t","__s16","__s32","__s64","__seq","__statx_timestamp_pad1","__syscall_ulong_t","__timeval","__u16","__u32","__u64","__u8","__unused1","__unused10","__unused11","__unused2","__unused3","__unused4","__unused5","__unused6","__unused7","__unused8","__unused9","_exit","_f","_libc_fpstate","_libc_fpxreg","_libc_xmmreg","_st","_xmm","abort","abs","absflat","absfuzz","absinfo","absmax","absmin","accept","accept4","access","acct","actime","addmntent","addr","addr","addr_mask","addrinfo","adjtime","adjtimex","af","af_alg_iv","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arch","arch","arena","arena","args","args","args","arp_dev","arp_flags","arp_flags","arp_ha","arp_ha","arp_netmask","arp_netmask","arp_pa","arp_pa","arpd_request","arphdr","arpreq","arpreq_old","asctime_r","atexit","atof","atoi","atol","atoll","attack_length","attack_level","auth_keynumber","backtrace","base_addr","bind","blkcnt64_t","blkcnt_t","blksize_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brk","bsearch","bufferram","bustype","button","c_cc","c_cc","c_cflag","c_cflag","c_char","c_double","c_float","c_iflag","c_iflag","c_int","c_ispeed","c_ispeed","c_lflag","c_lflag","c_line","c_line","c_long","c_longlong","c_oflag","c_oflag","c_ospeed","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","can_addr","can_dlc","can_err_mask_t","can_family","can_filter","can_frame","can_id","can_id","can_id","can_ifindex","can_mask","canfd_frame","canid_t","canxl_frame","cc_t","center","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","cgroup","ch_addralign","ch_addralign","ch_reserved","ch_size","ch_size","ch_type","ch_type","chdir","child_tid","chmod","chown","chroot","clearenv","clearerr","clock_adjtime","clock_getcpuclockid","clock_getres","clock_gettime","clock_nanosleep","clock_settime","clock_t","clockid","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_args","close","closedir","closelog","cmd","cmsg_len","cmsg_level","cmsg_type","cmsghdr","code","code","code","codes_ptr","codes_size","connect","constant","cookie","copy_file_range","cpu_set_t","creat","creat64","cs","ctermid","ctime_r","cuid","currency_symbol","custom_data","custom_len","cwd","cwd","d_ino","d_ino","d_name","d_name","d_off","d_off","d_reclen","d_reclen","d_type","d_type","daemon","data","data","data","deadband","decimal_point","delay","dest_offset","dev","dev_t","difftime","direction","dirent","dirent64","dirfd","dirname","dl_iterate_phdr","dl_phdr_info","dladdr","dladdr1","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlinfo","dlmopen","dlopen","dlpi_addr","dlpi_adds","dlpi_name","dlpi_phdr","dlpi_phnum","dlpi_subs","dlpi_tls_data","dlpi_tls_modid","dlsym","dma","domainname","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curinodes","dqb_curspace","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_valid","dqblk","drand48","ds","dup","dup2","dup3","duplocale","e_ehsize","e_ehsize","e_entry","e_entry","e_exit","e_flags","e_flags","e_ident","e_ident","e_machine","e_machine","e_phentsize","e_phentsize","e_phnum","e_phnum","e_phoff","e_phoff","e_shentsize","e_shentsize","e_shnum","e_shnum","e_shoff","e_shoff","e_shstrndx","e_shstrndx","e_termination","e_type","e_type","e_version","e_version","eaccess","ee_code","ee_data","ee_errno","ee_info","ee_origin","ee_pad","ee_type","effect","effect_id","eflags","element","end_level","endgrent","endmntent","endpwent","endservent","endspent","endutxent","entry","envelope","envelope","envelope","epoll_create","epoll_create1","epoll_ctl","epoll_event","epoll_pwait","epoll_wait","erand48","errcnt","error","es","esterror","esterror","euidaccess","event_len","eventfd","events","events","execl","execle","execlp","execv","execve","execvp","execvpe","exit","exit","exit_signal","explicit_bzero","exponent","f_bavail","f_bavail","f_bavail","f_bavail","f_bfree","f_bfree","f_bfree","f_bfree","f_blocks","f_blocks","f_blocks","f_blocks","f_bsize","f_bsize","f_bsize","f_bsize","f_favail","f_favail","f_ffree","f_ffree","f_ffree","f_ffree","f_files","f_files","f_files","f_files","f_flag","f_flag","f_flags","f_frsize","f_frsize","f_frsize","f_frsize","f_fsid","f_fsid","f_fsid","f_fsid","f_namelen","f_namelen","f_namemax","f_namemax","f_spare","f_type","f_type","faccessat","fade_length","fade_level","fallocate","fallocate64","fanotify_event_metadata","fanotify_init","fanotify_mark","fanotify_response","fchdir","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd","fd","fd_set","fdatasync","fdopen","fdopendir","feof","ferror","fexecve","ff_condition_effect","ff_constant_effect","ff_effect","ff_effects_max","ff_effects_max","ff_envelope","ff_periodic_effect","ff_ramp_effect","ff_replay","ff_rumble_effect","ff_trigger","fflush","fgetc","fgetgrent_r","fgetpos","fgetpos64","fgetpwent_r","fgets","fgetspent_r","fgetxattr","file_clone_range","fileno","filter","flag","flags","flags","flags","flags","flags","flags","flags","flags","flags","flat","flistxattr","flock","flock","flock64","fmemopen","fmt","fop","fop","fopen","fopen64","fordblks","fordblks","fork","forkpty","fpathconf","fpos64_t","fpos_t","fpregs","fprintf","fputc","fputs","frac_digits","fread","fread_unlocked","free","freeaddrinfo","freehigh","freeifaddrs","freelocale","freeram","freeswap","fremovexattr","freopen","freopen64","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fs","fs_base","fsblkcnt_t","fscanf","fseek","fseeko","fseeko64","fsetpos","fsetpos64","fsetxattr","fsfilcnt_t","fsid_t","fsmblks","fsmblks","fstat","fstat64","fstatat","fstatat64","fstatfs","fstatfs64","fstatvfs","fstatvfs64","fsync","ftell","ftello","ftello64","ftok","ftruncate","ftruncate64","ftw","ftw","futimens","futimes","fuzz","fwrite","gai_strerror","genlmsghdr","getaddrinfo","getauxval","getchar","getchar_unlocked","getcontext","getcwd","getdomainname","getdtablesize","getegid","getentropy","getenv","geteuid","getgid","getgrent","getgrent_r","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","getifaddrs","getline","getloadavg","getlogin","getmntent","getmntent_r","getnameinfo","getopt","getopt_long","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprotobyname","getprotobynumber","getpt","getpwent","getpwent_r","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrandom","getresgid","getresuid","getrlimit","getrlimit64","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","getspent","getspent_r","getspnam","getspnam_r","gettid","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid","gid_t","gl_flags","gl_flags","gl_offs","gl_offs","gl_pathc","gl_pathc","gl_pathv","gl_pathv","glob","glob64","glob64_t","glob_t","globfree","globfree64","gmtime","gmtime_r","gnu_basename","gnu_get_libc_release","gnu_get_libc_version","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","greg_t","gregs","group","group","grouping","gs","gs_base","h_addr_list","h_addrtype","h_aliases","h_length","h_name","ha","has_arg","hasmntopt","hblkhd","hblkhd","hblks","hblks","hostent","hstrerror","hwtstamp_config","i387","iconv","iconv_close","iconv_open","iconv_t","id","id","id","id_t","idtype_t","if_freenameindex","if_index","if_indextoname","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_flags","ifa_ifu","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifr6_addr","ifr6_ifindex","ifr6_prefixlen","ifr_ifru","ifr_name","ifreq","ifru_addr","ifru_broadaddr","ifru_data","ifru_dstaddr","ifru_flags","ifru_hwaddr","ifru_ifindex","ifru_map","ifru_metric","ifru_mtu","ifru_netmask","ifru_newname","ifru_slave","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_ifreq","in6_pktinfo","in6_rtmsg","in_addr","in_addr_t","in_pktinfo","in_port_t","index","initgroups","ino64_t","ino_t","inotify_add_watch","inotify_event","inotify_init","inotify_init1","inotify_rm_watch","input_absinfo","input_event","input_id","input_keymap_entry","input_mask","instruction_pointer","instruction_pointer","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","interval","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","ioperm","iopl","iov_base","iov_len","iovec","ip","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","irq","is_error","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_interval","it_value","it_value","itimerspec","itimerval","iv","ivlen","j1939","j1939_filter","jf","jitcnt","jitter","jrand48","jt","k","keepcost","keepcost","key_t","keycode","kill","killpg","l_len","l_len","l_linger","l_onoff","l_pid","l_pid","l_start","l_start","l_type","l_type","l_whence","l_whence","labs","lchown","lcong48","lconv","left_coeff","left_saturation","len","len","len","len","len","length","level","lgetxattr","linger","link","linkat","lio_listio","listen","listxattr","llistxattr","loads","locale_t","localeconv","localtime","localtime_r","lockf","loff_t","login_tty","lrand48","lremovexattr","lseek","lseek64","lsetxattr","lstat","lstat64","lutimes","machine","madvise","magic","magnitude","major","makecontext","makedev","mallinfo","mallinfo","mallinfo2","mallinfo2","malloc","malloc_info","malloc_trim","malloc_usable_size","mallopt","mask","mask","max_align_t","maxerror","maxerror","maximum","mcontext_t","mem_end","mem_start","mem_unit","memalign","memchr","memcmp","memcpy","memfd_create","memmem","memmove","memrchr","memset","metadata_len","mincore","minimum","minor","mkdir","mkdirat","mkdtemp","mkfifo","mkfifoat","mknod","mknodat","mkostemp","mkostemps","mkstemp","mkstemps","mktime","mlock","mlock2","mlockall","mmap","mmap64","mmsghdr","mnt_dir","mnt_freq","mnt_fsname","mnt_opts","mnt_passno","mnt_type","mntent","mode","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mq_attr","mq_close","mq_curmsgs","mq_flags","mq_getattr","mq_maxmsg","mq_msgsize","mq_open","mq_receive","mq_send","mq_setattr","mq_timedreceive","mq_timedsend","mq_unlink","mqd_t","mr_address","mr_alen","mr_ifindex","mr_type","mrand48","mremap","msg","msg_control","msg_controllen","msg_ctime","msg_flags","msg_hdr","msg_iov","msg_iovlen","msg_len","msg_lrpid","msg_lspid","msg_name","msg_namelen","msg_perm","msg_qbytes","msg_qnum","msg_rtime","msg_stime","msgctl","msgget","msghdr","msginfo","msglen_t","msgmap","msgmax","msgmnb","msgmni","msgpool","msgqnum_t","msgrcv","msgseg","msgsnd","msgssz","msgtql","msqid_ds","msync","munlock","munlockall","munmap","mxcr_mask","mxcr_mask","mxcsr","mxcsr","n_cs_precedes","n_sep_by_space","n_sign_posn","name","name","name","name","name","name_mask","name_t","nanosleep","negative_sign","newlocale","nfds_t","nice","nl_family","nl_groups","nl_item","nl_langinfo","nl_langinfo_l","nl_mmap_hdr","nl_mmap_req","nl_pid","nl_pktinfo","nla_len","nla_type","nlattr","nlink_t","nlmsg_flags","nlmsg_len","nlmsg_pid","nlmsg_seq","nlmsg_type","nlmsgerr","nlmsghdr","nm_block_nr","nm_block_size","nm_frame_nr","nm_frame_size","nm_gid","nm_group","nm_len","nm_pid","nm_status","nm_uid","nodename","nr","nr","nr","nr","nrand48","ntp_adjtime","ntp_gettime","ntptimeval","nxt_assoc_id","nxt_flags","nxt_length","nxt_ppid","nxt_sid","off","off64_t","off_t","offset","offset","old","op","open","open64","open_how","open_memstream","open_wmemstream","openat","openat64","opendir","openlog","openpty","option","ordblks","ordblks","orig_rax","p_aliases","p_align","p_align","p_cs_precedes","p_filesz","p_filesz","p_flags","p_flags","p_memsz","p_memsz","p_name","p_offset","p_offset","p_paddr","p_paddr","p_proto","p_sep_by_space","p_sign_posn","p_type","p_type","p_vaddr","p_vaddr","packet_mreq","pad","pad","pad","parent_tid","passwd","pathconf","pause","pclose","period","perror","personality","pgn","pgn","pgn_mask","pgn_t","phase","pid","pid","pid_t","pidfd","pipe","pipe2","poll","pollfd","popen","port","positive_sign","posix_basename","posix_fadvise","posix_fadvise64","posix_fallocate","posix_fallocate64","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addchdir_np","posix_spawn_file_actions_addclose","posix_spawn_file_actions_addclosefrom_np","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addfchdir_np","posix_spawn_file_actions_addopen","posix_spawn_file_actions_addtcsetpgrp_np","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getschedparam","posix_spawnattr_getschedpolicy","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setschedparam","posix_spawnattr_setschedpolicy","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppoll","ppsfreq","pr_policy","pr_value","prctl","pread","pread64","preadv","preadv2","preadv64","preadv64v2","precision","printf","prio","priority_t","prlimit","prlimit64","process_vm_readv","process_vm_writev","procs","product","protoent","pselect","pthread_atfork","pthread_attr_destroy","pthread_attr_getaffinity_np","pthread_attr_getguardsize","pthread_attr_getstack","pthread_attr_init","pthread_attr_setaffinity_np","pthread_attr_setdetachstate","pthread_attr_setstacksize","pthread_attr_t","pthread_barrier_destroy","pthread_barrier_init","pthread_barrier_t","pthread_barrier_wait","pthread_barrierattr_destroy","pthread_barrierattr_getpshared","pthread_barrierattr_init","pthread_barrierattr_setpshared","pthread_barrierattr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getclock","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setclock","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_getaffinity_np","pthread_getattr_np","pthread_getcpuclockid","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_consistent","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_timedlock","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getprotocol","pthread_mutexattr_getpshared","pthread_mutexattr_getrobust","pthread_mutexattr_init","pthread_mutexattr_setprotocol","pthread_mutexattr_setpshared","pthread_mutexattr_setrobust","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getkind_np","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setkind_np","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setaffinity_np","pthread_setname_np","pthread_setschedparam","pthread_setschedprio","pthread_setspecific","pthread_sigmask","pthread_sigqueue","pthread_spin_destroy","pthread_spin_init","pthread_spin_lock","pthread_spin_trylock","pthread_spin_unlock","pthread_spinlock_t","pthread_t","ptrace","ptrace_peeksiginfo_args","ptrace_rseq_configuration","ptrace_syscall_info","ptrdiff_t","ptsname","ptsname_r","putchar","putchar_unlocked","putenv","putgrent","putpwent","puts","pututxline","pw_dir","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwrite64","pwritev","pwritev2","pwritev64","pwritev64v2","qsort","qsort_r","quotactl","r10","r11","r12","r13","r14","r15","r8","r9","raise","rand","rax","rbp","rbx","rcv_assoc_id","rcv_context","rcv_cumtsn","rcv_flags","rcv_ppid","rcv_sid","rcv_ssn","rcv_tsn","rcx","rdi","rdp","rdp","rdx","read","readahead","readdir","readdir64","readdir64_r","readdir_r","readlink","readlinkat","readv","realloc","reallocarray","realpath","reboot","recv","recvfrom","recvmmsg","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","regs","release","remap_file_pages","remove","removexattr","rename","renameat","renameat2","replay","req","request_id","request_id","res_init","reserved","reserved","resolution","resolve","response","ret_data","retval","retval","revents","rewind","rewinddir","right_coeff","right_saturation","rip","rip","rip","rlim64_t","rlim_cur","rlim_cur","rlim_max","rlim_max","rlim_t","rlimit","rlimit64","rm_eo","rm_so","rmdir","rseq_abi_pointer","rseq_abi_size","rsi","rsp","rt_class","rt_dev","rt_dst","rt_flags","rt_gateway","rt_genmask","rt_irtt","rt_metric","rt_mtu","rt_pad1","rt_pad2","rt_pad3","rt_pad4","rt_tos","rt_window","rtentry","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","rx_filter","rx_id","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_family","sa_family_t","sa_flags","sa_mask","sa_restorer","sa_sigaction","salg_family","salg_feat","salg_mask","salg_name","salg_type","sbrk","scancode","scanf","sched_get_priority_max","sched_get_priority_min","sched_getaffinity","sched_getcpu","sched_getparam","sched_getscheduler","sched_param","sched_priority","sched_rr_get_interval","sched_setaffinity","sched_setparam","sched_setscheduler","sched_yield","sctp_assoc_t","sctp_authinfo","sctp_initmsg","sctp_nxtinfo","sctp_prinfo","sctp_rcvinfo","sctp_sndinfo","sctp_sndrcvinfo","sdt","seccomp","seccomp_data","seccomp_data","seccomp_notif","seccomp_notif_resp","seccomp_notif_sizes","seed48","seekdir","select","sem_close","sem_ctime","sem_destroy","sem_flg","sem_getvalue","sem_init","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_perm","sem_post","sem_t","sem_timedwait","sem_trywait","sem_unlink","sem_wait","semaem","sembuf","semctl","semget","semid_ds","seminfo","semmap","semmni","semmns","semmnu","semmsl","semop","semopm","semume","semusz","semvmx","send","sendfile","sendfile64","sendmmsg","sendmsg","sendto","servent","set_tid","set_tid_size","setbuf","setcontext","setdomainname","setegid","setenv","seteuid","setfsgid","setfsuid","setgid","setgrent","setgroups","sethostid","sethostname","setlocale","setlogmask","setmntent","setns","setpgid","setpriority","setpwent","setregid","setresgid","setresuid","setreuid","setrlimit","setrlimit64","setservent","setsid","setsockopt","setspent","settimeofday","setuid","setutxent","setvbuf","setxattr","sgetspent_r","sh_addr","sh_addr","sh_addralign","sh_addralign","sh_entsize","sh_entsize","sh_flags","sh_flags","sh_info","sh_info","sh_link","sh_link","sh_name","sh_name","sh_offset","sh_offset","sh_size","sh_size","sh_type","sh_type","sharedram","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_code","si_errno","si_pid","si_signo","si_status","si_stime","si_uid","si_utime","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_thread_id","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","signal","signalfd","signalfd_siginfo","signature","significand","sigpending","sigprocmask","sigset_t","sigsuspend","sigtimedwait","sigval","sigwait","sigwaitinfo","sin6_addr","sin6_family","sin6_flowinfo","sin6_port","sin6_scope_id","sin_addr","sin_family","sin_port","sin_zero","sinfo_assoc_id","sinfo_context","sinfo_cumtsn","sinfo_flags","sinfo_ppid","sinfo_ssn","sinfo_stream","sinfo_timetolive","sinfo_tsn","sinit_max_attempts","sinit_max_init_timeo","sinit_max_instreams","sinit_num_ostreams","sival_ptr","size_t","sleep","sll_addr","sll_family","sll_halen","sll_hatype","sll_ifindex","sll_pkttype","sll_protocol","smblks","smblks","snd_assoc_id","snd_context","snd_flags","snd_ppid","snd_sid","snprintf","sock_extended_err","sock_filter","sock_fprog","sock_txtime","sockaddr","sockaddr_alg","sockaddr_can","sockaddr_in","sockaddr_in6","sockaddr_ll","sockaddr_nl","sockaddr_storage","sockaddr_un","sockaddr_vm","socket","socketpair","socklen_t","sp_expire","sp_flag","sp_inact","sp_lstchg","sp_max","sp_min","sp_namp","sp_pwdp","sp_warn","speed_t","splice","sprintf","spwd","srand","srand48","src_fd","src_length","src_offset","ss","ss_family","ss_flags","ss_size","ss_sp","sscanf","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","ssize_t","st_atime","st_atime","st_atime_nsec","st_atime_nsec","st_blksize","st_blksize","st_blocks","st_blocks","st_ctime","st_ctime","st_ctime_nsec","st_ctime_nsec","st_dev","st_dev","st_gid","st_gid","st_info","st_info","st_ino","st_ino","st_mode","st_mode","st_mtime","st_mtime","st_mtime_nsec","st_mtime_nsec","st_name","st_name","st_nlink","st_nlink","st_other","st_other","st_rdev","st_rdev","st_shndx","st_shndx","st_size","st_size","st_size","st_size","st_space","st_uid","st_uid","st_value","st_value","stabil","stack","stack_pointer","stack_size","stack_t","stamp","start_code","start_level","start_stack","stat","stat","stat64","stat64","statfs","statfs","statfs64","statfs64","status","statvfs","statvfs","statvfs64","statvfs64","statx","statx","statx_timestamp","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strchrnul","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strftime","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strong_magnitude","strpbrk","strptime","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoll","strtoul","strtoull","strxfrm","stx_atime","stx_attributes","stx_attributes_mask","stx_blksize","stx_blocks","stx_btime","stx_ctime","stx_dev_major","stx_dev_minor","stx_dio_mem_align","stx_dio_offset_align","stx_gid","stx_ino","stx_mask","stx_mnt_id","stx_mode","stx_mtime","stx_nlink","stx_rdev_major","stx_rdev_minor","stx_size","stx_uid","sun_family","sun_path","suseconds_t","sval","svm_cid","svm_family","svm_port","svm_reserved1","svm_zero","swapcontext","swapoff","swapon","swd","swd","symlink","symlinkat","sync","sync_file_range","syncfs","syscall","sysconf","sysctl","sysinfo","sysinfo","syslog","sysname","system","tai","tai","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","tee","telldir","termios","termios2","thousands_sep","tick","time","time","time","time","time_t","timegm","timer_create","timer_delete","timer_getoverrun","timer_gettime","timer_settime","timer_t","timerfd_create","timerfd_gettime","timerfd_settime","times","timespec","timeval","timex","timezone","tls","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpfile64","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","totalhigh","totalram","totalswap","toupper","tp","trigger","truncate","truncate64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_nsec","tv_sec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","tx_id","tx_type","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u64","u_ar0","u_comm","u_debugreg","u_dsize","u_fpstate","u_fpvalid","u_ssize","u_tsize","uc_flags","uc_link","uc_mcontext","uc_sigmask","uc_stack","ucontext_t","ucred","uid","uid","uid_t","uinput_abs_setup","uinput_ff_erase","uinput_ff_upload","uinput_setup","uinput_user_dev","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","umount","umount2","uname","ungetc","unlink","unlinkat","unlockpt","unsetenv","unshare","uordblks","uordblks","updated","uptime","useconds_t","uselocale","user","user_fpregs_struct","user_regs_struct","usleep","usmblks","usmblks","ut_addr_v6","ut_exit","ut_host","ut_id","ut_line","ut_pid","ut_session","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpname","utmpx","utmpxname","utsname","val","value","value","vendor","vers","version","version","version","vfork","vhangup","vmsplice","wait","wait4","waitid","waitpid","waveform","wchar_t","wcslen","wcstombs","wd","weak_magnitude","winsize","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xmm_space"],"q":[[0,"libc"]],"dmaximum number of services provided on the same listening …uth Header","","IP Payload Comp. Protocol","DCCP","IP6 destination option","exterior gateway protocol","encapsulation header","IP6 Encap Sec. Payload","Ethernet-within-IPv6 encapsulation.","IP6 fragmentation header","General Routing Encap.","Hop-by-hop option header","","","xns idp","group mgmt protocol","","for compatibility","","","","","Multipath TCP","","IP6 no next header","Protocol indep. multicast","pup","raw IP packet","IP6 routing header","resource reservation","SCTP","","tp-4 w/ class negotiationhe <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of thisquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","GNU version of <code>basename(3)</code>, defined in <code>string.h</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","interface name, e.g. “en0”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","POSIX version of <code>basename(3)</code>, defined in <code>libgen.h</codehe 64-bit libc on Solaris and illumos only has readdir_r. …if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,3],4],0,0,0,0,0,0,0,0,0,0,[2,2],0,0,0,0,0,0,0,0,[2,2],0,[[1,2],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,6],[7,5],[8,8],[[7,5],5],[8,8],0,0,0,[9,10],[[11,12]],[12,9],[[11,12],9],[[12,12],13],[[11,12],13],[[11,12]],0,[12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,14]],[[9,14],13],[[9,14]],0,[14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9,9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,15],0,0,[15,15],0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[16,16,16],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,[16,13],0,0,0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],[9,9],[9,13],[9,13],0,0,0,0,0,0,0,[[9,9]],[9,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[17,18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,13],0,[9,9],0,[9,13],[9,13],[9,13],[9,13],0,0,0,[9,9],[9,9],0,[[9,9],9],0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[18,18],[44,44],[45,45],[46,46],[47,47],[14,14],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[12,12],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[17,17],[113,113],[114,114],[115,115],[116,116],[4,4],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[7,7],[5,5],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[185,185],[186,186],[187,187],[188,188],[189,189],[190,190],[191,191],[192,192],[193,193],[194,194],[195,195],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[220,221],[[223,[222]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[224,8],0,[[8,8],224],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[224,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[182,220],0,0,[182,225],0,[182,9],[182,226],[182,227],[182,226],[182,34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],[[],228],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[715,1369,3347,4249,4613,6147,6148,6149,6150,6411,6412,8263,8264,8265,8266,8317],"p":[[6,"__u16"],[6,"__u32"],[6,"__u8"],[3,"sock_filter"],[3,"cmsghdr"],[6,"c_uchar"],[3,"msghdr"],[6,"c_uint"],[6,"c_int"],[6,"size_t"],[15,"usize"],[3,"cpu_set_t"],[15,"bool"],[3,"fd_set"],[15,"u8"],[15,"u32"],[3,"sock_extended_err"],[3,"sockaddr"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[4,"timezone"],[3,"in_addr"],[3,"ip_mreq"],[3,"ip_mreqn"],[3,"ip_mreq_source"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"lconv"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"in6_rtmsg"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"mmsghdr"],[3,"epoll_event"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"utsname"],[3,"sigevent"],[4,"fpos64_t"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"fsid_t"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"uinput_ff_upload"],[3,"uinput_ff_erase"],[3,"uinput_abs_setup"],[3,"dl_phdr_info"],[3,"Elf32_Ehdr"],[3,"Elf64_Ehdr"],[3,"Elf32_Sym"],[3,"Elf64_Sym"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"Elf32_Shdr"],[3,"Elf64_Shdr"],[3,"ucred"],[3,"mntent"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"inotify_event"],[3,"fanotify_response"],[3,"sockaddr_vm"],[3,"regmatch_t"],[3,"__c_anonymous_sockaddr_can_tp"],[3,"__c_anonymous_sockaddr_can_j1939"],[3,"can_filter"],[3,"j1939_filter"],[3,"sock_fprog"],[3,"seccomp_data"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nlattr"],[3,"file_clone_range"],[3,"__c_anonymous_ifru_map"],[3,"in6_ifreq"],[3,"option"],[3,"sctp_initmsg"],[3,"sctp_sndrcvinfo"],[3,"sctp_sndinfo"],[3,"sctp_rcvinfo"],[3,"sctp_nxtinfo"],[3,"sctp_prinfo"],[3,"sctp_authinfo"],[3,"rlimit64"],[3,"sockaddr_nl"],[3,"dirent"],[3,"sockaddr_alg"],[3,"uinput_setup"],[3,"uinput_user_dev"],[3,"af_alg_iv"],[3,"mq_attr"],[19,"__c_anonymous_ifr_ifru"],[3,"ifreq"],[3,"hwtstamp_config"],[3,"dirent64"],[3,"sock_txtime"],[19,"__c_anonymous_sockaddr_can_can_addr"],[3,"sockaddr_can"],[3,"statx"],[3,"statx_timestamp"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"glob64_t"],[3,"termios"],[3,"mallinfo"],[3,"mallinfo2"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"rtentry"],[3,"timex"],[3,"ntptimeval"],[3,"regex_t"],[3,"Elf64_Chdr"],[3,"Elf32_Chdr"],[3,"seminfo"],[3,"ptrace_peeksiginfo_args"],[3,"__c_anonymous_ptrace_syscall_info_entry"],[3,"__c_anonymous_ptrace_syscall_info_exit"],[3,"__c_anonymous_ptrace_syscall_info_seccomp"],[3,"ptrace_syscall_info"],[19,"__c_anonymous_ptrace_syscall_info_data"],[3,"utmpx"],[3,"sigset_t"],[3,"sysinfo"],[3,"msqid_ds"],[3,"semid_ds"],[3,"sigaction"],[3,"statfs"],[3,"flock"],[3,"flock64"],[3,"siginfo_t"],[3,"stack_t"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"seccomp_notif_sizes"],[3,"ptrace_rseq_configuration"],[3,"user_fpregs_struct"],[3,"ucontext_t"],[3,"statvfs"],[3,"max_align_t"],[3,"clone_args"],[3,"sem_t"],[3,"termios2"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_condattr_t"],[3,"pthread_barrierattr_t"],[3,"fanotify_event_metadata"],[3,"pthread_cond_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_barrier_t"],[3,"can_frame"],[3,"canfd_frame"],[3,"canxl_frame"],[3,"open_how"],[3,"in6_addr"],[4,"c_void"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"dev_t"],[6,"pid_t"],[6,"c_long"],[6,"uid_t"],[3,"TypeId"]]},\
"libm":{"doc":"libm in pure Rust","t":"DFLLFFLLFFLLFFLLFFLLFLLFFFLLFLLFLLFFLLFFLLFFLLFFLLFFLLFLLFFFLLFLLFFLLFFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFLFLLFFLLFLFLLFFLLFFLLFFLLFFLLFLLFFFLLFLLFFLLFFLLFFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFLLFFFLLFFLLFFLLFFLLFFLLFFLLFLLLFLLFFLLFFLLF","n":["Libm","acos","acos","acos","acosf","acosh","acosh","acosh","acoshf","asin","asin","asin","asinf","asinh","asinh","asinh","asinhf","atan","atan","atan","atan2","atan2","atan2","atan2f","atanf","atanh","atanh","atanh","atanhf","borrow","borrow_mut","cbrt","cbrt","cbrt","cbrtf","ceil","ceil","ceil","ceilf","copysign","copysign","copysign","copysignf","cos","cos","cos","cosf","cosh","cosh","cosh","coshf","erf","erf","erf","erfc","erfc","erfc","erfcf","erff","exp","exp","exp","exp10","exp10","exp10","exp10f","exp2","exp2","exp2","exp2f","expf","expm1","expm1","expm1","expm1f","fabs","fabs","fabs","fabsf","fdim","fdim","fdim","fdimf","floor","floor","floor","floorf","fma","fma","fma","fmaf","fmax","fmax","fmax","fmaxf","fmin","fmin","fmin","fminf","fmod","fmod","fmod","fmodf","frexp","frexp","frexp","frexpf","from","hypot","hypot","hypot","hypotf","ilogb","ilogb","ilogb","ilogbf","into","j0","j0","j0","j0f","j1","j1","j1","j1f","jn","jn","jn","jnf","ldexp","ldexp","ldexp","ldexpf","lgamma","lgamma","lgamma","lgamma_r","lgamma_r","lgamma_r","lgammaf","lgammaf_r","log","log","log","log10","log10","log10","log10f","log1p","log1p","log1p","log1pf","log2","log2","log2","log2f","logf","modf","modf","modf","modff","nextafter","nextafter","nextafter","nextafterf","pow","pow","pow","powf","remainder","remainder","remainder","remainderf","remquo","remquo","remquo","remquof","rint","rint","rint","rintf","round","round","round","roundf","scalbn","scalbn","scalbn","scalbnf","sin","sin","sin","sincos","sincos","sincos","sincosf","sinf","sinh","sinh","sinh","sinhf","sqrt","sqrt","sqrt","sqrtf","tan","tan","tan","tanf","tanh","tanh","tanh","tanhf","tgamma","tgamma","tgamma","tgammaf","trunc","trunc","trunc","truncf","try_from","try_into","type_id","y0","y0","y0","y0f","y1","y1","y1","y1f","yn","yn","yn","ynf"],"q":[[0,"libm"]],"d":["Generic helper for libm functions, abstracting over f32 …","Arccosine (f64)","","","Arccosine (f32)","Inverse hyperbolic cosine (f64)","","","Inverse hyperbolic cosine (f32)","Arcsine (f64)","","","Arcsine (f32)","Inverse hyperbolic sine (f64)","","","Inverse hyperbolic sine (f32)","Arctangent (f64)","","","Arctangent of y/x (f64)","","","Arctangent of y/x (f32)","Arctangent (f32)","Inverse hyperbolic tangent (f64)","","","Inverse hyperbolic tangent (f32)","","","Computes the cube root of the argument.","","","Cube root (f32)","Ceil (f64)","","","Ceil (f32)","Sign of Y, magnitude of X (f64)","","","Sign of Y, magnitude of X (f32)","","","","","Hyperbolic cosine (f64)","","","Hyperbolic cosine (f64)","Error function (f64)","","","Complementary error function (f64)","","","Complementary error function (f32)","Error function (f32)","Exponential, base <em>e</em> (f64)","","","","","","","Exponential, base 2 (f64)","","","Exponential, base 2 (f32)","Exponential, base <em>e</em> (f32)","Exponential, base <em>e</em>, of x-1 (f64)","","","Exponential, base <em>e</em>, of x-1 (f32)","Absolute value (magnitude) (f64) Calculates the absolute …","","","Absolute value (magnitude) (f32) Calculates the absolute …","Positive difference (f64)","","","Positive difference (f32)","Floor (f64)","","","Floor (f32)","Floating multiply add (f64)","","","Floating multiply add (f32)","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,6,6,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,6,6,0,0,6,6,0,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,0,6,6,0,0,6,6,0,6,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,6,6,0,0,6,6,0,0,6,6,0,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,6,0,6,6,0,0,6,6,0,0,6,6,0],"f":[0,[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[2,2],[1,1],[2,2],[1,1],[2,2],[[]],[[]],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[1,1],[1,1],[2,2],[2,2],[[1,1,1],1],[[2,2,2],2],[[1,1,1],1],[[2,2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[1],[2],[1],[2],[[]],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[1,3],[2,3],[1,3],[2,3],[[]],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[[3,1],1],[[3,2],2],[[3,1],1],[[3,2],2],[[1,3],1],[[2,3],2],[[1,3],1],[[2,3],2],[1,1],[1,1],[2,2],[1],[1],[2],[2,2],[2],[1,1],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[2,2],[1],[2],[1],[2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[[1,3],1],[[1,3],1],[[2,3],2],[[2,3],2],[1,1],[2,2],[1,1],[1],[2],[1],[2],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[[],4],[[],4],[[],5],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[[3,1],1],[[3,2],2],[[3,1],1],[[3,2],2]],"c":[],"p":[[15,"f64"],[15,"f32"],[15,"i32"],[4,"Result"],[3,"TypeId"],[3,"Libm"]]},\
"log":{"doc":"A lightweight logging facade.","t":"NNNNNNEEIDDNDDDRDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLKLLLLLLLOLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLKOOFLLFLLLLLLLLLLLLLLFFFFLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLO","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,3,7,1,8,4,6,1,8,4,6,8,7,0,3,7,20,4,4,6,6,8,7,11,0,1,3,1,3,20,4,4,6,6,1,3,8,7,15,15,11,11,4,6,1,3,8,7,15,11,4,6,4,6,8,7,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,1,3,20,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[[],3],[[],7],[8,10],[[4,4],10],[[4,6],10],[[6,6],10],[[6,4],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[]],[[4,13],14],[[4,13],14],[[6,13],14],[[6,13],14],[[1,13],14],[[3,13],14],[[8,13],14],[[7,13],14],[[15,13],14],[[15,13],14],[[11,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[4]]]],[5,[[16,[6]]]],[[4,17]],[[6,17]],[[8,17]],[[7,17]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[19]]]],[[3,[12,[19]]],3],[1],0,0,[[],20],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,6],[[12,[9]]]],[[4,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[6,4],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[20,[[16,[15]]]],[20,[[16,[15]]]],[6],[6],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0],"c":[],"p":[[3,"Record"],[3,"Arguments"],[3,"RecordBuilder"],[4,"Level"],[15,"str"],[4,"LevelFilter"],[3,"MetadataBuilder"],[3,"Metadata"],[4,"Ordering"],[15,"bool"],[3,"ParseLevelError"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SetLoggerError"],[4,"Result"],[8,"Hasher"],[8,"Iterator"],[15,"u32"],[8,"Log"],[3,"TypeId"]]},\
"memmap2":{"doc":"A cross-platform Rust API for memory mapped buffers.","t":"ENNNNNNNNNDIDDDDNNNNNNNLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Advice","DoDump","DoFork","DontDump","DontFork","DontNeed","Free","HugePage","HwPoison","Mergeable","Mmap","MmapAsRawDesc","MmapMut","MmapOptions","MmapRaw","MmapRawDescriptor","NoHugePage","Normal","Random","Remove","Sequential","Unmergeable","WillNeed","advise","advise","advise","advise_range","advise_range","advise_range","as_mut","as_mut_ptr","as_ptr","as_raw_desc","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","eq","equivalent","flush","flush","flush_async","flush_async","flush_async_range","flush_async_range","flush_range","flush_range","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","len","len","lock","lock","lock","make_exec","make_mut","make_read_only","map","map","map_anon","map_anon","map_copy","map_copy_read_only","map_exec","map_mut","map_mut","map_raw","map_raw","map_raw_read_only","new","offset","populate","stack","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock","unlock"],"q":[[0,"memmap2"]],"d":["Values supported by Mmap::advise and MmapMut::advise …","<strong>MADV_DODUMP</strong> - Linux only (since Linux 3.4)","<strong>MADV_DOFORK</strong> - Linux only (since Linux 2.6.16)","<strong>MADV_DONTDUMP</strong> - Linux only (since Linux 3.4)","<strong>MADV_DONTFORK</strong> - Linux only (since Linux 2.6.16)","<strong>MADV_DONTNEED</strong>","<strong>MADV_FREE</strong> - Linux (since Linux 4.5) and Darwin","<strong>MADV_HUGEPAGE</strong> - Linux only (since Linux 2.6.38)","<strong>MADV_HWPOISON</strong> - Linux only (since Linux 2.6.32)","<strong>MADV_MERGEABLE</strong> - Linux only (since Linux 2.6.32)","A handle to an immutable memory mapped buffer.","","A handle to a mutable memory mapped buffer.","A memory map builder, providing advanced options and flags …","A handle to a raw memory mapped buffer.","","<strong>MADV_NOHUGEPAGE</strong> - Linux only (since Linux 2.6.38)","<strong>MADV_NORMAL</strong>","<strong>MADV_RANDOM</strong>","<strong>MADV_REMOVE</strong> - Linux only (since Linux 2.6.16)","<strong>MADV_SEQUENTIAL</strong>","<strong>MADV_UNMERGEABLE</strong> - Linux only (since Linux 2.6.32)","<strong>MADV_WILLNEED</strong>","Advise OS how this memory map will be accessed. Only …","Advise OS how this memory map will be accessed. Only …","Advise OS how this memory map will be accessed. Only …","Advise OS how this range of memory map will be accessed.","Advise OS how this range of memory map will be accessed.","Advise OS how this range of memory map will be accessed.","","Returns an unsafe mutable pointer to the memory mapped …","Returns a raw pointer to the memory mapped file.","","","","","","","","","","","","","","","","","","","","","","","","","","Flushes outstanding memory map modifications to disk.","Flushes outstanding memory map modifications to disk.","Asynchronously flushes outstanding memory map …","Asynchronously flushes outstanding memory map …","Asynchronously flushes outstanding memory map …","Asynchronously flushes outstanding memory map …","Flushes outstanding memory map modifications in the range …","Flushes outstanding memory map modifications in the range …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length in bytes of the memory map.","Configures the created memory mapped buffer to be <code>len</code> …","Lock the whole memory map into RAM. Only supported on Unix.","Lock the whole memory map into RAM. Only supported on Unix.","Lock the whole memory map into RAM. Only supported on Unix.","Transition the memory map to be readable and executable.","Transition the memory map to be writable.","Returns an immutable version of this memory mapped buffer.","Creates a read-only memory map backed by a file.","Creates a read-only memory map backed by a file.","Creates an anonymous memory map.","Creates an anonymous memory map.","Creates a copy-on-write memory map backed by a file.","Creates a copy-on-write read-only memory map backed by a …","Creates a readable and executable memory map backed by a …","Creates a writeable memory map backed by a file.","Creates a writeable memory map backed by a file.","Creates a writeable memory map backed by a file.","Creates a raw memory map.","Creates a read-only raw memory map","Creates a new set of options for configuring and creating …","Configures the memory map to start at byte <code>offset</code> from the …","Populate (prefault) page tables for a mapping.","Configures the anonymous memory map to be suitable for a …","","","","","","","","","","","","","","","","","","","","","Unlock the whole memory map. Only supported on Unix.","Unlock the whole memory map. Only supported on Unix.","Unlock the whole memory map. Only supported on Unix."],"i":[0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,1,4,5,1,4,5,5,4,4,15,1,5,9,1,4,5,2,10,9,1,4,5,2,10,2,10,2,10,10,1,5,5,2,2,4,5,4,5,4,5,4,5,1,4,5,2,10,9,1,4,4,4,5,2,10,2,9,1,4,5,2,10,4,10,1,4,5,5,1,5,1,10,5,10,10,10,10,5,10,4,10,10,10,10,10,10,2,10,9,1,4,5,2,10,9,1,4,5,2,10,9,1,4,5,2,10,1,4,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],[[4,2],3],[[5,2],3],[[1,2,6,6],3],[[4,2,6,6],3],[[5,2,6,6],3],[5,[[8,[7]]]],[4,7],[4,7],[[],9],[1,[[8,[7]]]],[5,[[8,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[10,10],[[]],[[]],[[],10],[1,[[8,[7]]]],[5,[[8,[7]]]],[5,[[8,[7]]]],[[2,2],11],[[],11],[4,3],[5,3],[4,3],[5,3],[[4,6,6],3],[[5,6,6],3],[[4,6,6],3],[[5,6,6],3],[[1,12],13],[[4,12],13],[[5,12],13],[[2,12],13],[[10,12],13],[[]],[[]],[5,4],[1,4],[[]],[[]],[[]],[[]],[[2,14]],[[]],[[]],[[]],[[]],[[]],[[]],[4,6],[[10,6],10],[1,3],[4,3],[5,3],[5,[[3,[1]]]],[1,[[3,[5]]]],[5,[[3,[1]]]],[15,[[3,[1]]]],[[10,15],[[3,[1]]]],[6,[[3,[5]]]],[10,[[3,[5]]]],[[10,15],[[3,[5]]]],[[10,15],[[3,[1]]]],[[10,15],[[3,[1]]]],[15,[[3,[5]]]],[[10,15],[[3,[5]]]],[15,[[3,[4]]]],[[10,15],[[3,[4]]]],[[10,15],[[3,[4]]]],[[],10],[[10,16],10],[10,10],[10,10],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[1,3],[4,3],[5,3]],"c":[],"p":[[3,"Mmap"],[4,"Advice"],[6,"Result"],[3,"MmapRaw"],[3,"MmapMut"],[15,"usize"],[15,"u8"],[15,"slice"],[3,"MmapRawDescriptor"],[3,"MmapOptions"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[8,"MmapAsRawDesc"],[15,"u64"],[4,"Result"],[3,"TypeId"]]},\
"rangemap":{"doc":"<code>RangeMap</code> and <code>RangeInclusiveMap</code> are map data structures …","t":"CCCCIIKKAAAAKKDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["RangeInclusiveMap","RangeInclusiveSet","RangeMap","RangeSet","StepFns","StepLite","add_one","add_one","inclusive_map","inclusive_set","map","set","sub_one","sub_one","Gaps","IntoIter","Iter","Overlapping","RangeInclusiveMap","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","cmp","contains_key","default","eq","extend","fmt","from","from","from","from","from","from_iter","gaps","get","get_key_value","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","len","new","new_with_step_fns","next","next","next","next","overlapping","overlaps","partial_cmp","remove","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Gaps","IntoIter","Iter","Overlapping","RangeInclusiveSet","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","cmp","contains","default","eq","extend","fmt","from","from","from","from","from","from_iter","gaps","get","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","len","new","new_with_step_fns","next","next","next","next","overlapping","overlaps","partial_cmp","remove","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Gaps","IntoIter","Iter","Overlapping","RangeMap","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","cmp","contains_key","default","eq","extend","fmt","from","from","from","from","from","from_iter","gaps","get","get_key_value","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","len","new","next","next","next","next","overlapping","overlaps","partial_cmp","remove","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Gaps","IntoIter","Iter","Overlapping","RangeSet","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","cmp","contains","default","eq","extend","fmt","from","from","from","from","from","from_iter","gaps","get","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","len","new","next","next","next","next","overlapping","overlaps","partial_cmp","remove","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"rangemap"],[14,"rangemap::inclusive_map"],[89,"rangemap::inclusive_set"],[163,"rangemap::map"],[237,"rangemap::set"]],"d":["","","","","Successor and predecessor functions defined for <code>T</code>, but as …","Minimal version of unstable <code>Step</code> trait from the Rust …","Returns the <em>successor</em> of <code>self</code>.","Returns the <em>successor</em> of value <code>start</code>.","","","","","Returns the <em>predecessor</em> of <code>self</code>.","Returns the <em>predecessor</em> of value <code>start</code>.","An iterator over all ranges not covered by a …","An owning iterator over the entries of a <code>RangeInclusiveMap</code>…","An iterator over the entries of a <code>RangeInclusiveMap</code>, …","An iterator over all stored ranges partially or completely …","A map whose keys are stored as ranges bounded inclusively …","","","","","","","","","","","Clears the map, removing all elements.","","","","Returns <code>true</code> if any range in the map covers the specified …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets an iterator over all the maximally-sized ranges …","Returns a reference to the value corresponding to the …","Returns the range-value pair (as a pair of references) …","Insert a pair of key range and value into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns true if the map contains no elements.","Gets an iterator over all pairs of key range and value, …","Returns the number of elements in the map.","Makes a new empty <code>RangeInclusiveMap</code>.","Makes a new empty <code>RangeInclusiveMap</code>, specifying successor …","","","","","Gets an iterator over all the stored ranges that are …","Returns <code>true</code> if any range in the map completely or …","","Removes a range from the map, if all or any of it was …","","","","","","","","","","","","","","","","","","","An iterator over all ranges not covered by a …","An owning iterator over the ranges of a <code>RangeInclusiveSet</code>.","An iterator over the ranges of a <code>RangeInclusiveSet</code>.","An iterator over all stored ranges partially or completely …","A set whose items are stored as ranges bounded inclusively …","","","","","","","","","","","Clears the set, removing all elements.","","","","Returns <code>true</code> if any range in the set covers the specified …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets an iterator over all the maximally-sized ranges …","Returns a reference to the range covering the given key, …","Insert a range into the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns true if the set contains no elements.","Gets an ordered iterator over all ranges, ordered by range.","Returns the number of elements in the set.","Makes a new empty <code>RangeInclusiveSet</code>.","Makes a new empty <code>RangeInclusiveSet</code>, specifying successor …","","","","","Gets an iterator over all the stored ranges that are …","Returns <code>true</code> if any range in the set completely or …","","Removes a range from the set, if all or any of it was …","","","","","","","","","","","","","","","","","","","An iterator over all ranges not covered by a <code>RangeMap</code>.","An owning iterator over the entries of a <code>RangeMap</code>, ordered …","An iterator over the entries of a <code>RangeMap</code>, ordered by key …","An iterator over all stored ranges partially or completely …","A map whose keys are stored as (half-open) ranges bounded …","","","","","","","","","","","Clears the map, removing all elements.","","","","Returns <code>true</code> if any range in the map covers the specified …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets an iterator over all the maximally-sized ranges …","Returns a reference to the value corresponding to the …","Returns the range-value pair (as a pair of references) …","Insert a pair of key range and value into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns true if the map contains no elements.","Gets an iterator over all pairs of key range and value, …","Returns the number of elements in the map.","Makes a new empty <code>RangeMap</code>.","","","","","Gets an iterator over all the stored ranges that are …","Returns <code>true</code> if any range in the map completely or …","","Removes a range from the map, if all or any of it was …","","","","","","","","","","","","","","","","","","","An iterator over all ranges not covered by a <code>RangeSet</code>.","An owning iterator over the ranges of a <code>RangeSet</code>.","An iterator over the ranges of a <code>RangeSet</code>.","An iterator over all stored ranges partially or completely …","A set whose items are stored as (half-open) ranges bounded …","","","","","","","","","","","Clears the set, removing all elements.","","","","Returns <code>true</code> if any range in the set covers the specified …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets an iterator over all the maximally-sized ranges …","Returns a reference to the range covering the given key, …","Insert a range into the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns true if the set contains no elements.","Gets an ordered iterator over all ranges, ordered by range.","Returns the number of elements in the set.","Makes a new empty <code>RangeSet</code>.","","","","","Gets an iterator over all the stored ranges that are …","Returns <code>true</code> if any range in the set completely or …","","Removes a range from the set, if all or any of it was …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,8,4,0,0,0,0,8,4,0,0,0,0,0,17,19,15,20,5,17,19,15,20,5,5,5,5,5,5,5,5,5,5,17,19,15,20,5,5,5,5,5,5,17,19,15,20,5,17,19,15,20,5,5,5,5,5,5,17,19,15,20,5,5,5,5,17,19,5,17,19,15,20,5,17,19,15,20,5,17,19,15,20,5,0,0,0,0,0,26,27,25,28,24,26,27,25,28,24,24,24,24,24,24,24,24,24,24,26,27,25,28,24,24,24,24,24,26,27,25,28,24,26,27,25,28,24,24,24,24,24,24,26,27,25,28,24,24,24,24,26,27,24,26,27,25,28,24,26,27,25,28,24,26,27,25,28,24,0,0,0,0,0,32,33,31,34,29,32,33,31,34,29,29,29,29,29,29,29,29,29,29,32,33,31,34,29,29,29,29,29,29,32,33,31,34,29,32,33,31,34,29,29,29,29,29,32,33,31,34,29,29,29,29,32,33,29,32,33,31,34,29,32,33,31,34,29,32,33,31,34,29,0,0,0,0,0,37,38,36,39,35,37,38,36,39,35,35,35,35,35,35,35,35,35,35,37,38,36,39,35,35,35,35,35,37,38,36,39,35,37,38,36,39,35,35,35,35,35,37,38,36,39,35,35,35,35,37,38,35,37,38,36,39,35,37,38,36,39,35,37,38,36,39,35],"f":[0,0,0,0,0,0,[[]],[[]],0,0,0,0,[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]]]],[[[5,[2,2,2]]],[[5,[2,2,2]]]],[[]],[[[5,[1,1]],[5,[1,1]]],6],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]],[0,[1,2]]],7],[[],[[5,[[0,[1,2,8]],[0,[3,2]],[0,[1,2,8]]]]]],[[[5,[9,9]],[5,[9,9]]],7],[[[5,[[0,[1,2,8]],[0,[3,2]]]],10]],[[[5,[[0,[1,2,8,11]],[0,[3,2,11]]]],12],13],[[]],[[]],[[]],[[]],[[]],[10,[[5,[[0,[1,2,8]],[0,[3,2]]]]]],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]],[14,[[0,[1,2]]]]],[[15,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]]]],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]],[0,[1,2]]],[[16,[[0,[3,2]]]]]],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]],[0,[1,2]]],16],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]],[14,[[0,[1,2]]]],[0,[3,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]]],7],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]]],[[17,[[0,[1,2]],[0,[3,2]]]]]],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]]],18],[[],[[5,[[0,[1,2,8]],[0,[3,2]],[0,[1,2,8]]]]]],[[],[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]]]],[17,16],[19,16],[[[15,[[0,[1,2]],[4,[[0,[1,2]]]]]]],16],[[[20,[[0,[1,2]]]]],16],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]],[14,[[0,[1,2]]]]],[[20,[[0,[1,2]],[0,[3,2]]]]]],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]],[14,[[0,[1,2]]]]],7],[[[5,[21,21]],[5,[21,21]]],[[16,[6]]]],[[[5,[[0,[1,2]],[0,[3,2]],[4,[[0,[1,2]]]]]],[14,[[0,[1,2]]]]]],[17],[19],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]]]],[[[24,[2,2]]],[[24,[2,2]]]],[[]],[[[24,[1,1]],[24,[1,1]]],6],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]],[0,[1,2]]],7],[[],[[24,[[0,[1,2,8]],[0,[1,2,8]]]]]],[[[24,[9,9]],[24,[9,9]]],7],[[[24,[[0,[1,2,8]]]],10]],[[[24,[[0,[1,2,8,11]]]],12],13],[[]],[[]],[[]],[[]],[[]],[10,[[24,[[0,[1,2,8]]]]]],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]],[14,[[0,[1,2]]]]],[[25,[[0,[1,2]],[4,[[0,[1,2]]]]]]]],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]],[0,[1,2]]],[[16,[[14,[[0,[1,2]]]]]]]],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]],[14,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]]],7],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]]],[[26,[[0,[1,2]]]]]],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]]],18],[[],[[24,[[0,[1,2,8]],[0,[1,2,8]]]]]],[[],[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]]]],[26,[[16,[14]]]],[27,[[16,[14]]]],[[[25,[[0,[1,2]],[4,[[0,[1,2]]]]]]],16],[[[28,[[0,[1,2]]]]],16],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]],[14,[[0,[1,2]]]]],[[28,[[0,[1,2]]]]]],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]],[14,[[0,[1,2]]]]],7],[[[24,[21,21]],[24,[21,21]]],[[16,[6]]]],[[[24,[[0,[1,2]],[4,[[0,[1,2]]]]]],[14,[[0,[1,2]]]]]],[26],[27],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[29,[[0,[1,2]],[0,[3,2]]]]]],[[[29,[2,2]]],[[29,[2,2]]]],[[]],[[[29,[1,1]],[29,[1,1]]],6],[[[29,[[0,[1,2]],[0,[3,2]]]],[0,[1,2]]],7],[[],[[29,[[0,[1,2]],[0,[3,2]]]]]],[[[29,[9,9]],[29,[9,9]]],7],[[[29,[[0,[1,2]],[0,[3,2]]]],10]],[[[29,[[0,[1,2,11]],[0,[3,2,11]]]],12],13],[[]],[[]],[[]],[[]],[[]],[10,[[29,[[0,[1,2]],[0,[3,2]]]]]],[[[29,[[0,[1,2]],[0,[3,2]]]],[30,[[0,[1,2]]]]],[[31,[[0,[1,2]],[0,[3,2]]]]]],[[[29,[[0,[1,2]],[0,[3,2]]]],[0,[1,2]]],[[16,[[0,[3,2]]]]]],[[[29,[[0,[1,2]],[0,[3,2]]]],[0,[1,2]]],16],[[[29,[[0,[1,2]],[0,[3,2]]]],[30,[[0,[1,2]]]],[0,[3,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29],[[[29,[[0,[1,2]],[0,[3,2]]]]],7],[[[29,[[0,[1,2]],[0,[3,2]]]]],[[32,[[0,[1,2]],[0,[3,2]]]]]],[[[29,[[0,[1,2]],[0,[3,2]]]]],18],[[],[[29,[[0,[1,2]],[0,[3,2]]]]]],[32,16],[33,16],[[[31,[[0,[1,2]]]]],16],[[[34,[[0,[1,2]]]]],16],[[[29,[[0,[1,2]],[0,[3,2]]]],[30,[[0,[1,2]]]]],[[34,[[0,[1,2]],[0,[3,2]]]]]],[[[29,[[0,[1,2]],[0,[3,2]]]],[30,[[0,[1,2]]]]],7],[[[29,[21,21]],[29,[21,21]]],[[16,[6]]]],[[[29,[[0,[1,2]],[0,[3,2]]]],[30,[[0,[1,2]]]]]],[32],[33],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[[0,[1,2]]]]]],[[[35,[2]]],[[35,[2]]]],[[]],[[[35,[1]],[35,[1]]],6],[[[35,[[0,[1,2]]]],[0,[1,2]]],7],[[],[[35,[[0,[1,2]]]]]],[[[35,[9]],[35,[9]]],7],[[[35,[[0,[1,2]]]],10]],[[[35,[[0,[1,2,11]]]],12],13],[[]],[[]],[[]],[[]],[[]],[10,[[35,[[0,[1,2]]]]]],[[[35,[[0,[1,2]]]],[30,[[0,[1,2]]]]],[[36,[[0,[1,2]]]]]],[[[35,[[0,[1,2]]]],[0,[1,2]]],[[16,[[30,[[0,[1,2]]]]]]]],[[[35,[[0,[1,2]]]],[30,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35],[[[35,[[0,[1,2]]]]],7],[[[35,[[0,[1,2]]]]],[[37,[[0,[1,2]]]]]],[[[35,[[0,[1,2]]]]],18],[[],[[35,[[0,[1,2]]]]]],[37,[[16,[30]]]],[38,[[16,[30]]]],[[[36,[[0,[1,2]]]]],16],[[[39,[[0,[1,2]]]]],16],[[[35,[[0,[1,2]]]],[30,[[0,[1,2]]]]],[[39,[[0,[1,2]]]]]],[[[35,[[0,[1,2]]]],[30,[[0,[1,2]]]]],7],[[[35,[21]],[35,[21]]],[[16,[6]]]],[[[35,[[0,[1,2]]]],[30,[[0,[1,2]]]]]],[37],[38],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23]],"c":[],"p":[[8,"Ord"],[8,"Clone"],[8,"Eq"],[8,"StepFns"],[3,"RangeInclusiveMap"],[4,"Ordering"],[15,"bool"],[8,"StepLite"],[8,"PartialEq"],[8,"IntoIterator"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"RangeInclusive"],[3,"Gaps"],[4,"Option"],[3,"Iter"],[15,"usize"],[3,"IntoIter"],[3,"Overlapping"],[8,"PartialOrd"],[4,"Result"],[3,"TypeId"],[3,"RangeInclusiveSet"],[3,"Gaps"],[3,"Iter"],[3,"IntoIter"],[3,"Overlapping"],[3,"RangeMap"],[3,"Range"],[3,"Gaps"],[3,"Iter"],[3,"IntoIter"],[3,"Overlapping"],[3,"RangeSet"],[3,"Gaps"],[3,"Iter"],[3,"IntoIter"],[3,"Overlapping"]]},\
"rustc_hash":{"doc":"Fast, non-cryptographic hash used by rustc and Firefox.","t":"DLLLLLLLLLLLLLLL","n":["FxHasher","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","write","write_u16","write_u32","write_u64","write_u8","write_usize"],"q":[[0,"rustc_hash"]],"d":["A speedy hash algorithm for use within rustc. The hashmap …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[],1],[1,2],[[]],[[]],[[],3],[[],3],[[],4],[[1,[6,[5]]]],[[1,7]],[[1,8]],[[1,2]],[[1,5]],[[1,9]]],"c":[],"p":[[3,"FxHasher"],[15,"u64"],[4,"Result"],[3,"TypeId"],[15,"u8"],[15,"slice"],[15,"u16"],[15,"u32"],[15,"usize"]]},\
"rustybuzz":{"doc":"A complete harfbuzz shaping algorithm port to Rust.","t":"NENEDDSSDDDNDNNNSSSSNDDDNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLFMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLMMMMMMRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR","n":["BottomToTop","BufferClusterLevel","Characters","Direction","Face","Feature","GLYPH_EXTENTS","GLYPH_FLAGS","GlyphBuffer","GlyphInfo","GlyphPosition","Invalid","Language","LeftToRight","MonotoneCharacters","MonotoneGraphemes","NO_ADVANCES","NO_CLUSTERS","NO_GLYPH_NAMES","NO_POSITIONS","RightToLeft","Script","SerializeFlags","Tag","TopToBottom","UnicodeBuffer","Variation","add","all","as_mut","as_ref","as_str","as_u32","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cluster","cluster_level","cmp","cmp","cmp","complement","contains","default","default","default","default","default","default","deref","deref_mut","difference","direction","empty","end","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_bytes","from_bytes_lossy","from_face","from_iso15924_tag","from_iter","from_slice","from_str","from_str","from_str","from_str","from_str","glyph_id","glyph_infos","glyph_positions","guess_segment_properties","hash","hash","hash","hash","hash","hash","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_empty","is_empty","is_empty","is_null","is_valid_bit_pattern","is_valid_bit_pattern","language","len","len","new","new","not","parse","partial_cmp","partial_cmp","partial_cmp","push_str","remove","reset_clusters","script","script","serialize","set","set_cluster_level","set_direction","set_language","set_pixels_per_em","set_points_per_em","set_script","set_variations","shape","start","sub","sub_assign","symmetric_difference","tag","tag","tag","to_bytes","to_chars","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttf_parser","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","units_per_em","unsafe_to_break","value","value","x_advance","x_offset","y_advance","y_offset","ADLAM","AHOM","ANATOLIAN_HIEROGLYPHS","ARABIC","ARMENIAN","AVESTAN","BALINESE","BAMUM","BASSA_VAH","BATAK","BENGALI","BHAIKSUKI","BOPOMOFO","BRAHMI","BRAILLE","BUGINESE","BUHID","CANADIAN_SYLLABICS","CARIAN","CAUCASIAN_ALBANIAN","CHAKMA","CHAM","CHEROKEE","CHORASMIAN","COMMON","COPTIC","CUNEIFORM","CYPRIOT","CYRILLIC","DESERET","DEVANAGARI","DIVES_AKURU","DOGRA","DUPLOYAN","EGYPTIAN_HIEROGLYPHS","ELBASAN","ELYMAIC","ETHIOPIC","GEORGIAN","GLAGOLITIC","GOTHIC","GRANTHA","GREEK","GUJARATI","GUNJALA_GONDI","GURMUKHI","HAN","HANGUL","HANIFI_ROHINGYA","HANUNOO","HATRAN","HEBREW","HIRAGANA","IMPERIAL_ARAMAIC","INHERITED","INSCRIPTIONAL_PAHLAVI","INSCRIPTIONAL_PARTHIAN","JAVANESE","KAITHI","KANNADA","KATAKANA","KAYAH_LI","KHAROSHTHI","KHITAN_SMALL_SCRIPT","KHMER","KHOJKI","KHUDAWADI","LAO","LATIN","LEPCHA","LIMBU","LINEAR_A","LINEAR_B","LISU","LYCIAN","LYDIAN","MAHAJANI","MAKASAR","MALAYALAM","MANDAIC","MANICHAEAN","MARCHEN","MASARAM_GONDI","MEDEFAIDRIN","MEETEI_MAYEK","MENDE_KIKAKUI","MEROITIC_CURSIVE","MEROITIC_HIEROGLYPHS","MIAO","MODI","MONGOLIAN","MRO","MULTANI","MYANMAR","MYANMAR_ZAWGYI","NABATAEAN","NANDINAGARI","NEWA","NEW_TAI_LUE","NKO","NUSHU","NYIAKENG_PUACHUE_HMONG","OGHAM","OLD_HUNGARIAN","OLD_ITALIC","OLD_NORTH_ARABIAN","OLD_PERMIC","OLD_PERSIAN","OLD_SOGDIAN","OLD_SOUTH_ARABIAN","OLD_TURKIC","OL_CHIKI","ORIYA","OSAGE","OSMANYA","PAHAWH_HMONG","PALMYRENE","PAU_CIN_HAU","PHAGS_PA","PHOENICIAN","PSALTER_PAHLAVI","REJANG","RUNIC","SAMARITAN","SAURASHTRA","SHARADA","SHAVIAN","SIDDHAM","SIGNWRITING","SINHALA","SOGDIAN","SORA_SOMPENG","SOYOMBO","SUNDANESE","SYLOTI_NAGRI","SYRIAC","TAGALOG","TAGBANWA","TAI_LE","TAI_THAM","TAI_VIET","TAKRI","TAMIL","TANGUT","TELUGU","THAANA","THAI","TIBETAN","TIFINAGH","TIRHUTA","UGARITIC","UNKNOWN","VAI","WANCHO","WARANG_CITI","YEZIDI","YI","ZANABAZAR_SQUARE"],"q":[[0,"rustybuzz"],[297,"rustybuzz::script"]],"d":["Text is set vertically from bottom to top.","A cluster level.","","Defines the direction in which text is to be read.","A font face handle.","A feature tag with an accompanying range specifying on …","Serialize glyph extents.","Serialize glyph flags.","A buffer that contains the results of the shaping process.","A glyph info.","Holds the positions of the glyph in both horizontal and …","Initial, unset direction.","A script language.","Text is set horizontally from left to right.","","","Do not serialize glyph advances, glyph offsets will …","Do not serialize glyph cluster.","Do no serialize glyph name.","Do not serialize glyph position information.","Text is set horizontally from right to left.","A text script.","Flags used for serialization with a <code>BufferSerializer</code>.","A 4-byte tag.","Text is set vertically from top to bottom.","A buffer that contains an input string ready for shaping.","A font variation.","Appends a character to a buffer with the given cluster …","Returns the set containing all flags.","","","Returns the language as a string.","Returns tag value as <code>u32</code> number.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","Clear the contents of the buffer.","Clears the content of the glyph buffer and returns an empty","","","","","","","","","","","","","","","","","","","","","","","An index to the start of the grapheme cluster in the …","Retrieve the cluster level of the buffer.","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the <code>Buffer</code>’s text direction.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Creates a <code>Tag</code> from bytes.","Creates a <code>Tag</code> from bytes.","Creates a new <code>Face</code> from <code>ttf_parser::Face</code>.","Converts an ISO 15924 script tag to a corresponding <code>Script</code>.","","Creates a new <code>Face</code> from data.","","","","Parses a <code>Feature</code> form a string.","","A selected glyph.","Get the glyph infos.","Get the glyph positions.","Guess the segment properties (direction, language, script) …","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if the buffer contains no elements.","Returns <code>true</code> if the buffer contains no elements.","Returns <code>true</code> if no flags are currently stored.","Checks if tag is null / <code>[0, 0, 0, 0]</code>.","","","Get the buffer language.","Returns the length of the data of the buffer.","Returns the length of the data of the buffer.","Create a new <code>UnicodeBuffer</code>.","Create a new <code>Feature</code> struct.","Returns the complement of this set of flags.","","","","","Pushes a string to a buffer.","Removes the specified flags in-place.","Resets clusters.","Predefined scripts.","Get the ISO15924 script tag.","Converts the glyph buffer content into a string.","Inserts or removes the specified flags depending on the …","Set the cluster level of the buffer.","Set the text direction of the <code>Buffer</code>’s contents.","Set the buffer language.","Sets pixels per EM.","Sets point size per EM.","Set the script from an ISO15924 tag.","Sets font variations.","Shapes the buffer content using provided font and features.","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns script’s tag.","","","Returns tag as 4-element byte array.","Returns tag as 4-element byte array.","","","","","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns face’s units per EM.","Indicates that if input text is broken at the beginning of …","","","How much the line advances after drawing this glyph when …","How much the glyph moves on the X-axis before drawing it, …","How much the line advances after drawing this glyph when …","How much the glyph moves on the Y-axis before drawing it, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[15,0,14,0,0,0,4,4,0,0,0,15,0,15,14,14,4,4,4,4,15,0,0,0,15,0,0,1,4,5,5,7,9,4,4,4,4,4,4,4,1,11,12,13,14,4,15,7,16,17,18,5,9,1,11,12,13,14,4,15,7,16,17,18,5,9,1,11,12,13,14,4,15,7,16,17,18,5,9,12,13,14,4,15,7,16,17,18,5,9,13,1,4,16,9,4,4,1,12,13,14,4,15,5,5,4,1,4,17,14,4,15,7,16,17,18,9,14,4,15,7,16,9,4,1,11,12,13,14,4,4,4,4,4,15,7,16,17,18,9,9,1,11,12,13,14,4,15,7,16,17,18,5,9,4,4,4,9,9,5,16,4,5,15,7,16,17,18,13,11,11,1,14,4,15,7,16,9,4,4,4,1,11,12,13,14,4,15,7,16,17,18,5,9,4,1,11,4,9,12,13,1,1,11,1,17,4,9,4,16,9,1,4,1,0,1,11,4,1,1,1,5,5,1,5,0,17,4,4,4,16,17,18,9,9,12,13,14,4,15,7,16,17,18,5,9,9,4,1,11,12,13,14,4,15,7,16,17,18,5,9,1,11,12,13,14,4,15,7,16,17,18,5,9,0,1,11,12,13,14,4,15,7,16,17,18,5,9,4,5,13,17,18,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3]],[[],4],[5,6],[5,6],[7,8],[9,3],[[4,4],4],[[4,4]],[[4,4],4],[[4,4]],[4,10],[[4,4],4],[[4,4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[11,1],[12,12],[13,13],[14,14],[4,4],[15,15],[7,7],[16,16],[17,17],[18,18],[5,5],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,14],[[4,4],19],[[16,16],19],[[9,9],19],[4,4],[[4,4],20],[[],1],[[],12],[[],13],[[],14],[[],4],[[],15],[5],[5],[[4,4],4],[1,15],[[],4],0,[[14,14],20],[[4,4],20],[[15,15],20],[[7,7],20],[[16,16],20],[[17,17],20],[[18,18],20],[[9,9],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[4,21]],[[1,22],23],[[11,22],23],[[12,22],23],[[13,22],23],[[14,22],23],[[4,22],23],[[4,22],23],[[4,22],23],[[4,22],23],[[4,22],23],[[15,22],23],[[7,22],23],[[16,22],23],[[17,22],23],[[18,22],23],[[9,22],[[25,[24]]]],[[9,22],[[25,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,[[26,[4]]]],[10,4],[10,4],[[[27,[10]]],9],[[[28,[10]]],9],[6,5],[9,[[26,[16]]]],[21,4],[[[28,[10]],3],[[26,[5]]]],[8,[[25,[15]]]],[8,[[25,[7]]]],[8,[[25,[16]]]],[8,[[25,[17]]]],[8,[[25,[18]]]],0,[11,[[28,[13]]]],[11,[[28,[12]]]],[1],[[14,29]],[[4,29]],[[15,29]],[[7,29]],[[16,29]],[[9,29]],[[4,4]],[[4,4],4],[[4,4],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,20],[1,20],[11,20],[4,20],[9,20],[[],20],[[],20],[1,[[26,[7]]]],[1,30],[11,30],[[],1],[[9,3,[31,[30]]],17],[4,4],[[[28,[10]]],[[26,[9]]]],[[4,4],[[26,[19]]]],[[16,16],[[26,[19]]]],[[9,9],[[26,[19]]]],[[1,8]],[[4,4]],[1],0,[1,16],[[11,5,4],32],[[4,4,20]],[[1,14]],[[1,15]],[[1,7]],[[5,26]],[[5,[26,[33]]]],[[1,16]],[[5,[28,[18]]]],[[5,[28,[17]],1],11],0,[[4,4],4],[[4,4]],[[4,4],4],[16,9],0,0,[9,[[27,[10]]]],[9,[[27,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],32],[[4,4]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[4,4],4],[5,35],[13,20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"UnicodeBuffer"],[15,"char"],[15,"u32"],[3,"SerializeFlags"],[3,"Face"],[3,"Face"],[3,"Language"],[15,"str"],[3,"Tag"],[15,"u8"],[3,"GlyphBuffer"],[3,"GlyphPosition"],[3,"GlyphInfo"],[4,"BufferClusterLevel"],[4,"Direction"],[3,"Script"],[3,"Feature"],[3,"Variation"],[4,"Ordering"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[4,"Option"],[15,"array"],[15,"slice"],[8,"Hasher"],[15,"usize"],[8,"RangeBounds"],[3,"String"],[15,"f32"],[3,"TypeId"],[15,"i32"]]},\
"slotmap":{"doc":"slotmap","t":"DDDIDDDLALLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLALLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLALLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDEDDDDNDDNDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DefaultKey","DenseSlotMap","HopSlotMap","Key","KeyData","SecondaryMap","SlotMap","as_ffi","basic","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","data","data","default","default","default","default","default","default","dense","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_ffi","from_iter","hash","hash","hop","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_null","new_key_type","null","partial_cmp","partial_cmp","secondary","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Drain","IntoIter","Iter","IterMut","Keys","SlotMap","Values","ValuesMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contains_key","drain","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","get_disjoint_mut","get_disjoint_unchecked_mut","get_mut","get_unchecked","get_unchecked_mut","insert","insert_with_key","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","keys","len","new","next","next","next","next","next","next","next","remove","reserve","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_key","with_key","DenseSlotMap","Drain","IntoIter","Iter","IterMut","Keys","Values","ValuesMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contains_key","drain","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","get_disjoint_mut","get_disjoint_unchecked_mut","get_mut","get_unchecked","get_unchecked_mut","insert","insert_with_key","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","keys","len","new","next","next","next","next","next","next","next","remove","reserve","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_key","with_key","Drain","HopSlotMap","IntoIter","Iter","IterMut","Keys","Values","ValuesMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contains_key","drain","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","get_disjoint_mut","get_disjoint_unchecked_mut","get_mut","get_unchecked","get_unchecked_mut","insert","insert_with_key","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","keys","len","new","next","next","next","next","next","next","next","remove","reserve","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_key","with_key","Drain","Entry","IntoIter","Iter","IterMut","Keys","Occupied","OccupiedEntry","SecondaryMap","Vacant","VacantEntry","Values","ValuesMut","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","contains_key","drain","drop","entry","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","get","get_disjoint_mut","get_disjoint_unchecked_mut","get_mut","get_mut","get_unchecked","get_unchecked_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","new","next","next","next","next","next","next","next","or_default","or_insert","or_insert_with","remove","remove","remove_entry","retain","set_capacity","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity"],"q":[[0,"slotmap"],[123,"slotmap::basic"],[247,"slotmap::dense"],[371,"slotmap::hop"],[495,"slotmap::secondary"]],"d":["The default slot map key type.","Dense slot map, storage with stable unique keys.","Hop slot map, storage with stable unique keys.","Key used to access stored values in a slot map.","The actual data stored in a <code>Key</code>.","Secondary map, associate data with previously stored …","Slot map, storage with stable unique keys.","Returns the key data as a 64-bit integer. No guarantees …","Contains the slot map implementation.","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the <code>KeyData</code> stored in this key.","","","","","","","","Contains the dense slot map implementation.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Iff <code>value</code> is a value received from <code>k.as_ffi()</code>, returns a …","","","","Contains the faster iteration, slower insertion/removal …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Checks if a key is null. There is only a single null key, …","A helper macro to create new key types. If you use a new …","Creates a new key that is always invalid and distinct from …","","","Contains the secondary map implementation.","","","","","","","","","","","","","","","","","","","","","","","","","A draining iterator for <code>SlotMap</code>.","An iterator that moves key-value pairs out of a <code>SlotMap</code>.","An iterator over the key-value pairs in a <code>SlotMap</code>.","A mutable iterator over the key-value pairs in a <code>SlotMap</code>.","An iterator over the keys in a <code>SlotMap</code>.","Slot map, storage with stable unique keys.","An iterator over the values in a <code>SlotMap</code>.","A mutable iterator over the values in a <code>SlotMap</code>.","","","","","","","","","","","","","","","Returns the number of elements the <code>SlotMap</code> can hold without","Clears the slot map. Keeps the allocated memory for reuse.","","","","","","","","","Returns <code>true</code> if the slot map contains <code>key</code>.","Clears the slot map, returning all key-value pairs in …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns mutable references to the values corresponding to …","Returns mutable references to the values corresponding to …","Returns a mutable reference to the value corresponding to …","Returns a reference to the value corresponding to the key …","Returns a mutable reference to the value corresponding to …","Inserts a value into the slot map. Returns a unique key …","Inserts a value given by <code>f</code> into the slot map. The key …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns if the slot map is empty.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the slot map.","Constructs a new, empty <code>SlotMap</code>.","","","","","","","","Removes a key from the slot map, returning the value at …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary …","Creates an empty <code>SlotMap</code> with the given capacity.","Creates an empty <code>SlotMap</code> with the given capacity and a …","Constructs a new, empty <code>SlotMap</code> with a custom key type.","Dense slot map, storage with stable unique keys.","A draining iterator for <code>DenseSlotMap</code>.","An iterator that moves key-value pairs out of a …","An iterator over the key-value pairs in a <code>DenseSlotMap</code>.","A mutable iterator over the key-value pairs in a …","An iterator over the keys in a <code>DenseSlotMap</code>.","An iterator over the values in a <code>DenseSlotMap</code>.","A mutable iterator over the values in a <code>DenseSlotMap</code>.","","","","","","","","","","","","","","","Returns the number of elements the <code>DenseSlotMap</code> can hold …","Clears the slot map. Keeps the allocated memory for reuse.","","","","","","","","","Returns <code>true</code> if the slot map contains <code>key</code>.","Clears the slot map, returning all key-value pairs in …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns mutable references to the values corresponding to …","Returns mutable references to the values corresponding to …","Returns a mutable reference to the value corresponding to …","Returns a reference to the value corresponding to the key …","Returns a mutable reference to the value corresponding to …","Inserts a value into the slot map. Returns a unique key …","Inserts a value given by <code>f</code> into the slot map. The key …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns if the slot map is empty.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the slot map.","Construct a new, empty <code>DenseSlotMap</code>.","","","","","","","","Removes a key from the slot map, returning the value at …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary …","Creates an empty <code>DenseSlotMap</code> with the given capacity.","Creates an empty <code>DenseSlotMap</code> with the given capacity and …","Constructs a new, empty <code>DenseSlotMap</code> with a custom key …","A draining iterator for <code>HopSlotMap</code>.","Hop slot map, storage with stable unique keys.","An iterator that moves key-value pairs out of a <code>HopSlotMap</code>.","An iterator over the key-value pairs in a <code>HopSlotMap</code>.","A mutable iterator over the key-value pairs in a <code>HopSlotMap</code>…","An iterator over the keys in a <code>HopSlotMap</code>.","An iterator over the values in a <code>HopSlotMap</code>.","A mutable iterator over the values in a <code>HopSlotMap</code>.","","","","","","","","","","","","","","","Returns the number of elements the <code>HopSlotMap</code> can hold …","Clears the slot map. Keeps the allocated memory for reuse.","","","","","","","","","Returns <code>true</code> if the slot map contains <code>key</code>.","Clears the slot map, returning all key-value pairs in …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns mutable references to the values corresponding to …","Returns mutable references to the values corresponding to …","Returns a mutable reference to the value corresponding to …","Returns a reference to the value corresponding to the key …","Returns a mutable reference to the value corresponding to …","Inserts a value into the slot map. Returns a unique key …","Inserts a value given by <code>f</code> into the slot map. The key …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns if the slot map is empty.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the slot map.","Constructs a new, empty <code>HopSlotMap</code>.","","","","","","","","Removes a key from the slot map, returning the value at …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary …","Creates an empty <code>HopSlotMap</code> with the given capacity.","Creates an empty <code>HopSlotMap</code> with the given capacity and a …","Constructs a new, empty <code>HopSlotMap</code> with a custom key type.","A draining iterator for <code>SecondaryMap</code>.","A view into a single entry in a <code>SecondaryMap</code>, which may …","An iterator that moves key-value pairs out of a …","An iterator over the key-value pairs in a <code>SecondaryMap</code>.","A mutable iterator over the key-value pairs in a …","An iterator over the keys in a <code>SecondaryMap</code>.","An occupied entry.","A view into a occupied entry in a <code>SecondaryMap</code>. It is part …","Secondary map, associate data with previously stored …","A vacant entry.","A view into a vacant entry in a <code>SecondaryMap</code>. It is part …","An iterator over the values in a <code>SecondaryMap</code>.","A mutable iterator over the values in a <code>SecondaryMap</code>.","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the <code>SecondaryMap</code> can hold …","Clears the secondary map. Keeps the allocated memory for …","Returns <code>true</code> if the secondary map contains <code>key</code>.","Clears the slot map, returning all key-value pairs in …","","Gets the given key’s corresponding <code>Entry</code> in the map for …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns mutable references to the values corresponding to …","Returns mutable references to the values corresponding to …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Returns a reference to the value corresponding to the key …","Returns a mutable reference to the value corresponding to …","Inserts a value into the secondary map at the given <code>key</code>. …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Returns if the secondary map is empty.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Returns this entry’s key.","Gets the key that would be used when inserting a value …","Returns this entry’s key.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the secondary map.","Constructs a new, empty <code>SecondaryMap</code>.","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the secondary map, returning the value …","Takes the value out of the entry, and returns it.","Removes the entry from the slot map and returns the key …","Retains only the elements specified by the predicate.","Sets the capacity of the <code>SecondaryMap</code> to <code>new_capacity</code>, if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary …","Creates an empty <code>SecondaryMap</code> with the given capacity of …"],"i":[0,0,0,0,0,0,0,1,0,5,6,7,8,1,9,5,6,7,8,1,9,5,6,7,8,1,9,5,6,7,8,1,9,1,9,4,9,5,6,7,8,1,9,0,8,1,9,8,8,5,6,7,8,1,9,5,6,7,8,1,9,9,1,8,1,9,0,5,6,7,8,5,6,7,8,5,6,7,8,1,9,5,5,5,6,6,6,7,7,7,8,8,8,4,0,4,1,9,0,5,6,7,8,1,9,5,6,7,8,1,9,5,6,7,8,1,9,5,6,7,8,1,9,0,0,0,0,0,0,0,0,27,23,24,28,25,26,29,27,23,24,28,25,26,29,5,5,23,24,25,26,23,24,25,26,5,5,27,27,23,24,28,25,26,29,27,23,24,28,25,26,29,5,5,5,5,5,5,5,5,27,23,24,28,25,26,29,27,23,24,28,25,26,29,5,5,5,5,5,5,27,23,24,28,25,26,29,5,5,5,27,23,24,28,25,26,29,23,24,25,26,27,23,24,28,25,26,29,27,23,24,28,25,26,29,27,23,24,28,25,26,29,5,5,5,5,5,0,0,0,0,0,0,0,0,37,33,34,38,35,36,39,37,33,34,38,35,36,39,6,6,33,34,35,36,33,34,35,36,6,6,37,37,33,34,38,35,36,39,37,33,34,38,35,36,39,6,6,6,6,6,6,6,6,37,33,34,38,35,36,39,37,33,34,38,35,36,39,6,6,6,6,6,6,37,33,34,38,35,36,39,6,6,6,37,33,34,38,35,36,39,33,34,35,36,37,33,34,38,35,36,39,37,33,34,38,35,36,39,37,33,34,38,35,36,39,6,6,6,6,6,0,0,0,0,0,0,0,0,44,40,41,45,42,43,46,44,40,41,45,42,43,46,7,7,40,41,42,43,40,41,42,43,7,7,44,44,40,41,45,42,43,46,44,40,41,45,42,43,46,7,7,7,7,7,7,7,7,44,40,41,45,42,43,46,44,40,41,45,42,43,46,7,7,7,7,7,7,44,40,41,45,42,43,46,7,7,7,44,40,41,45,42,43,46,40,41,42,43,44,40,41,45,42,43,46,44,40,41,45,42,43,46,44,40,41,45,42,43,46,7,7,7,7,7,0,0,0,0,0,0,47,0,0,47,0,0,0,47,49,50,47,48,51,52,53,54,55,56,49,50,47,48,51,52,53,54,55,56,8,8,8,8,48,8,49,50,47,48,51,52,53,54,55,56,49,50,47,48,51,52,53,54,55,56,8,49,8,8,8,49,8,8,8,49,50,49,50,47,48,51,52,53,54,55,56,48,51,52,53,54,55,56,49,8,8,8,49,50,47,8,8,8,48,51,52,53,54,55,56,47,47,47,8,49,49,8,8,48,51,52,53,54,55,56,49,50,47,48,51,52,53,54,55,56,49,50,47,48,51,52,53,54,55,56,49,50,47,48,51,52,53,54,55,56,8,8,8],"f":[0,0,0,0,0,0,0,[1,2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[[0,[3,4]],3]]],[[5,[[0,[3,4]],3]]]],[[[6,[[0,[3,4]],3]]],[[6,[[0,[3,4]],3]]]],[[[7,[[0,[3,4]],3]]],[[7,[[0,[3,4]],3]]]],[[[8,[[0,[3,4]],3]]],[[8,[[0,[3,4]],3]]]],[1,1],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],10],[[9,9],10],[[],1],[9,1],[[],[[5,[4]]]],[[],[[6,[4]]]],[[],[[7,[4]]]],[[],[[8,[4]]]],[[],1],[[],9],0,[[[8,[4,11]],[8,[4,11]]],12],[[1,1],12],[[9,9],12],[[[8,[4,13]],14]],[[[8,[4]],14]],[[[5,[[0,[15,4]],15]],16],17],[[[6,[[0,[15,4]],15]],16],17],[[[7,[[0,[15,4]],15]],16],17],[[[8,[[0,[15,4]],15]],16],17],[[1,16],17],[[9,16],17],[[]],[[]],[[]],[[]],[[]],[1,9],[[]],[2,1],[14,[[8,[4]]]],[[1,18]],[[9,18]],0,[[[5,[4]],4]],[[[6,[4]],4]],[[[7,[4]],4]],[[[8,[4]],4]],[[[5,[4]],4]],[[[6,[4]],4]],[[[7,[4]],4]],[[[8,[4]],4]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[4]]]],[[[5,[4]]]],[[[5,[4]]]],[[[6,[4]]]],[[[6,[4]]]],[[[6,[4]]]],[[[7,[4]]]],[[[7,[4]]]],[[[7,[4]]]],[[[8,[4]]]],[[[8,[4]]]],[[[8,[4]]]],[[],12],0,[[]],[[1,1],[[19,[10]]]],[[9,9],[[19,[10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[4]]],22],[[[5,[4]]]],[[[23,[[0,[3,4]],3]]],[[23,[[0,[3,4]],3]]]],[[[24,[[0,[3,4]],3]]],[[24,[[0,[3,4]],3]]]],[[[25,[[0,[3,4]],3]]],[[25,[[0,[3,4]],3]]]],[[[26,[[0,[3,4]],3]]],[[26,[[0,[3,4]],3]]]],[[]],[[]],[[]],[[]],[[[5,[4]],4],12],[[[5,[4]]],[[27,[4]]]],[[[27,[4]]]],[[[27,[[0,[15,4]],15]],16],17],[[[23,[[0,[15,4]],15]],16],17],[[[24,[[0,[15,4]],15]],16],17],[[[28,[[0,[15,4]],15]],16],17],[[[25,[[0,[15,4]],15]],16],17],[[[26,[[0,[15,4]],15]],16],17],[[[29,[[0,[15,4]],15]],16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[4]],4],19],[[[5,[4]],[30,[4]]],[[19,[30]]]],[[[5,[4]],[30,[4]]],30],[[[5,[4]],4],19],[[[5,[4]],4]],[[[5,[4]],4]],[[[5,[4]]],4],[[[5,[4]],31],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[4]]],12],[[[5,[4]]],[[24,[4]]]],[[[5,[4]]],[[28,[4]]]],[[[5,[4]]],[[25,[4]]]],[[[5,[4]]],22],[[],[[5,[9]]]],[[[27,[4]]],19],[[[23,[4]]],19],[[[24,[4]]],19],[[[28,[4]]],19],[[[25,[4]]],[[19,[4]]]],[[[26,[4]]],19],[[[29,[4]]],19],[[[5,[4]],4],19],[[[5,[4]],22]],[[[5,[4]],32]],[[[27,[4]]]],[[[23,[4]]]],[[[24,[4]]]],[[[28,[4]]]],[[[25,[4]]]],[[[26,[4]]]],[[[29,[4]]]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[[5,[4]]],[[26,[4]]]],[[[5,[4]]],[[29,[4]]]],[22,[[5,[9]]]],[22,[[5,[4]]]],[[],[[5,[4]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[4]]],22],[[[6,[4]]]],[[[33,[3,3]]],[[33,[3,3]]]],[[[34,[[0,[3,4]],3]]],[[34,[[0,[3,4]],3]]]],[[[35,[[0,[3,4]],3]]],[[35,[[0,[3,4]],3]]]],[[[36,[[0,[3,4]],3]]],[[36,[[0,[3,4]],3]]]],[[]],[[]],[[]],[[]],[[[6,[4]],4],12],[[[6,[4]]],[[37,[4]]]],[[[37,[4]]]],[[[37,[[0,[15,4]],15]],16],17],[[[33,[15,15]],16],17],[[[34,[[0,[15,4]],15]],16],17],[[[38,[[0,[15,4]],15]],16],17],[[[35,[[0,[15,4]],15]],16],17],[[[36,[[0,[15,4]],15]],16],17],[[[39,[[0,[15,4]],15]],16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[4]],4],19],[[[6,[4]],[30,[4]]],[[19,[30]]]],[[[6,[4]],[30,[4]]],30],[[[6,[4]],4],19],[[[6,[4]],4]],[[[6,[4]],4]],[[[6,[4]]],4],[[[6,[4]],31],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[4]]],12],[[[6,[4]]],[[34,[4]]]],[[[6,[4]]],[[38,[4]]]],[[[6,[4]]],[[35,[4]]]],[[[6,[4]]],22],[[],[[6,[9]]]],[[[37,[4]]],19],[[[33,[4]]],19],[[[34,[4]]],19],[[[38,[4]]],19],[[[35,[4]]],[[19,[4]]]],[[[36,[4]]],19],[[[39,[4]]],19],[[[6,[4]],4],19],[[[6,[4]],22]],[[[6,[4]],32]],[[[37,[4]]]],[[[33,[4]]]],[[[34,[4]]]],[[[38,[4]]]],[[[35,[4]]]],[[[36,[4]]]],[[[39,[4]]]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[[6,[4]]],[[36,[4]]]],[[[6,[4]]],[[39,[4]]]],[22,[[6,[9]]]],[22,[[6,[4]]]],[[],[[6,[4]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[4]]],22],[[[7,[4]]]],[[[40,[[0,[3,4]],3]]],[[40,[[0,[3,4]],3]]]],[[[41,[[0,[3,4]],3]]],[[41,[[0,[3,4]],3]]]],[[[42,[[0,[3,4]],3]]],[[42,[[0,[3,4]],3]]]],[[[43,[[0,[3,4]],3]]],[[43,[[0,[3,4]],3]]]],[[]],[[]],[[]],[[]],[[[7,[4]],4],12],[[[7,[4]]],[[44,[4]]]],[[[44,[4]]]],[[[44,[[0,[15,4]],15]],16],17],[[[40,[[0,[15,4]],15]],16],17],[[[41,[[0,[15,4]],15]],16],17],[[[45,[[0,[15,4]],15]],16],17],[[[42,[[0,[15,4]],15]],16],17],[[[43,[[0,[15,4]],15]],16],17],[[[46,[[0,[15,4]],15]],16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[4]],4],19],[[[7,[4]],[30,[4]]],[[19,[30]]]],[[[7,[4]],[30,[4]]],30],[[[7,[4]],4],19],[[[7,[4]],4]],[[[7,[4]],4]],[[[7,[4]]],4],[[[7,[4]],31],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[4]]],12],[[[7,[4]]],[[41,[4]]]],[[[7,[4]]],[[45,[4]]]],[[[7,[4]]],[[42,[4]]]],[[[7,[4]]],22],[[],[[7,[9]]]],[[[44,[4]]],19],[[[40,[4]]],19],[[[41,[4]]],19],[[[45,[4]]],19],[[[42,[4]]],[[19,[4]]]],[[[43,[4]]],19],[[[46,[4]]],19],[[[7,[4]],4],19],[[[7,[4]],22]],[[[7,[4]],32]],[[[44,[4]]]],[[[40,[4]]]],[[[41,[4]]]],[[[45,[4]]]],[[[42,[4]]]],[[[43,[4]]]],[[[46,[4]]]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[[7,[4]]],[[43,[4]]]],[[[7,[4]]],[[46,[4]]]],[22,[[7,[9]]]],[22,[[7,[4]]]],[[],[[7,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[47,[4]],31],[[47,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[4]]],22],[[[8,[4]]]],[[[8,[4]],4],12],[[[8,[4]]],[[48,[4]]]],[[[48,[4]]]],[[[8,[4]],4],[[19,[[47,[4]]]]]],[[[49,[[0,[15,4]],15]],16],17],[[[50,[[0,[15,4]],15]],16],17],[[[47,[[0,[15,4]],15]],16],17],[[[48,[[0,[15,4]],15]],16],17],[[[51,[[0,[15,4]],15]],16],17],[[[52,[[0,[15,4]],15]],16],17],[[[53,[[0,[15,4]],15]],16],17],[[[54,[[0,[15,4]],15]],16],17],[[[55,[[0,[15,4]],15]],16],17],[[[56,[[0,[15,4]],15]],16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[4]],4],19],[[[49,[4]]]],[[[8,[4]],[30,[4]]],[[19,[30]]]],[[[8,[4]],[30,[4]]],30],[[[8,[4]],4],19],[[[49,[4]]]],[[[8,[4]],4]],[[[8,[4]],4]],[[[8,[4]],4],19],[[[49,[4]]]],[[[50,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[49,[4]]]],[[[8,[4]]],12],[[[8,[4]]],[[52,[4]]]],[[[8,[4]]],[[53,[4]]]],[[[49,[4]]],4],[[[50,[4]]],4],[[[47,[4]]],4],[[[8,[4]]],[[54,[4]]]],[[[8,[4]]],22],[[],[[8,[4]]]],[[[48,[4]]],19],[[[51,[4]]],19],[[[52,[4]]],19],[[[53,[4]]],19],[[[54,[4]]],[[19,[4]]]],[[[55,[4]]],19],[[[56,[4]]],19],[[[47,[4,57]]],57],[[[47,[4]]]],[[[47,[4]],31]],[[[8,[4]],4],19],[[[49,[4]]]],[[[49,[4]]]],[[[8,[4]],32]],[[[8,[4]],22]],[[[48,[4]]]],[[[51,[4]]]],[[[52,[4]]]],[[[53,[4]]]],[[[54,[4]]]],[[[55,[4]]]],[[[56,[4]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[[8,[4]]],[[55,[4]]]],[[[8,[4]]],[[56,[4]]]],[22,[[8,[4]]]]],"c":[],"p":[[3,"KeyData"],[15,"u64"],[8,"Clone"],[8,"Key"],[3,"SlotMap"],[3,"DenseSlotMap"],[3,"HopSlotMap"],[3,"SecondaryMap"],[3,"DefaultKey"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[8,"Copy"],[8,"IntoIterator"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"usize"],[3,"IntoIter"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IterMut"],[3,"ValuesMut"],[15,"array"],[8,"FnOnce"],[8,"FnMut"],[3,"IntoIter"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IterMut"],[3,"ValuesMut"],[3,"IntoIter"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IterMut"],[3,"ValuesMut"],[4,"Entry"],[3,"Drain"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[8,"Default"]]},\
"smallvec":{"doc":"Small vectors in various sizes. These store a certain …","t":"NINEDDQDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLOLLLLKLLLLLLLLLLLLLLLLLLM","n":["AllocErr","Array","CapacityOverflow","CollectionAllocErr","Drain","IntoIter","Item","SmallVec","ToSmallVec","append","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drop","drop","drop","eq","extend","extend_from_slice","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_buf","from_buf_and_len","from_buf_and_len_unchecked","from_elem","from_iter","from_raw_parts","from_slice","from_vec","grow","hash","index","index_mut","inline_size","insert","insert_from_slice","insert_many","into","into","into","into","into_boxed_slice","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","is_empty","len","len","new","next","next","next_back","next_back","partial_cmp","pop","push","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","set_len","shrink_to_fit","size","size_hint","size_hint","smallvec","spilled","swap_remove","to_owned","to_owned","to_smallvec","to_string","truncate","try_from","try_from","try_from","try_from","try_grow","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","with_capacity","layout"],"q":[[0,"smallvec"],[138,"smallvec::CollectionAllocErr"]],"d":["The allocator return an error","Types that can be used as the backing store for a SmallVec","Overflow <code>usize::MAX</code> or other error during size computation","Error type for APIs with fallible heap allocation","An iterator that removes the items from a <code>SmallVec</code> and …","An iterator that consumes a <code>SmallVec</code> and yields its items …","The type of the array’s elements.","A <code>Vec</code>-like container that can store a small number of …","Convenience trait for constructing a <code>SmallVec</code>","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","Returns a raw mutable pointer to the vector’s buffer.","Extracts a mutable slice of the entire vector.","Returns the remaining items of this iterator as a mutable …","Returns a raw pointer to the vector’s buffer.","","Extracts a slice containing the entire vector.","Returns the remaining items of this iterator as a slice.","","","","","","","","","","","The number of items the vector can hold without …","Remove all elements from the vector.","","","","","","","Removes consecutive duplicate elements.","Removes consecutive duplicate elements using the given …","Removes consecutive elements that map to the same key.","","","","Creates a draining iterator that removes the specified …","","","","","","Copy elements from a slice and append them to the vector.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Creates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.","","Creates a <code>SmallVec</code> directly from the raw components of …","Copy the elements from a slice into a new <code>SmallVec</code>.","Construct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.","Re-allocate to set the capacity to …","","","","The maximum number of elements this vector can hold inline","Insert an element at position <code>index</code>, shifting all elements …","Copy elements from a slice into the vector at position …","Insert multiple elements at position <code>index</code>, shifting all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating …","Convert the SmallVec into an <code>A</code> if possible. Otherwise …","","","","","","Convert a SmallVec to a Vec, without reallocating if the …","Returns <code>true</code> if the vector is empty","","The number of elements stored in the vector","Construct an empty vector","","","","","","Remove an item from the end of the vector and return it, …","Append an item to the vector.","Remove and return the element at position <code>index</code>, shifting …","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","Resizes the vector so that its length is equal to <code>len</code>.","Resizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Sets the length of a vector.","Shrink the capacity of the vector as much as possible.","Returns the number of items the array can hold.","","","Creates a <code>SmallVec</code> containing the arguments.","Returns <code>true</code> if the data has spilled into a separate …","Remove the element at position <code>index</code>, replacing it with …","","","Construct a new <code>SmallVec</code> from a slice.","","Shorten the vector, keeping the first <code>len</code> elements and …","","","","","Re-allocate to set the capacity to …","","","","","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","","","","","Construct an empty vector with enough capacity …","The layout that was passed to the allocator"],"i":[15,0,15,0,0,0,1,0,0,2,2,2,2,4,2,2,2,4,10,2,2,4,15,10,2,2,4,15,2,2,2,4,2,2,4,2,2,2,2,2,2,2,2,10,2,4,2,2,2,10,2,4,15,15,10,2,2,2,2,2,4,15,15,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,2,4,15,2,2,10,2,2,2,4,2,2,10,2,2,10,4,10,4,2,2,2,2,2,2,2,2,2,2,2,2,1,10,4,0,2,2,2,4,27,15,2,10,2,4,15,2,10,2,4,15,2,2,10,2,4,15,2,28],"f":[0,0,0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[[2,[1]]],3],[[[2,[1]]]],[[[2,[1]]],3],[[[4,[1]]],3],[[[2,[1]]]],[[[2,[1]]],3],[[[2,[1]]],3],[[[4,[1]]],3],[[]],[[]],[[[2,[1]]],3],[[]],[[]],[[]],[[]],[[[2,[1]]],3],[[]],[[]],[[[2,[1]]],5],[[[2,[1]]]],[[[2,[1]]],[[2,[1]]]],[[[4,[[0,[1,6]]]]],[[4,[[0,[1,6]]]]]],[[[2,[1]],[2,[1]]]],[[]],[[]],[[[2,[1]],[2,[1]]],7],[[[2,[1]]]],[[[2,[1]],8]],[[[2,[1]],8]],[[],[[2,[1]]]],[[[2,[1]]],3],[[[2,[1]]],3],[[[2,[1]],[9,[5]]],[[10,[1]]]],[[[10,[1]]]],[[[2,[1]]]],[[[4,[1]]]],[[[2,[1]],[2,[1]]],11],[[[2,[1]],12]],[[[2,[1]],3]],[[[10,[1]],13],14],[[[2,[1]],13],14],[[[4,[1]],13],14],[[15,13],14],[[15,13],14],[[]],[1,[[2,[1]]]],[[]],[16],[17,[[2,[1]]]],[3,[[2,[1]]]],[[]],[[]],[18,15],[1,[[2,[1]]]],[[1,5],[[2,[1]]]],[[[19,[1]],5],[[2,[1]]]],[5,[[2,[1]]]],[12,[[2,[1]]]],[[5,5],[[2,[1]]]],[3,[[2,[1]]]],[17,[[2,[1]]]],[[[2,[1]],5]],[[[2,[1]],20]],[[[2,[1]],[21,[3]]]],[[[2,[1]],[21,[3]]]],[[[2,[1]]],5],[[[2,[1]],5]],[[[2,[1]],5,3]],[[[2,[1]],5,12]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[22,[3]]]],[[[2,[1]]],[[23,[1,[2,[1]]]]]],[[]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[]],[[[2,[1]]],17],[[[2,[1]]],11],[[[10,[1]]],5],[[[2,[1]]],5],[[],[[2,[1]]]],[[[10,[1]]],24],[[[4,[1]]],24],[[[10,[1]]],24],[[[4,[1]]],24],[[[2,[1]],[2,[1]]],[[24,[7]]]],[[[2,[1]]],24],[[[2,[1]]]],[[[2,[1]],5]],[[[2,[1]],5]],[[[2,[1]],5]],[[[2,[1]],5]],[[[2,[1]],5,8]],[[[2,[1]],8]],[[[2,[1]],8]],[[[2,[1]],5]],[[[2,[1]]]],[[],5],[[[10,[1]]]],[[[4,[1]]]],0,[[[2,[1]]],11],[[[2,[1]],5]],[[]],[[]],[[],2],[[],25],[[[2,[1]],5]],[[],23],[[],23],[[],23],[[],23],[[[2,[1]],5],[[23,[15]]]],[[],23],[[],23],[[],23],[[],23],[[[2,[1]],5],[[23,[15]]]],[[[2,[1]],5],[[23,[15]]]],[[],26],[[],26],[[],26],[[],26],[5,[[2,[1]]]],0],"c":[],"p":[[8,"Array"],[3,"SmallVec"],[15,"slice"],[3,"IntoIter"],[15,"usize"],[8,"Clone"],[4,"Ordering"],[8,"FnMut"],[8,"RangeBounds"],[3,"Drain"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"CollectionAllocErr"],[15,"never"],[3,"Vec"],[6,"LayoutErr"],[19,"MaybeUninit"],[8,"Hasher"],[8,"SliceIndex"],[3,"Box"],[4,"Result"],[4,"Option"],[3,"String"],[3,"TypeId"],[8,"ToSmallVec"],[13,"AllocErr"]]},\
"swash":{"doc":"Font introspection, complex text shaping and glyph …","t":"ENNDSSDNSDDDNNNNNNNSSSSSNDDDNGDDNSNNNNDSNDSSNGNDNNNSSSNDDEENNDSIGNNNSSNEDNNNDDNNLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLAMLLLMLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLALLALLLLALLMMLLLKLLLLMFFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLMLLLMMMLLLMCDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNGDDDDEGELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNEDNNLLLLLLLLLMMLLLLLLLLLLMMLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNDDDLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLMLLLLLLLLLLLLMMMLLLLLLLLMMMMLLLLLLLLMLLLLLLLLLLLLMMNNNNNNNNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEENNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNENNEINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKALLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNEDDDDNNNNNENNNNRNNNNNNNNNNDNNEDNENNDGNNNNENNNLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLLLLLLLLLLLLLLLMMLLLLLLMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Action","Adjustment","Attachment","Attributes","BLACK","BOLD","BitmapStrike","Both","CONDENSED","CacheKey","Charmap","ColorPalette","CompatibleFull","Copyright","Dark","DarkBackgroundPalette","Description","Designer","DesignerUrl","EXPANDED","EXTRA_BOLD","EXTRA_CONDENSED","EXTRA_EXPANDED","EXTRA_LIGHT","Family","Feature","FontDataRef","FontRef","Full","GlyphId","GlyphMetrics","Instance","Italic","LIGHT","License","LicenseUrl","Light","LightBackgroundPalette","LocalizedString","MEDIUM","Manufacturer","Metrics","NORMAL","NORMAL","Normal","NormalizedCoord","Oblique","ObliqueAngle","Other","PostScript","PostScriptCid","SEMI_BOLD","SEMI_CONDENSED","SEMI_EXPANDED","SampleText","Setting","Stretch","StringId","Style","SubFamily","Substitution","Synthesis","THIN","TableProvider","Tag","Trademark","TypographicFamily","TypographicSubFamily","ULTRA_CONDENSED","ULTRA_EXPANDED","UniqueId","Usability","Variation","VariationsPostScriptNamePrefix","VendorUrl","Version","Weight","WritingSystem","WwsFamily","WwsSubFamily","action","advance_height","advance_width","alpha_strikes","any","ascent","attributes","average_width","bit_depth","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cap_height","charmap","chars","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","color_palettes","color_strikes","contains","data","data","default","default","default","default","default","default","default","default","default","default_value","descent","embolden","enumerate","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","features","features","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fonts","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_degrees","from_degrees","from_font","from_font","from_gradians","from_index","from_offset","from_percentage","from_radians","from_raw","from_turns","get","get","glyph_count","glyph_count","glyph_metrics","has_italic_variation","has_oblique_variation","has_stretch_variation","has_variations","has_variations","has_vertical_metrics","has_vertical_metrics","has_weight_variation","hash","hash","hash","hash","id","index","index","index","instances","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_collection","is_condensed","is_decodable","is_empty","is_empty","is_expanded","is_hidden","is_monospace","is_normal","is_unicode","iter","key","language","language","language_tag","leading","len","len","linear_scale","linear_scale","localized_strings","lsb","map","max_value","max_width","metrics","min_value","name","name","name","name","name_id","name_id","name_id","new","new","new","normalize","normalized_coords","offset","parse","parse","parse","parse","parse","parse_list","parse_list","partial_cmp","partial_cmp","partial_cmp","parts","postscript_name","postscript_name_id","ppem","ppi","proxy","proxy","raw","scale","scale","scale","script","script_tag","shape","skew","stretch","strikeout_offset","stroke_size","style","synthesize","table","table_by_tag","table_by_tag","table_by_tag","tag","tag","tag","tag_from_bytes","tag_from_str_lossy","text","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_percentage","to_raw","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tsb","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline_offset","units_per_em","units_per_em","usability","value","value","values","variations","variations","vertical_ascent","vertical_descent","vertical_leading","vertical_origin","weight","writing_systems","x_height","zeno","BitmapStrikes","Chars","ColorPalettes","Features","Fonts","Instances","LocalizedStrings","Variations","WritingSystems","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","find_by_exact_ppem","find_by_id","find_by_largest_ppem","find_by_name","find_by_nearest_ppem","find_by_postscript_name","find_by_tag","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next","normalized_coords","nth","nth","nth","nth","nth","nth","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BitmapStrikesProxy","CharmapProxy","MetricsProxy","VariationsProxy","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","fmt","from","from","from","from","from_font","from_font","from_font","from_font","glyph_count","has_alpha","has_color","into","into","into","into","materialize","materialize","materialize_alpha","materialize_color","materialize_glyph_metrics","materialize_metrics","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","units_per_em","BestFit","Bitmap","ColorBitmap","ColorOutline","ExactSize","Index","LargestSize","Outline","PaletteIndex","Render","ScaleContext","Scaler","ScalerBuilder","Source","StrikeIndex","StrikeWith","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone_into","clone_into","default","default","default_color","embolden","fmt","fmt","format","from","from","from","from","from","from","has_bitmaps","has_color_bitmaps","has_color_outlines","has_outlines","hint","image","into","into","into","into","into","into","new","new","normalized_coords","offset","outline","render","render_into","scale_bitmap","scale_bitmap_into","scale_color_bitmap","scale_color_bitmap_into","scale_color_outline","scale_color_outline_into","scale_outline","scale_outline_into","size","style","to_owned","to_owned","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","variations","with_max_entries","Color","Content","Image","Mask","SubpixelMask","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","content","data","default","default","eq","equivalent","fmt","from","from","into","into","new","placement","source","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Layer","LayerMut","Outline","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bounds","clear","clone","clone","clone_into","clone_into","color_index","color_index","default","embolden","embolden","from","from","from","get","get_mut","into","into","into","is_color","is_empty","len","new","path","path","path","points","points","points","points_mut","points_mut","to_owned","to_owned","transform","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verbs","verbs","verbs","Direction","LeftToRight","RightToLeft","ShapeContext","Shaper","ShaperBuilder","add_cluster","add_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone_into","cluster","default","direction","eq","equivalent","features","fmt","from","from","from","from","insert_dotted_circles","into","into","into","into","language","metrics","new","normalized_coords","normalized_coords","retain_ignorables","script","shape_with","size","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","variations","with_max_entries","Glyph","GlyphCluster","GlyphInfo","advance","advance","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","components","data","data","default","default","fmt","fmt","fmt","from","from","from","glyphs","id","info","info","into","into","into","is_complex","is_empty","is_ligature","is_mark","is_simple","source","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","x","y","AI","AL","AL","AN","Adlam","Adlam","AegeanNumbers","Ahom","Ahom","Alaph","AlchemicalSymbols","AlphabeticPresentationForms","Analyze","AnatolianHieroglyphs","AnatolianHieroglyphs","AncientGreekMusicalNotation","AncientGreekNumbers","AncientSymbols","Arabic","Arabic","ArabicExtendedA","ArabicMathematicalAlphabeticSymbols","ArabicPresentationFormsA","ArabicPresentationFormsB","ArabicSupplement","Armenian","Armenian","Arrows","Avestan","Avestan","B","B2","BA","BB","BK","BN","Balinese","Balinese","Bamum","Bamum","BamumSupplement","BasicLatin","BassaVah","BassaVah","Batak","Batak","Bengali","Bengali","Bhaiksuki","Bhaiksuki","BidiClass","Block","BlockElements","Bopomofo","Bopomofo","BopomofoExtended","BoxDrawing","BracketType","Brahmi","Brahmi","Braille","BraillePatterns","Buginese","Buginese","Buhid","Buhid","ByzantineMusicalSymbols","CB","CJ","CJKCompatibility","CJKCompatibilityForms","CJKCompatibilityIdeographs","CJKCompatibilityIdeographsSupplement","CJKRadicalsSupplement","CJKStrokes","CJKSymbolsandPunctuation","CJKUnifiedIdeographs","CJKUnifiedIdeographsExtensionA","CJKUnifiedIdeographsExtensionB","CJKUnifiedIdeographsExtensionC","CJKUnifiedIdeographsExtensionD","CJKUnifiedIdeographsExtensionE","CJKUnifiedIdeographsExtensionF","CJKUnifiedIdeographsExtensionG","CL","CM","CN","CP","CR","CR","CR","CS","CanadianAboriginal","Carian","Carian","CasedLetter","Category","CaucasianAlbanian","CaucasianAlbanian","Chakma","Chakma","Cham","Cham","Cherokee","Cherokee","CherokeeSupplement","ChessSymbols","Chorasmian","Chorasmian","Cjk","Close","ClosePunctuation","ClusterBreak","Codepoint","CombiningDiacriticalMarks","CombiningDiacriticalMarksExtended","CombiningDiacriticalMarksSupplement","CombiningDiacriticalMarksforSymbols","CombiningHalfMarks","Common","CommonIndicNumberForms","ConnectorPunctuation","Control","ControlPictures","Coptic","Coptic","CopticEpactNumbers","CountingRodNumerals","Cuneiform","Cuneiform","CuneiformNumbersandPunctuation","CurrencySymbol","CurrencySymbols","Cypriot","CypriotSyllabary","Cyrillic","Cyrillic","CyrillicExtendedA","CyrillicExtendedB","CyrillicExtendedC","CyrillicSupplement","D","DQ","DalathRish","DashPunctuation","DecimalNumber","Decompose","Deseret","Deseret","Devanagari","Devanagari","DevanagariExtended","Dingbats","DivesAkuru","DivesAkuru","Dogra","Dogra","DominoTiles","Duployan","Duployan","EB","EM","EN","ES","ET","EX","EX","EX","EarlyDynasticCuneiform","EgyptianHieroglyphFormatControls","EgyptianHieroglyphs","EgyptianHieroglyphs","Elbasan","Elbasan","Elymaic","Elymaic","Emoticons","EnclosedAlphanumericSupplement","EnclosedAlphanumerics","EnclosedCJKLettersandMonths","EnclosedIdeographicSupplement","EnclosingMark","Ethiopic","Ethiopic","EthiopicExtended","EthiopicExtendedA","EthiopicSupplement","Extend","FO","FSI","FinalPunctuation","Format","GL","GeneralPunctuation","GeometricShapes","GeometricShapesExtended","Georgian","Georgian","GeorgianExtended","GeorgianSupplement","Glagolitic","Glagolitic","GlagoliticSupplement","Gothic","Gothic","Grantha","Grantha","Greek","GreekExtended","GreekandCoptic","Gujarati","Gujarati","GunjalaGondi","GunjalaGondi","Gurmukhi","Gurmukhi","H2","H3","HL","HL","HY","HalfwidthandFullwidthForms","Han","Hangul","HangulCompatibilityJamo","HangulJamo","HangulJamoExtendedA","HangulJamoExtendedB","HangulSyllables","HanifiRohingya","HanifiRohingya","Hanunoo","Hanunoo","Hatran","Hatran","Hebrew","Hebrew","HighPrivateUseSurrogates","HighSurrogates","Hiragana","Hiragana","ID","IN","IPAExtensions","IS","IdeographicDescriptionCharacters","IdeographicSymbolsandPunctuation","ImperialAramaic","ImperialAramaic","IndicSiyaqNumbers","Inherited","InitialPunctuation","InscriptionalPahlavi","InscriptionalPahlavi","InscriptionalParthian","InscriptionalParthian","JL","JT","JV","Japanese","Javanese","Javanese","JoiningType","KA","Kaithi","Kaithi","KanaExtendedA","KanaSupplement","Kanbun","KangxiRadicals","Kannada","Kannada","Katakana","Katakana","KatakanaPhoneticExtensions","KayahLi","KayahLi","Kharoshthi","Kharoshthi","KhitanSmallScript","KhitanSmallScript","Khmer","Khmer","KhmerSymbols","Khojki","Khojki","Khudawadi","Khudawadi","Korean","L","L","L","LE","LF","LF","LF","LRE","LRI","LRO","LV","LVT","Language","Lao","Lao","Latin","Latin1Supplement","LatinExtendedA","LatinExtendedAdditional","LatinExtendedB","LatinExtendedC","LatinExtendedD","LatinExtendedE","Lepcha","Lepcha","Letter","LetterNumber","LetterlikeSymbols","Limbu","Limbu","LineBreak","LineSeparator","LinearA","LinearA","LinearB","LinearBIdeograms","LinearBSyllabary","Lisu","Lisu","LisuSupplement","LowSurrogates","LowercaseLetter","Lycian","Lycian","Lydian","Lydian","MB","ML","MN","Mahajani","Mahajani","MahjongTiles","Makasar","Makasar","Malayalam","Malayalam","Mandaic","Mandaic","Manichaean","Manichaean","Marchen","Marchen","Mark","MasaramGondi","MasaramGondi","MathSymbol","MathematicalAlphanumericSymbols","MathematicalOperators","MayanNumerals","Medefaidrin","Medefaidrin","MeeteiMayek","MeeteiMayek","MeeteiMayekExtensions","MendeKikakui","MendeKikakui","MeroiticCursive","MeroiticCursive","MeroiticHieroglyphs","MeroiticHieroglyphs","Miao","Miao","MiscellaneousMathematicalSymbolsA","MiscellaneousMathematicalSymbolsB","MiscellaneousSymbols","MiscellaneousSymbolsandArrows","MiscellaneousSymbolsandPictographs","MiscellaneousTechnical","Modi","Modi","ModifierLetter","ModifierSymbol","ModifierToneLetters","Mongolian","Mongolian","MongolianSupplement","Mro","Mro","Multani","Multani","MusicalSymbols","Myanmar","Myanmar","MyanmarExtendedA","MyanmarExtendedB","NKo","NL","NL","NS","NSM","NU","NU","Nabataean","Nabataean","Nandinagari","Nandinagari","NewTaiLue","NewTaiLue","Newa","Newa","Nko","NoBlock","None","None","NonspacingMark","Number","NumberForms","Nushu","Nushu","NyiakengPuachueHmong","NyiakengPuachueHmong","ON","OP","Ogham","Ogham","OlChiki","OlChiki","OldHungarian","OldHungarian","OldItalic","OldItalic","OldNorthArabian","OldNorthArabian","OldPermic","OldPermic","OldPersian","OldPersian","OldSogdian","OldSogdian","OldSouthArabian","OldSouthArabian","OldTurkic","OldTurkic","Open","OpenPunctuation","OpticalCharacterRecognition","Oriya","Oriya","OrnamentalDingbats","Osage","Osage","Osmanya","Osmanya","Other","OtherLetter","OtherNumber","OtherPunctuation","OtherSymbol","OttomanSiyaqNumbers","PDF","PDI","PO","PP","PR","PahawhHmong","PahawhHmong","Palmyrene","Palmyrene","ParagraphSeparator","PauCinHau","PauCinHau","PhagsPa","Phagspa","PhaistosDisc","Phoenician","Phoenician","PhoneticExtensions","PhoneticExtensionsSupplement","PlayingCards","PrivateUse","PrivateUseArea","Properties","PsalterPahlavi","PsalterPahlavi","Punctuation","QU","R","R","RI","RI","RI","RLE","RLI","RLO","Rejang","Rejang","RumiNumeralSymbols","Runic","Runic","S","SA","SG","SM","SP","SQ","SY","Samaritan","Samaritan","Saurashtra","Saurashtra","Script","Separator","Sharada","Sharada","Shavian","Shavian","ShorthandFormatControls","Siddham","Siddham","SignWriting","Simplified","Sinhala","Sinhala","SinhalaArchaicNumbers","SmallFormVariants","SmallKanaExtension","Sogdian","Sogdian","SoraSompeng","SoraSompeng","Soyombo","Soyombo","SpaceSeparator","SpacingMark","SpacingModifierLetters","Specials","Sundanese","Sundanese","SundaneseSupplement","SuperscriptsandSubscripts","SupplementalArrowsA","SupplementalArrowsB","SupplementalArrowsC","SupplementalMathematicalOperators","SupplementalPunctuation","SupplementalSymbolsandPictographs","SupplementaryPrivateUseAreaA","SupplementaryPrivateUseAreaB","Surrogate","SuttonSignWriting","SylotiNagri","SylotiNagri","Symbol","SymbolsandPictographsExtendedA","SymbolsforLegacyComputing","Syriac","Syriac","SyriacSupplement","T","T","Tagalog","Tagalog","Tagbanwa","Tagbanwa","Tags","TaiLe","TaiLe","TaiTham","TaiTham","TaiViet","TaiViet","TaiXuanJingSymbols","Takri","Takri","Tamil","Tamil","TamilSupplement","Tangut","Tangut","TangutComponents","TangutSupplement","Telugu","Telugu","Thaana","Thaana","Thai","Thai","Tibetan","Tibetan","Tifinagh","Tifinagh","Tirhuta","Tirhuta","TitlecaseLetter","Traditional","TransportandMapSymbols","U","UNICODE_VERSION","Ugaritic","Ugaritic","Unassigned","UnifiedCanadianAboriginalSyllabics","UnifiedCanadianAboriginalSyllabicsExtended","Unknown","UppercaseLetter","V","Vai","Vai","VariationSelectors","VariationSelectorsSupplement","VedicExtensions","VerticalForms","WJ","WS","WSegSpace","Wancho","Wancho","WarangCiti","WarangCiti","WordBreak","XX","XX","XX","Yezidi","Yezidi","Yi","YiRadicals","YiSyllables","YijingHexagramSymbols","ZW","ZWJ","ZWJ","ZWJ","ZanabazarSquare","ZanabazarSquare","analyze","bidi_class","bidi_class","bidi_class","block","block","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bracket_type","category","category","category","chars","cjk","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","closing_bracket","cluster","cluster_break","cluster_break","cluster_break","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","combining_class","combining_class","combining_class","compose","decompose","decompose_compatible","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_opentype","from_opentype","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_close_bracket","is_complex","is_emoji","is_emoji","is_emoji","is_extended_pictographic","is_extended_pictographic","is_extended_pictographic","is_joined","is_open_bracket","joining_type","joining_type","joining_type","language","line_break","line_break","line_break","mask","mirror","name","name","needs_bidi_resolution","needs_resolution","next","next","opening_bracket","parse","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","properties","region","script","script","script","script","to_opentype","to_opentype","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","word_break","word_break","word_break","Anusvara","Base","Boundary","Char","CharCluster","CharInfo","ClusterInfo","Color","Complete","Control","Default","Discard","Emoji","Halant","Keep","Kinzi","Line","MAX_CLUSTER_SIZE","Mandatory","Mark","MedialRa","Newline","NoBreakSpace","None","None","None","Other","Other","Parser","Pref","Reph","ShapeClass","SourceRange","Space","Status","Tab","Text","Token","UserData","VBlw","VMPre","VPre","Vs","Whitespace","Word","Zwj","Zwnj","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary","boundary","ch","ch","chars","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","contributes_to_shaping","data","data","default","default","default","default","default","default","deref","emoji","end","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","glyph_id","ignorable","info","info","into","into","into","into","into","into","into","into","into","into","into","into","is_boundary","is_broken","is_emoji","is_empty","is_space_or_nbsp","is_whitespace","joining_type","len","map","mapped_chars","new","new","new","next","offset","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","properties","range","shape_class","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_range","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_data","whitespace"],"q":[[0,"swash"],[538,"swash::iter"],[678,"swash::proxy"],[739,"swash::scale"],[838,"swash::scale::image"],[874,"swash::scale::outline"],[932,"swash::shape"],[992,"swash::shape::cluster"],[1047,"swash::text"],[1956,"swash::text::cluster"]],"d":["Modification performed by a feature.","Adjusts the position of one or more glyphs such as in …","Attaches one glyph to another such as in accent mark …","Primary attributes for font classification: stretch, …","","","Collection of bitmaps of a specific size and format.","Usable with both light and dark backgrounds.","","Uniquely generated value for identifying and caching fonts.","Maps characters to nominal glyph identifiers.","Collection of colors.","","","Usable with dark backgrounds.","","","","","","","","","","","Typographic rule that produces modifications to a sequence …","Reference to the content of a font file.","Reference to a font.","","Glyph identifier.","Glyph advances, side bearings and vertical origins.","Named instance in a variable font.","","","","","Usable with light backgrounds.","","Represents a single localized string in a font.","","","Global font metrics.","","","","Normalized variation coordinate in 2.14 fixed point format.","","Angle of an oblique style in degrees from -90 to 90.","","","","","","","","Setting combining a tag and a value for features and …","Visual width of a font– a relative change from the …","Identifier for well-known localized strings in a font.","Visual style or ‘slope’ of a font.","","Replaces one or more glyphs such as in ligation.","Synthesis suggestions for mismatched font attributes.","","Source that can provide table data by tag.","Four byte tag value.","","","","","","","Theme of a palette with respect to background color.","Axis of variation in a variable font.","","","","Visual weight class of a font on a scale from 1 to 1000.","Script, language and associated typographic features …","","","Returns the action of the feature.","Returns the vertical advance for the specified glyph.","Returns the horizontal advance for the specified glyph.","Returns an iterator over the alpha bitmap strikes for the …","Returns true if any synthesis suggestions are available.","Distance from the baseline to the top of the alignment box.","Returns the primary attributes for the font.","Average width of all non-zero characters in the font.","Returns the bit depth of the strike.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distance from the baseline to the top of a typical English …","Returns the character map for the font.","Returns an iterator over the sequence of characters …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the color palettes for the font.","Returns an iterator over the color bitmap strikes for the …","Returns true if the specified glyph is covered by the …","Returns the underlying data.","Full content of a file containing the font.","","","","","","","","","","Returns the default value of the variation.","Distance from the baseline to the bottom of the alignment …","Returns true if the scaler should apply a faux bold.","Invokes the specified closure with all codepoint/glyph …","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the features provided by the …","Returns an iterator over the features supported by a font.","","","","","","","","","","","","","","","","","","Returns an iterator over the available fonts.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new oblique angle from degrees.","Creates a new oblique style with the specified angle in …","Extracts the attributes from the specified font.","Creates a character map from the specified font.","Creates a new oblique angle from gradians.","Creates a new font from the specified font data and the …","Creates a new font from the specified font data and offset …","Creates a stretch attribute from a percentage. The value …","Creates a new oblique angle from radians.","","Creates a new oblique angle from turns.","Returns the font at the specified index.","Returns the color for the specified entry in RGBA order.","Returns the number of glyphs in the font.","Number of glyphs in the font.","Returns glyph metrics for the font and the specified …","Returns true if the font has a variation for the italic …","Returns true if the font has a variation for the oblique …","Returns true if the font has a variation for the stretch …","Returns true if the font has variations corresponding to …","Returns true if variations are supported.","Returns true if the font provides canonical vertical glyph …","True if the font provides canonical vertical metrics.","Returns true if the font has a variation for the weight …","","","","","Returns the string identifier.","Returns the index of the palette.","Returns the index of the variation.","Returns the index of the instance.","Returns an iterator over the named instances for the font.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the data represents a font collection.","Returns true if the stretch is condensed (less than …","Returns true if the string can be decoded.","Returns true if there are no available fonts.","Returns whether this palette is empty.","Returns true if the stretch is expanded (greater than …","Returns true if the variation should be hidden from users.","True if the font is monospace.","Returns true if the stretch is normal.","Returns true if the encoding for the string is unicode.","Collection of various iterators over metadata contained in …","Key for identifying a font in various caches.","Returns the language for the writing system.","Returns the language of the string.","Returns the OpenType language tag for the writing system.","Recommended additional spacing between lines.","Returns the number of available fonts.","Returns the number of color entries in the palette.","Creates a new set of metrics scaled by the specified …","Creates a new set of metrics scaled by the specified …","Returns an iterator over the localized strings for the …","Returns the left side bearing for the specified glyph.","Returns a nominal glyph identifier for the specified …","Returns the maximum value of the variation.","Maximum advance width of all characters in the font.","Returns metrics for the font and the specified normalized …","Returns the minimum value of the variation.","Returns the name of the feature, if available.","Returns the name for the palette, optionally for a …","Returns the name for the variation, optionally for a …","Returns the name for the instance, optionally for a …","Returns the name identifier for the palette, if available.","Returns the name identifier for the variation.","Returns the name identifier for the instance.","Creates new font attributes from the specified stretch, …","Generates a new cache key.","Creates font data from the specified bytes. Returns <code>None</code> …","Computes a normalized coordinate for the specified value.","Returns an iterator over the normalized coordinates for …","Offset to the table directory of the font.","Parses a style from a CSS style value.","Parses a CSS style font weight attribute.","Parses the stretch from a CSS style keyword or a …","Parses a variation setting according to the CSS grammar.   …","Parses a feature setting according to the CSS grammar.","Parses a comma separated list of variation settings …","Parses a comma separated list of feature settings …","","","","Returns a tuple containing all attributes.","Returns the PostScript name for the instance, optionally …","Returns the PostScript name identifier for the instance.","Returns the size of the strike in pixels per em.","Returns the device pixel density for which the strike was …","Proxies used to efficiently rematerialize metadata.","Returns the associated proxy.","Returns the raw value of the stretch attribute.","Scaling, hinting and rasterization of visual glyph …","Creates a new set of metrics scaled for the specified …","Creates a new set of metrics scaled for the specified …","Returns the script for the writing system.","Returns the OpenType script tag for the writing system.","Mapping complex text to a sequence of positioned glyphs.","Returns a skew angle for faux italic/oblique, if requested.","Returns the stretch attribute.","Recommended distance from the baseline to the top of a …","Recommended thickness of an underline or strikeout stroke.","Returns the style attribute.","Returns a synthesis analysis based on the requested …","Returns the table data for the specified tag.","Returns the table for the specified tag.","","","Returns the feature tag.","Returns the tag that identifies the variation.","The tag that identifies the setting.","Creates a tag from four bytes.","Creates a tag from the first four bytes of a string, …","Character properties and textual analysis.","Returns the oblique angle in degrees.","Returns the angle of the style in degrees.","","","","","","","","","","","","","","","","","","","","","","","","Converts the stretch value to a percentage.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the top side bearing for the specified glyph.","","","","","","","","","","","","","","","","","","","","","","","","Recommended distance from the baseline to the top of an …","Returns the number of font design units per em unit.","Number of font design units per em unit.","Returns the theme usability of the palette, if available.","Returns the underlying value of the key.","The value for the setting.","Returns an iterator over the variation values of the …","Returns the variations that should be applied to match the …","Returns an iterator over the variations for the font.","Distance from the vertical center baseline to the right …","Distance from the vertical center baseline to the left …","Recommended additional spacing between columns.","Returns the vertical origin for the specified glyph id.","Returns the weight attribute.","Returns an iterator over writing systems supported by the …","Distance from the baseline to the top of the lowercase “x…","","Iterator over a collection of bitmap strikes.","Iterator over the characters in a localized string.","Iterator over a collection of color palettes.","Iterator over a collection of typographic features.","Iterator over a collection of fonts.","Iterator over a collection of named variation instances.","Iterator over a collection of localized strings.","Iterator over a collection of font variations.","Iterator over a collection of writing systems.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Searches for a strike that exactly matches the specified …","Searches for a string with the specified identifier, and …","Searches for a strike with the largest size that contains …","Searches for an instance with the specified name.","Searches for a strike that matches the specified size and …","Searches for an instance with the specified PostScript …","Searches for a variation with the specified tag.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the set of normalized coordinates …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Proxy for rematerializing strike collections.","Proxy for rematerializing a character map.","Proxy for rematerializing metrics.","Proxy for rematerializing variations collections.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates character map proxy from the specified font.","Creates a metrics proxy for the specified font.","Creates strike collection proxy from the specified font.","Creates a variations proxy from the specified font.","Returns the number of glyphs in the font.","Returns true if the font has alpha bitmap strikes.","Returns true if the font has color bitmap strikes.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Materializes a character map from the specified font. This …","Materializes variations from the specified font. This …","Materializes an alpha strike iterator for the specified …","Materializes a color strike iterator for the specified …","Materializes glyph metrics for the specified font and …","Materializes font metrics for the specified font and …","","","","","","","","","","","","","","","","","Returns the number of font design units per em unit.","Load a bitmap of the best available size.","Embedded alpha bitmaps.","Embedded color bitmaps.","Layered color scalable outlines.","Load a bitmap only if the exact size is available.","Load a bitmap from the specified strike.","Loads a bitmap of the largest size available.","Scalable outlines.","Index of a color palette.","Builder type for rendering a glyph into an image.","Context that manages caches and scratch buffers for …","Scales outline and bitmap glyphs.","Builder for configuring a scaler.","Glyph sources for the renderer.","Index of a bitmap strike.","Bitmap strike selection mode.","","","","","","","","","","","","","Builds a scaler for the current configuration.","Creates a new builder for constructing a scaler with this …","","","","","","","Specifies an RGBA color to use when rasterizing layers of …","Specifies the strength of a faux bold transform to apply …","","","Specifies the target format for rasterizing an outline. …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns true if alpha bitmaps are available.","Returns true if color bitmaps are available.","Returns true if scalable color glyph outlines are …","Returns true if scalable glyph outlines are available.","Specifies whether to apply hinting to outlines. The …","Rendered glyph image.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new scaling context.","Creates a new builder for configuring rendering using the …","Specifies the variation settings in terms of normalized …","Specifies an additional offset to apply when rasterizing …","Glyph outline.","Renders the specified glyph using the current …","Renders the specified glyph using the current …","Scales a bitmap for the specified glyph and mode.","Scales a bitmap for the specified glyph and mode into the …","Scales a color bitmap for the specified glyph and mode.","Scales a color bitmap for the specified glyph and mode …","Scales a color outline for the specified glyph.","Scales a color outline for the specified glyph into the …","Scales an outline for the specified glyph.","Scales an outline for the specified glyph into the …","Specifies the font size in pixels per em. The default …","Specifies the path style to use when rasterizing an …","","","Specifies a transformation matrix to apply when …","","","","","","","","","","","","","","","","","","","Adds variation settings to the scaler.","Creates a new scaling context with the specified maximum …","32-bit RGBA bitmap.","Content of a scaled glyph image.","Scaled glyph image.","8-bit alpha mask.","32-bit RGBA subpixel mask.","","","","","Resets the image to a default state.","","","","","Content of the image.","Raw image data.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty scaled image.","Offset and size of the image.","Source of the image.","","","","","","","","","Reference to a layer in a scaled outline.","Mutable reference to a layer in a scaled outline.","Scaled glyph outline represented as a collection of layers …","","","","","","","Computes the bounding box of the layer.","Computes the bounding box of the outline.","Computes the bounding box of the layer.","Clears the outline.","","","","","Returns the color index for the layer.","Returns the color index for the layer.","","Applies a faux bold to this layer with the specified …","Applies a faux bold to the outline with the specified …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the layer at the specified index.","Returns a mutable reference to the layer at the specified …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the outline has color layers.","Returns true if there are no layers in the outline.","Returns the number of layers in the outline.","Creates a new empty outline.","Returns path data for the layer.","Returns path data for the outline.","Returns path data for the layer.","Returns the sequence of points for the layer.","Returns a reference to the sequence of points in the …","Returns the sequence of points for the layer.","Returns a mutable reference the sequence of points for the …","Returns a mutable reference to the sequence of points in …","","","Transforms this layer by the specified matrix.","Transforms the outline by the specified matrix.","","","","","","","","","","Returns the sequence of verbs for the layer.","Returns a reference to the sequence of verbs in the …","Returns the sequence of verbs for the layer.","Text direction.","","","Context that manages caches and transient buffers for …","Maps character clusters to positioned glyph clusters …","Builder for configuring a shaper.","Adds a character cluster to the shaper.","Adds a string to the shaper.","","","","","","","","","Builds a shaper for the current configuration.","Creates a new builder for constructing a shaper with this …","","","Glyph cluster modeling– output from the shaper.","","Specifies the text direction. The default value is …","","","Adds feature settings to the shaper.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Specifies whether to insert dotted circles for broken …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Specifies the language. The default value is <code>None</code>.","Returns the current font metrics in use by the shaper.","Creates a new shaping context.","Specifies the variation settings in terms of normalized …","Returns the current normalized variation coordinates in …","Specifies whether characters defined as default ignorable …","Specifies the script. The default value is <code>Script::Latin</code>.","Shapes the text and invokes the specified closure with each","Specifies the font size in pixels per em. The default …","","","","","","","","","","","","","","Adds variation settings to the shaper.","Creates a new shaping context with the specified maximum …","Glyph identifier and positioning information as a result …","Collection of glyphs and associated metadata corresponding …","Information for a glyph.","Computes the full advance width or height of the cluster.","Advance width or height.","","","","","","","","","","","","","If the cluster is a ligature, this contains the source …","Arbitrary user data.","Arbitrary user data– taken from the initial character of …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Sequence of glyphs for the cluster. May be empty for …","Glyph identifier.","Glyph flags.","Information about the textual content of the cluster.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the cluster is complex– that is if it …","Returns true if the cluster is empty. Empty clusters still …","Returns true if the cluster corresponds to multiple source …","Returns true if the glyph is an attached mark.","Returns true if the cluster contains a single glyph. Note …","Full source range of the cluster in original units …","","","","","","","","","","","","","Horizontal offset.","Vertical offset.","","","","","","","","","","","","","Iterator that yields Unicode properties and boundary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Property for the bidirectional algorithm.","Unicode block property.","","","","","","Bracket type of a character.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unicode general category property.","","","","","","","","","","","","","Chinese, Japanese and Korean languages.","A closing bracket with the associated opening bracket.","","Property for the cluster breaking algorithm.","Trait that exposes Unicode properties for the <code>char</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decomposition of a character.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Joining type property.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Representation of a language and its associated script and …","","","","","","","","","","","","","","","","","","Property for the line breaking algorithm.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Not a bracket.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An opening bracket with the associated closing bracket.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compact, constant time reference to Unicode properties for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unicode script property.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The version of the Unicode Character Database used to …","","","","","","","","","","","","","","","","","","","","","","Property for the word breaking algorithm.","","","","","","","","","","","","","","","","Returns an iterator yielding unicode properties and …","Returns the bidirectional type of the character.","Returns the bidirectional type of the character.","Returns the bidirectional type of the character.","Returns the unicode block that contains the character.","Returns the unicode block that contains the character.","Returns the unicode block that contains the character.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the bracket type of the character.","Returns the category of the character.","Returns the category of the character.","Returns the category of the character.","Returns the sequence of characters that represent the …","Returns the CJK language.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the character is an opening bracket, returns its …","Script aware cluster segmentation.","Returns the cluster break property for the character.","Returns the cluster break property for the character.","Returns the cluster break property for the character.","","","","","","","","","Returns the canonical combining class of the character.","Returns the canonical combining class of the character.","Returns the canonical combining class of the character.","Returns the composition of two characters, if any.","Returns the canonical decomposition of the character.","Returns the compatiblity decomposition of the character.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the language associated with the specified …","Returns the script associated with the specified OpenType …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the character is a closing bracket.","Returns true if the script requires complex shaping.","Returns true if the character is an emoji.","Returns true if the character is an emoji.","Returns true if the character is an emoji.","Returns true if the character is an extended pictographic …","Returns true if the character is an extended pictographic …","Returns true if the character is an extended pictographic …","Returns true if the script has cursive joining.","Returns true if the character is an opening bracket.","Returns the joining type of the character.","Returns the joining type of the character.","Returns the joining type of the character.","Returns the language component.","Returns the line break property for the character.","Returns the line break property for the character.","Returns the line break property for the character.","Returns the bidi class as a 32 bit bitmask.","Returns the mirror of the character, if any.","Returns the name of the language.","Returns the name of the script.","Returns true if the analysis indicates that bidi …","Returns true if the presence of this bidi class requires …","","","If the character is a closing bracket, returns its opening …","Parses a language tag.","","","","","","","","","Returns the codepoint properties.","Returns the region component.","Returns the script to which the character belongs.","Returns the script to which the character belongs.","Returns the script component.","Returns the script to which the character belongs.","Returns the associated OpenType language tag.","Returns the script as an OpenType tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the word break property for the character.","Returns the word break property for the character.","Returns the word break property for the character.","Anusvara class.","Base character.","Boundary type of a character or cluster.","Character output from the cluster parser.","Character cluster; output from the parser and input to the …","Information about a character including unicode properties …","Information about a cluster including content properties …","Emoji with color presentation.","Complete mapping.","Control character.","Emoji with default presentation.","Mapping should be skipped.","Presentation mode for an emoji cluster.","Halant modifier.","The best mapping so far.","Myanmar three character prefix.","Potential line break.","The maximum number of characters in a single cluster.","Mandatory line break.","Mark character.","Medial consonant Ra.","Newline (CR, LF, or CRLF).","Non-breaking space (U+00A0).","Not an emoji.","Not a space.","Not a boundary.","Other character.","Other space.","Parser that accepts a sequence of characters and outputs …","Pre-base form.","Reph form.","Shaping class of a character.","Source range of a cluster in code units.","Standard space.","Iterative status of mapping a character cluster to nominal …","Horizontal tab.","Emoji with text presentation.","Character input to the cluster parser.","Artibrary user data that can be associated with a …","Below base dependent vowel.","Pre-base vowel modifier.","Pre-base dependent vowel.","Variation selector.","Whitespace content of a cluster.","Start of a word.","Zero width joiner.","Zero width non-joiner.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the boundary state.","Returns the boundary state of the cluster.","The character.","The character.","Returns the sequence of characters in the cluster.","Resets the cluster to the intial empty state.","","","","","","","","","","","","","","","","","","","","","","","","","","","True if the character should be considered when mapping …","Arbitrary user data.","Arbitrary user data.","","","","","","","","Returns the emoji presentation mode of the cluster.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Nominal glyph identifier.","True if the character is ignorable.","Returns the cluster information.","Character information.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the cluster is a boundary.","Returns true if the cluster is missing an appropriate base …","Returns true if the cluster is an emoji.","Returns true if the cluster is empty.","Returns true for space or no break space.","Returns true if the cluster is whitespace.","Joining type of the character.","Length of the character in code units.","Applies a nominal glyph identifier mapping to the cluster, …","Returns the currently mapped sequence of characters in the …","Creates a new cluster parser for the specified script and …","Creates a new empty cluster.","Creates new character information from Unicode properties …","Parses the next cluster.","Offset of the character in code units.","Offset of the character in code units.","","","","","Returns the unicode properties for the character.","Returns the source range for the cluster in code units.","Shaping class of the character.","","","","","","","","","","","","","Converts the source range into a <code>usize</code> range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the primary user data for the cluster.","Returns the whitespace content of the cluster."],"i":[0,2,2,0,18,18,0,25,19,0,0,0,29,29,25,29,29,29,29,19,18,19,19,18,29,0,0,0,29,0,0,0,17,18,29,29,25,29,0,18,29,0,18,19,17,0,17,0,29,29,29,18,19,19,29,0,0,0,0,29,2,0,18,0,0,29,29,29,19,19,29,0,0,29,29,29,0,0,29,29,1,3,3,6,8,23,6,23,11,10,16,17,18,19,8,20,13,21,1,2,22,6,23,3,24,25,28,11,29,14,30,31,10,16,17,18,19,8,20,13,21,1,2,22,6,23,3,24,25,28,11,29,14,30,31,23,6,14,10,16,17,18,19,8,20,13,21,1,2,22,6,23,3,24,25,28,11,29,14,30,31,10,16,17,18,19,8,20,13,21,1,2,22,6,23,3,24,25,28,11,29,14,30,31,18,19,20,6,6,11,22,6,10,16,17,18,19,8,20,23,28,30,23,8,13,10,16,17,18,19,8,20,2,25,28,29,10,16,17,18,19,20,2,25,28,29,21,6,10,10,16,17,17,18,18,19,19,20,2,23,25,28,28,29,14,22,10,10,10,10,10,10,16,17,18,19,8,20,13,21,1,2,22,6,23,3,24,25,28,28,28,28,28,28,28,11,29,14,30,31,16,17,10,13,16,6,6,19,16,29,16,22,24,3,23,6,10,10,10,10,3,3,23,10,10,18,19,20,14,24,30,31,6,10,16,17,18,19,8,20,13,21,1,2,22,6,23,3,24,25,28,11,29,14,30,31,22,14,22,19,14,22,24,19,30,23,19,14,0,6,21,14,21,23,22,24,23,3,6,3,13,30,23,6,30,1,24,30,31,24,30,31,10,20,22,30,31,6,17,18,19,28,28,28,28,18,19,20,10,31,31,11,11,0,13,19,0,23,3,21,21,0,8,10,23,23,10,10,6,124,6,6,1,30,28,0,0,0,16,17,10,16,17,18,19,8,20,13,21,1,2,22,6,23,3,24,25,28,11,29,14,30,31,19,29,10,17,18,19,28,14,10,16,17,18,19,8,20,13,21,1,2,22,6,23,3,24,25,28,11,29,14,30,31,10,16,17,18,19,8,20,13,21,1,2,22,6,23,3,24,25,28,11,29,14,30,31,3,10,16,17,18,19,8,20,13,21,1,2,22,6,23,3,24,25,28,11,29,14,30,31,23,3,23,24,20,28,31,8,6,23,23,23,3,10,6,23,0,0,0,0,0,0,0,0,0,0,43,65,38,33,7,55,15,64,51,43,65,38,33,7,55,15,64,51,65,38,33,7,55,15,64,51,65,38,33,7,55,15,64,51,7,55,7,51,7,51,64,43,65,38,33,7,55,15,64,51,43,65,38,33,7,55,15,64,51,43,65,38,33,7,55,15,64,51,43,33,7,55,64,51,43,65,38,33,7,55,15,64,51,64,43,33,7,55,64,51,43,33,7,55,64,51,65,38,33,7,55,15,64,51,43,65,38,33,7,55,15,64,51,43,65,38,33,7,55,15,64,51,43,65,38,33,7,55,15,64,51,0,0,0,0,58,67,68,69,58,67,68,69,58,67,68,69,58,67,68,69,58,67,58,58,67,68,69,58,67,68,69,67,68,68,58,67,68,69,58,69,68,68,67,67,58,67,68,69,58,67,68,69,58,67,68,69,58,67,68,69,67,73,74,74,74,73,73,73,74,0,0,0,0,0,0,0,0,72,70,71,75,73,74,72,70,71,75,73,74,70,72,73,74,73,74,72,74,75,75,73,74,75,72,70,71,75,73,74,71,71,71,71,70,0,72,70,71,75,73,74,72,75,70,75,0,75,75,71,71,71,71,71,71,71,71,70,75,73,74,75,72,70,71,75,73,74,72,70,71,75,73,74,72,70,71,75,73,74,70,72,82,0,0,82,82,82,78,82,78,78,82,78,82,78,78,78,82,78,82,82,82,82,78,82,78,78,78,78,82,78,82,78,82,78,82,78,0,0,0,83,79,85,83,79,85,83,79,85,79,79,85,79,85,83,85,79,83,79,83,79,85,79,79,83,79,85,79,79,79,79,83,79,85,83,79,85,83,79,79,85,83,79,83,79,85,83,79,85,83,79,85,83,79,85,0,93,93,0,0,0,89,89,92,91,89,93,92,91,89,93,91,92,93,93,0,92,91,93,93,91,93,92,91,89,93,91,92,91,89,93,91,89,92,91,89,91,91,89,91,93,92,91,89,93,92,91,89,93,92,91,89,93,91,92,0,0,0,94,96,95,96,94,95,96,94,95,96,94,95,96,94,94,96,94,95,96,95,96,94,95,96,94,94,96,96,94,95,96,94,94,94,94,95,94,94,95,96,94,95,96,94,95,96,94,95,96,94,96,96,107,98,107,98,100,59,100,100,59,109,100,100,0,100,59,100,100,100,100,59,100,100,100,100,100,100,59,100,100,59,98,107,107,107,107,98,100,59,100,59,100,100,100,59,100,59,100,59,100,59,0,0,100,100,59,100,100,0,100,59,59,100,100,59,100,59,100,107,107,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,107,107,106,107,106,107,108,98,59,100,59,102,0,100,59,100,59,100,59,100,59,100,100,100,59,0,101,102,0,0,100,100,100,100,100,59,100,102,102,100,100,59,100,100,100,59,100,102,100,59,100,100,59,100,100,100,100,109,108,109,102,102,0,100,59,100,59,100,100,100,59,100,59,100,100,59,107,107,98,98,98,106,107,108,100,100,100,59,100,59,100,59,100,100,100,100,100,102,100,59,100,100,100,108,108,98,102,102,107,100,100,100,100,59,100,100,100,59,100,100,59,100,59,59,100,100,100,59,100,59,100,59,107,107,107,108,107,100,59,59,100,100,100,100,100,100,59,100,59,100,59,100,59,100,100,100,59,107,107,100,107,100,100,100,59,100,59,102,100,59,100,59,107,107,107,105,100,59,0,108,100,59,100,100,100,100,100,59,100,59,100,100,59,100,59,100,59,100,59,100,100,59,100,59,105,98,106,109,108,106,107,108,98,98,98,106,106,0,100,59,59,100,100,100,100,100,100,100,100,59,102,102,100,100,59,0,102,100,59,59,100,100,100,59,100,100,102,100,59,100,59,108,108,108,100,59,100,100,59,100,59,100,59,100,59,100,59,102,100,59,102,100,100,100,100,59,100,59,100,100,59,100,59,100,59,100,59,100,100,100,100,100,100,100,59,102,102,100,100,59,100,100,59,100,59,100,100,59,100,100,100,107,108,107,98,107,108,100,59,100,59,100,59,100,59,59,100,105,101,102,102,100,100,59,100,59,98,107,100,59,100,59,100,59,100,59,100,59,100,59,100,59,100,59,100,59,100,59,101,102,100,100,59,100,100,59,100,59,102,102,102,102,102,100,98,98,107,106,107,100,59,100,59,102,100,59,59,100,100,100,59,100,100,100,102,100,0,100,59,102,107,98,109,106,107,108,98,98,98,100,59,100,100,59,98,107,107,106,107,108,107,100,59,100,59,0,102,100,59,100,59,100,100,59,59,105,100,59,100,100,100,100,59,100,59,100,59,102,102,100,100,100,59,100,100,100,100,100,100,100,100,100,100,102,100,100,59,102,100,100,100,59,100,106,109,100,59,100,59,100,100,59,100,59,100,59,100,100,59,100,59,100,100,59,100,100,100,59,100,59,100,59,100,59,100,59,100,59,102,105,100,109,0,100,59,102,100,100,59,102,106,100,59,100,100,100,100,107,98,108,100,59,100,59,0,106,107,108,100,59,59,100,100,100,107,106,107,108,100,59,0,125,125,99,125,125,99,97,103,105,52,99,101,102,100,59,98,106,107,108,109,97,103,105,52,99,101,102,100,59,98,106,107,108,109,125,125,125,99,103,52,97,103,105,52,99,101,102,100,59,98,106,107,108,109,97,103,105,52,99,101,102,100,59,98,106,107,108,109,125,0,125,125,99,102,100,59,98,106,107,108,109,125,125,99,125,125,125,99,105,52,99,101,102,100,59,98,106,107,108,109,105,52,99,101,102,100,59,98,106,107,108,109,105,52,52,101,102,100,59,98,106,107,108,109,97,103,105,52,99,99,99,99,99,99,99,101,102,100,59,98,106,107,108,109,52,59,105,102,100,59,98,106,107,108,109,97,103,105,52,99,101,102,100,59,98,106,107,108,109,97,103,99,59,125,125,99,125,125,99,59,99,125,125,99,52,125,125,99,98,125,52,59,97,98,97,103,125,52,102,100,59,98,106,107,108,109,125,52,125,125,52,99,52,59,97,103,105,52,99,101,102,100,59,98,106,107,108,109,52,97,103,105,52,99,101,102,100,59,98,106,107,108,109,97,103,105,52,99,101,102,100,59,98,106,107,108,109,97,103,105,52,99,101,102,100,59,98,106,107,108,109,125,125,99,114,114,0,0,0,0,0,117,115,114,117,115,0,114,115,114,111,0,111,114,114,118,118,117,118,111,114,118,0,114,114,0,0,118,0,118,117,0,0,114,114,114,114,0,111,114,114,121,113,114,90,115,116,110,112,117,118,119,111,121,113,114,90,115,116,110,112,117,118,119,111,110,112,113,119,90,90,113,114,90,115,116,110,112,117,118,119,111,113,114,90,115,116,110,112,117,118,119,111,114,117,118,111,113,113,119,113,114,90,110,112,119,110,112,116,114,115,110,112,117,118,119,111,114,115,110,112,117,118,119,111,113,114,115,116,116,112,117,118,111,121,113,114,90,115,116,110,110,110,110,112,117,118,119,111,113,113,90,119,121,113,114,90,115,116,110,112,117,118,119,111,112,112,112,90,118,112,113,119,90,90,121,90,110,121,113,119,114,117,118,111,110,90,113,116,113,114,90,115,116,110,112,117,118,119,111,116,116,121,113,114,90,115,116,110,112,117,118,119,111,121,113,114,90,115,116,110,112,117,118,119,111,121,113,114,90,115,116,110,112,117,118,119,111,90,112],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,4],5],[[3,4],5],[6,7],[8,9],0,[6,10],0,[11,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[6,13],[14,15],[10,10],[16,16],[17,17],[18,18],[19,19],[8,8],[20,20],[13,13],[21,21],[1,1],[2,2],[22,22],[6,6],[23,23],[3,3],[24,24],[25,25],[[[28,[[0,[26,27]]]]],[[28,[[0,[26,27]]]]]],[11,11],[29,29],[14,14],[30,30],[31,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[18,18],32],[[19,19],32],[[20,20],32],[6,33],[6,7],[[11,4],9],[22,[[34,[12]]]],0,[[],10],[[],16],[[],17],[[],18],[[],19],[[],8],[[],20],[[],23],[[],[[28,[[0,[35,27]]]]]],[30,5],0,[8,9],[[13,36]],[[10,10],9],[[16,16],9],[[17,17],9],[[18,18],9],[[19,19],9],[[8,8],9],[[20,20],9],[[2,2],9],[[25,25],9],[[[28,[[0,[27,37]]]],[28,[[0,[27,37]]]]],9],[[29,29],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[21,38],[6,38],[[10,39],40],[[10,39],40],[[16,39],40],[[17,39],40],[[17,39],40],[[18,39],40],[[18,39],40],[[19,39],40],[[19,39],40],[[20,39],40],[[2,39],40],[[23,39],40],[[25,39],40],[[[28,[[0,[41,27]]]],39],40],[[[28,[[0,[27,42]]]],39],40],[[29,39],40],[[14,39],40],[22,43],[[],10],[19,10],[[]],[18,10],[17,10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[28,[27]]]],[[],[[28,[27]]]],[[],[[28,[27]]]],[[],[[28,[27]]]],[[]],[[],[[28,[27]]]],[[],[[28,[27]]]],[[]],[[]],[[]],[[]],[[]],[5,16],[5,17],[6,10],[6,13],[5,16],[[[34,[12]],44],[[45,[6]]]],[[[34,[12]],46],[[45,[6]]]],[5,19],[5,16],[47,29],[5,16],[[22,44],[[45,[6]]]],[[24,47],[[48,[12]]]],[3,47],0,[[6,[34,[49]]],3],[10,9],[10,9],[10,9],[10,9],[3,9],[3,9],0,[10,9],[[10,50]],[[18,50]],[[19,50]],[[20,50]],[14,29],[24,47],[30,44],[31,44],[6,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22],[14],[22,9],[19,9],[14,9],[22,9],[24,9],[19,9],[30,9],0,[19,9],[14,9],0,0,[21,[[45,[52]]]],[14,53],[21,54],0,[22,44],[24,47],[[23,5],23],[[3,5],3],[6,55],[[3,4],5],[[13,[56,[46]]],4],[30,5],0,[[6,[34,[49]]],23],[30,5],[1,[[45,[53]]]],[[24,[45,[53]]],[[45,[14]]]],[[30,[45,[53]]],[[45,[14]]]],[[31,[45,[53]]],[[45,[14]]]],[24,[[45,[29]]]],[30,29],[31,29],[[19,18,17],10],[[],20],[[[34,[12]]],[[45,[22]]]],[[30,5],49],[31,57],0,[53,[[45,[17]]]],[53,[[45,[18]]]],[53,[[45,[19]]]],[53,[[45,[[28,[5]]]]]],[53,[[45,[[28,[47]]]]]],[53,[[0,[57,26]]]],[53,[[0,[57,26]]]],[[18,18],[[45,[32]]]],[[19,19],[[45,[32]]]],[[20,20],[[45,[32]]]],[10],[[31,[45,[53]]],[[45,[14]]]],[31,[[45,[29]]]],[11,47],[11,47],0,[13,58],[19,47],0,[[23,5],23],[[3,5],3],[21,[[45,[59]]]],[21,54],0,[8,[[45,[5]]]],[10,19],0,0,[10,17],[[10,10],8],[[6,54],[[45,[[34,[12]]]]]],[54,[[45,[[34,[12]]]]]],[[6,54],[[45,[[34,[12]]]]]],[[6,54],[[45,[[34,[12]]]]]],[1,54],[30,54],0,[[[48,[12]]],54],[53,54],0,[16,5],[17,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,5],[29,47],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[3,4],5],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],0,[3,47],0,[24,[[45,[25]]]],[20,63],0,[31,57],[8,[[34,[[28,[5]]]]]],[6,64],0,0,0,[[3,4],5],[10,18],[6,65],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65,65],[38,38],[33,33],[7,7],[55,55],[15,15],[64,64],[51,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,47,4],[[45,[11]]]],[[55,29,[45,[53]]],[[45,[14]]]],[[7,4],[[45,[11]]]],[[51,53],[[45,[31]]]],[[7,47,4],[[45,[11]]]],[[51,53],[[45,[31]]]],[[64,54],[[45,[30]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,44],[33,44],[7,44],[55,44],[64,44],[51,44],[43,45],[65,45],[38,45],[33,45],[7,45],[55,45],[15,45],[64,45],[51,45],[[64,66],[[0,[57,26]]]],[[43,44],45],[[33,44],45],[[7,44],45],[[55,44],45],[[64,44],45],[[51,44],45],[43],[33],[7],[55],[64],[51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[58,58],[67,67],[68,68],[69,69],[[]],[[]],[[]],[[]],[[],58],[[],67],[[58,39],40],[[]],[[]],[[]],[[]],[6,58],[6,67],[6,68],[6,69],[67,47],[68,9],[68,9],[[]],[[]],[[]],[[]],[[58,6],13],[[69,6],64],[[68,6],7],[[68,6],7],[[67,6,[34,[49]]],3],[[67,6,[34,[49]]],23],[[]],[[]],[[]],[[]],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],62],[[],62],[[],62],[[],62],[67,47],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70,71],[[72,[56,[6]]],70],[73,73],[74,74],[[]],[[]],[[],72],[[],74],[[75,[48,[12]]],75],[[75,5],75],[[73,39],40],[[74,39],40],[[75,76],75],[[]],[[]],[[]],[[]],[[]],[[]],[71,9],[71,9],[71,9],[71,9],[[70,9],70],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],72],[[[34,[74]]],75],[[70,66],70],[[75,77],75],0,[[75,71,4],[[45,[78]]]],[[75,71,4,78],9],[[71,47,73],[[45,[78]]]],[[71,47,73,78],9],[[71,47,73],[[45,[78]]]],[[71,47,73,78],9],[[71,4],[[45,[79]]]],[[71,4,79],9],[[71,4],[[45,[79]]]],[[71,4,79],9],[[70,5],70],[[75,[56,[80]]],75],[[]],[[]],[[75,[45,[81]]],75],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[70,66],70],[44,72],0,0,0,0,0,[[]],[[]],[[]],[[]],[78],[82,82],[78,78],[[]],[[]],0,0,[[],82],[[],78],[[82,82],9],[[],9],[[82,39],40],[[]],[[]],[[]],[[]],[[],78],0,0,[[]],[[]],[[],61],[[],61],[[],61],[[],61],[[],62],[[],62],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[83,84],[79,84],[85,84],[79],[79,79],[85,85],[[]],[[]],[83,[[45,[47]]]],[85,[[45,[47]]]],[[],79],[[83,5,5]],[[79,5,5]],[[]],[[]],[[]],[[79,44],[[45,[85]]]],[[79,44],[[45,[83]]]],[[]],[[]],[[]],[79,9],[79,9],[79,44],[[],79],[83,86],[79,86],[85,86],[83,[[34,[87]]]],[79,[[34,[87]]]],[85,[[34,[87]]]],[83,[[34,[87]]]],[79,[[34,[87]]]],[[]],[[]],[[83,81]],[[79,81]],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],62],[[],62],[[],62],[83,[[34,[88]]]],[79,[[34,[88]]]],[85,[[34,[88]]]],0,0,0,0,0,0,[[89,90]],[[89,53]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[91,89],[[92,[56,[6]]],91],[93,93],[[]],0,[[],92],[[91,93],91],[[93,93],9],[[],9],[[91,66],91],[[93,39],40],[[]],[[]],[[]],[[]],[[91,9],91],[[]],[[]],[[]],[[]],[[91,[45,[52]]],91],[89,23],[[],92],[[91,66],91],[89,[[34,[49]]]],[[91,9],91],[[91,59],91],[[89,36]],[[91,5],91],[[]],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],62],[[],62],[[],62],[[],62],[[91,66],91],[44,92],0,0,0,[94,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[95,95],[96,96],[94,94],[[]],[[]],[[]],0,0,0,[[],95],[[],96],[[95,39],40],[[96,39],40],[[94,39],40],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[94,9],[94,9],[94,9],[95,9],[94,9],0,[[]],[[]],[[]],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],62],[[],62],[[],62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[66,97],[[],98],[[],98],[99,98],[[],100],[[],100],[99,100],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],101],[[],102],[[],102],[99,102],[103,[[34,[104]]]],[52,105],[[[97,[26]]],[[97,[26]]]],[103,103],[105,105],[52,52],[99,99],[101,101],[102,102],[100,100],[59,59],[98,98],[106,106],[107,107],[108,108],[109,109],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[45,[104]]]],0,[[],106],[[],106],[99,106],[[102,102],32],[[100,100],32],[[59,59],32],[[98,98],32],[[106,106],32],[[107,107],32],[[108,108],32],[[109,109],32],[[],12],[[],12],[99,12],[[104,104],[[45,[104]]]],[[],103],[[],103],[[],99],[[105,105],9],[[52,52],9],[[99,99],9],[[101,101],9],[[102,102],9],[[100,100],9],[[59,59],9],[[98,98],9],[[106,106],9],[[107,107],9],[[108,108],9],[[109,109],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[105,39],40],[[52,39],40],[[52,39],40],[[101,39],40],[[102,39],40],[[100,39],40],[[59,39],40],[[98,39],40],[[106,39],40],[[107,39],40],[[108,39],40],[[109,39],40],[[]],[[]],[[]],[[]],[104,99],[104,99],[[]],[46,99],[46,99],[110,99],[110,99],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,[[45,[52]]]],[54,[[45,[59]]]],[[105,50]],[[102,50]],[[100,50]],[[59,50]],[[98,50]],[[106,50]],[[107,50]],[[108,50]],[[109,50]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[99,9],[59,9],[[],9],[[],9],[99,9],[[],9],[[],9],[99,9],[59,9],[99,9],[[],109],[[],109],[99,109],[52,53],[[],107],[[],107],[99,107],[98,46],[[],[[45,[104]]]],[52,[[45,[53]]]],[59,53],[97,9],[98,9],[[[97,[[0,[57,26]]]]],45],[103,45],[[],[[45,[104]]]],[53,[[45,[52]]]],[[102,102],[[45,[32]]]],[[100,100],[[45,[32]]]],[[59,59],[[45,[32]]]],[[98,98],[[45,[32]]]],[[106,106],[[45,[32]]]],[[107,107],[[45,[32]]]],[[108,108],[[45,[32]]]],[[109,109],[[45,[32]]]],[[],99],[52,[[45,[53]]]],[[],59],[[],59],[52,[[45,[53]]]],[99,59],[52,[[45,[54]]]],[59,54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],60],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],108],[[],108],[99,108],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[110,111],[112,111],0,0,[90,[[34,[113]]]],[90],[113,113],[114,114],[90,90],[115,115],[116,116],[110,110],[112,112],[117,117],[118,118],[119,119],[111,111],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[114,114],32],[[117,117],32],[[118,118],32],[[111,111],32],0,0,0,[[],113],[[],114],[[],90],[[],110],[[],112],[[],119],[110],[112,117],0,[[114,114],9],[[115,115],9],[[110,110],9],[[112,112],9],[[117,117],9],[[118,118],9],[[119,119],9],[[111,111],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[113,39],40],[[114,39],40],[[115,39],40],[[116,39],40],[[116,39],40],[[112,39],40],[[117,39],40],[[118,39],40],[[111,39],40],[[]],[[]],[[]],[[]],[[]],[[]],[99,110],[99,110],[[]],[104,110],[[]],[[]],[[]],[[]],[[]],0,0,[90,112],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[112,9],[112,9],[112,9],[90,9],[118,9],[112,9],0,0,[[90,120],115],[90,[[34,[113]]]],[[59,[0,[57,26]]],[[121,[[0,[57,26]]]]]],[[],90],[[99,111],110],[[[121,[[0,[57,26]]]],90],9],0,0,[[114,114],[[45,[32]]]],[[117,117],[[45,[32]]]],[[118,118],[[45,[32]]]],[[111,111],[[45,[32]]]],[110,99],[90,116],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[116,[[122,[44]]]],[[],60],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[90,123],[112,118]],"c":[],"p":[[3,"Feature"],[4,"Action"],[3,"GlyphMetrics"],[6,"GlyphId"],[15,"f32"],[3,"FontRef"],[3,"BitmapStrikes"],[3,"Synthesis"],[15,"bool"],[3,"Attributes"],[3,"BitmapStrike"],[15,"u8"],[3,"Charmap"],[3,"LocalizedString"],[3,"Chars"],[3,"ObliqueAngle"],[4,"Style"],[3,"Weight"],[3,"Stretch"],[3,"CacheKey"],[3,"WritingSystem"],[3,"FontDataRef"],[3,"Metrics"],[3,"ColorPalette"],[4,"Usability"],[8,"Clone"],[8,"Copy"],[3,"Setting"],[4,"StringId"],[3,"Variation"],[3,"Instance"],[4,"Ordering"],[3,"ColorPalettes"],[15,"slice"],[8,"Default"],[8,"FnMut"],[8,"PartialEq"],[3,"Features"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Display"],[3,"Fonts"],[15,"usize"],[4,"Option"],[15,"u32"],[15,"u16"],[15,"array"],[6,"NormalizedCoord"],[8,"Hasher"],[3,"Instances"],[3,"Language"],[15,"str"],[6,"Tag"],[3,"LocalizedStrings"],[8,"Into"],[8,"Iterator"],[3,"CharmapProxy"],[4,"Script"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"Variations"],[3,"WritingSystems"],[8,"IntoIterator"],[3,"MetricsProxy"],[3,"BitmapStrikesProxy"],[3,"VariationsProxy"],[3,"ScalerBuilder"],[3,"Scaler"],[3,"ScaleContext"],[4,"StrikeWith"],[4,"Source"],[3,"Render"],[4,"Format"],[3,"Vector"],[3,"Image"],[3,"Outline"],[4,"Style"],[3,"Transform"],[4,"Content"],[3,"LayerMut"],[3,"Bounds"],[3,"Layer"],[8,"PathData"],[6,"Point"],[4,"Verb"],[3,"Shaper"],[3,"CharCluster"],[3,"ShaperBuilder"],[3,"ShapeContext"],[4,"Direction"],[3,"GlyphCluster"],[3,"GlyphInfo"],[3,"Glyph"],[3,"Analyze"],[4,"BidiClass"],[3,"Properties"],[4,"Block"],[4,"BracketType"],[4,"Category"],[3,"Decompose"],[15,"char"],[4,"Cjk"],[4,"ClusterBreak"],[4,"LineBreak"],[4,"WordBreak"],[4,"JoiningType"],[3,"CharInfo"],[4,"Boundary"],[3,"ClusterInfo"],[3,"Char"],[4,"ShapeClass"],[4,"Status"],[3,"SourceRange"],[4,"Emoji"],[4,"Whitespace"],[3,"Token"],[8,"Fn"],[3,"Parser"],[3,"Range"],[6,"UserData"],[8,"TableProvider"],[8,"Codepoint"]]},\
"sys_locale":{"doc":"A library to safely and easily obtain the current locale …","t":"F","n":["get_locale"],"q":[[0,"sys_locale"]],"d":["Returns the active locale for the system or application."],"i":[0],"f":[[[],[[2,[1]]]]],"c":[],"p":[[3,"String"],[4,"Option"]]},\
"tinyvec":{"doc":"<code>tinyvec</code> provides 100% safe vec-like data structures.","t":"IDDDDSNNNNNNQDDEEEDDLLLOOLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Array","ArrayVec","ArrayVecDrain","ArrayVecIterator","ArrayVecSplice","CAPACITY","Heap","Heap","Heap","Inline","Inline","Inline","Item","SliceVec","SliceVecDrain","TinyVec","TinyVecDrain","TinyVecIterator","TinyVecSplice","TryFromSliceError","append","append","append","array_vec","array_vec","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_slice","as_mut_slice","as_mut_slice","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","clear","clear","clear","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drain","drain","drain","drain_to_vec","drain_to_vec_and_reserve","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend_from_slice","extend_from_slice","extend_from_slice","fill","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array_empty","from_array_len","from_array_len","from_iter","from_iter","from_slice_len","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_heap","is_inline","last","last","last","last","len","len","len","len","len","move_to_the_heap","move_to_the_heap_and_reserve","new","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop","push","push","push","remove","remove","remove","reserve","reserve_exact","resize","resize","resize","resize_with","resize_with","resize_with","retain","retain","retain","set_len","set_len","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","splice","splice","split_off","split_off","split_off","swap_remove","swap_remove","swap_remove","tiny_vec","tiny_vec","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","truncate","truncate","truncate","try_append","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_array_len","try_from_array_len","try_from_slice_len","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity"],"q":[[0,"tinyvec"]],"d":["A trait for types that are an array.","An array-backed, vector-like data structure.","Draining iterator for <code>ArrayVec</code>","Iterator for consuming an <code>ArrayVec</code> and returning owned …","Splicing iterator for <code>ArrayVec</code> See <code>ArrayVec::splice</code>","The number of slots in the thing.","","","","","","","The type of the items in the thing.","A slice-backed vector-like data structure.","Draining iterator for <code>SliceVec</code>","A vector that starts inline, but can automatically move to …","Draining iterator for <code>TinyVecDrain</code>","Iterator for consuming an <code>TinyVec</code> and returning owned …","Splicing iterator for <code>TinyVec</code> See <code>TinyVec::splice</code>","The error type returned when a conversion from a slice to …","Move all values from <code>other</code> into this vec.","","Move all values from <code>other</code> into this vec.","Helper to make an <code>ArrayVec</code>.","Helper to make an <code>ArrayVec</code>.","","","","A <code>*mut</code> pointer to the backing array.","A <code>*mut</code> pointer to the backing slice.","A mutable pointer to the backing array.","Performs a <code>deref_mut</code>, into unique slice form.","Performs a <code>deref_mut</code>, into unique slice form.","Helper for getting the mut slice.","A <code>*const</code> pointer to the backing array.","A <code>*const</code> pointer to the backing slice.","A const pointer to the backing array.","","","","Gives a shared slice over the whole thing.","Performs a <code>deref</code>, into shared slice form.","Returns the remaining items of this iterator as a slice.","Performs a <code>deref</code>, into shared slice form.","Helper for getting the shared slice.","Returns the remaining items of this iterator as a slice.","Gives a unique slice over the whole thing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The capacity of the <code>ArrayVec</code>.","The capacity of the <code>SliceVec</code>.","The capacity of the <code>TinyVec</code>.","Truncates the <code>ArrayVec</code> down to length 0.","Truncates the <code>SliceVec</code> down to length 0.","Removes all elements from the vec.","","","","","","","","","","","","","","","Create a default-initialized instance of ourself, similar …","","","","","","","","","","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Drains all elements to a Vec","Drains all elements to a Vec, but reserves additional space","","","","","","","","","","","","","","","Clone each element of the slice into this <code>ArrayVec</code>.","","Clone each element of the slice into this vec.","Fill the vector until its capacity has been reached.","Fill the vector until its capacity has been reached.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The output has a length equal to the full array.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Uses the full slice as the initial length.","Calls <code>AsRef::as_mut</code> then uses the full slice as the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Wraps up an array as a new empty <code>ArrayVec</code>.","Wraps up an array and uses the given length as the initial …","Wraps up an array and uses the given length as the initial …","","","Wraps up a slice and uses the given length as the initial …","","","","","","","","","","Inserts an item at the position given, moving all …","Inserts an item at the position given, moving all …","Inserts an item at the position given, moving all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner array of the <code>ArrayVec</code>.","","","","","","","","","","","","","","","Checks if the length is 0.","Checks if the length is 0.","If the vec is empty.","Returns whether elements are on heap","Returns whether elements are on stack","","","","","The length of the <code>ArrayVec</code> (in elements).","","The length of the <code>SliceVec</code> (in elements).","The length of the vec (in elements).","","Moves the content of the TinyVec to the heap, if it’s …","If TinyVec is inline, moves the content of it to the heap. …","Makes a new, empty <code>ArrayVec</code>.","Makes a new, empty vec.","","","","","","","","","","","","","","","","","","","","","Remove and return the last element of the vec, if there is …","Remove and return the last element of the vec, if there is …","Remove and return the last element of the vec, if there is …","Place an element onto the end of the vec.","Place an element onto the end of the vec.","Place an element onto the end of the vec.","Removes the item at <code>index</code>, shifting all others down by one …","Removes the item at <code>index</code>, shifting all others down by one …","Removes the item at <code>index</code>, shifting all others down by one …","Reserves additional space. Moves to the heap if array can…","Reserves additional space. Moves to the heap if array can…","As <code>resize_with</code> and it clones the value as the closure.","As <code>resize_with</code> and it clones the value as the closure.","Resize the vec to the new length.","Resize the vec to the new length.","Resize the vec to the new length.","Resize the vec to the new length.","Walk the vec and keep only the elements that pass the …","Walk the vec and keep only the elements that pass the …","Walk the vec and keep only the elements that pass the …","Forces the length of the vector to <code>new_len</code>.","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector as much as possible. It …","","","","","","","Creates a splicing iterator that removes the specified …","Creates a splicing iterator that removes the specified …","Splits the collection at the point given.","Splits the collection at the point given.","Splits the collection at the point given.","Remove an element, swapping the end of the vec into its …","Remove an element, swapping the end of the vec into its …","Remove an element, swapping the end of the vec into its …","Helper to make a <code>TinyVec</code>.","Helper to make a <code>TinyVec</code>.","","","","","","","","Reduces the vec’s length to the given value.","Reduces the vec’s length to the given value.","Reduces the vec’s length to the given value.","Move all values from <code>other</code> into this vec. If appending …","","The output has a length equal to that of the slice, with …","","","","","","","","","","","Wraps an array, using the given length as the starting …","Wraps an array, using the given length as the starting …","Wraps a slice, using the given length as the starting …","Tries to insert an item at the position given, moving all …","","","","","","","","","","","","Tries to place an element onto the end of the vec. Returns …","","","","","","","","","","","","Makes a new TinyVec with <em>at least</em> the given capacity."],"i":[0,0,0,0,0,1,5,14,8,5,14,8,1,0,0,0,0,0,0,0,2,4,5,0,0,2,4,5,2,4,5,2,4,5,2,4,5,2,4,5,1,2,7,4,5,8,1,2,2,20,7,16,4,4,17,5,5,14,21,8,11,2,2,20,7,16,4,4,17,5,5,14,21,8,11,2,4,5,2,4,5,2,5,11,2,5,2,5,11,2,4,5,7,14,8,1,2,4,5,2,4,5,2,4,5,2,4,5,2,2,20,17,21,2,2,2,4,4,5,5,5,2,4,5,2,4,5,2,4,2,2,2,2,2,2,2,2,2,7,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,8,11,11,16,14,2,2,20,7,16,4,4,4,17,5,5,5,5,5,5,14,21,8,11,2,2,5,2,5,4,2,4,5,2,4,5,2,4,5,2,4,5,2,20,7,16,4,17,5,14,21,8,11,2,2,2,2,20,7,16,4,17,5,5,5,14,21,8,2,4,5,5,5,7,16,14,8,2,20,4,5,21,5,5,2,5,20,7,16,17,14,21,8,20,7,16,14,21,8,7,16,14,8,2,4,5,2,4,5,2,4,5,2,4,5,5,5,2,4,5,2,4,5,2,4,5,2,4,5,20,7,16,14,21,8,2,5,2,4,5,2,4,5,0,0,2,5,11,2,4,5,11,2,4,5,2,2,2,20,7,16,4,17,5,14,21,8,11,2,5,4,2,2,20,7,16,4,17,5,14,21,8,11,2,2,20,7,16,4,17,5,14,21,8,11,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[[4,[3]],[4,[3]]]],[[[5,[1]],[5,[1]]]],0,0,[[[2,[1]]],6],[4,6],[[[5,[1]]],6],[[[2,[1]]]],[4],[[[5,[1]]]],[[[2,[1]]],6],[4,6],[[[5,[1]]],6],[[[2,[1]]]],[4],[[[5,[1]]]],[[[2,[1]]],6],[4,6],[[[5,[1]]],6],[[],6],[[[2,[1]]],6],[[[7,[1]]],6],[4,6],[[[5,[1]]],6],[[[8,[1]]],6],[[],6],[[[2,[1]]],6],[[]],[[]],[[]],[[]],[[]],[4,6],[[]],[[[5,[1]]],6],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],6],[[]],[[]],[[]],[[]],[4,6],[[]],[[[5,[1]]],6],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],9],[4,9],[[[5,[1]]],9],[[[2,[1]]]],[[[4,[3]]]],[[[5,[1]]]],[[[2,[[0,[1,10]]]]],[[2,[[0,[1,10]]]]]],[[[5,[[0,[1,10]]]]],[[5,[[0,[1,10]]]]]],[11,11],[[[2,[[0,[1,10]]]],[2,[[0,[1,10]]]]]],[[[5,[[0,[1,10]]]],[5,[[0,[1,10]]]]]],[[]],[[]],[[]],[[[2,[1]],[2,[1]]],12],[[[4,[13]],[4,[13]]],12],[[[5,[1]],[5,[1]]],12],[[[7,[1]]],9],[[[14,[1]]],9],[[[8,[1]]],9],[[]],[[],[[2,[1]]]],[[],4],[[],[[5,[1]]]],[[[2,[1]]]],[4],[[[5,[1]]]],[[[2,[1]]]],[4],[[[5,[1]]]],[[[2,[1]],[15,[9]]],16],[[[4,[3]],[15,[9]]],[[17,[3]]]],[[[5,[1]],[15,[9]]],[[14,[1]]]],[[[2,[1]]],18],[[[2,[1]],9],18],[[[20,[1,19]]]],[[[17,[3]]]],[[[21,[1,19]]]],[[[2,[1]],[2,[1]]],22],[[[2,[1]],1],22],[[[2,[1]],6],22],[[[4,[23]],[4,[23]]],22],[[[4,[23]],[6,[23]]],22],[[[5,[1]],6],22],[[[5,[1]],1],22],[[[5,[1]],[5,[1]]],22],[[[2,[1]],24]],[[4,24]],[[[5,[1]],24]],[[[2,[1]],6]],[[[4,[10]],[6,[10]]]],[[[5,[1]],6]],[[[2,[1]],24]],[[4,24]],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[7,[1]],25],26],[[[4,[27]],25],26],[[[4,[28]],25],26],[[[4,[29]],25],26],[[[4,[30]],25],26],[[[4,[31]],25],26],[[[4,[32]],25],26],[[[4,[33]],25],26],[[[4,[34]],25],26],[[[4,[35]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[8,[1]],25],26],[[11,25],26],[[11,25],26],[[[16,[3]],36]],[[[14,[1]],36]],[1,[[2,[1]]]],[[]],[[]],[[]],[[]],[6,4],[[[37,[6]]],4],[[]],[[]],[[]],[38],[[[6,[[0,[10,3]]]]],[[5,[1]]]],[[[2,[1]]],[[5,[1]]]],[1,[[5,[1]]]],[[[6,[[0,[10,3]]]]],[[5,[1]]]],[[]],[[]],[[]],[[]],[[],2],[[1,9],[[2,[1]]]],[[1,9],[[5,[1]]]],[24,[[2,[1]]]],[24,[[5,[1]]]],[[6,9],4],[[[2,[1]],39]],[[[4,[40]],39]],[[[5,[1]],39]],[[[2,[1]],[41,[6]]]],[[4,[41,[6]]]],[[[5,[1]],[41,[6]]]],[[[2,[1]],[41,[6]]]],[[4,[41,[6]]]],[[[5,[1]],[41,[6]]]],[[[2,[1]],9]],[[4,9]],[[[5,[1]],9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],1],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[]],[[]],[[]],[4],[[]],[[[5,[1]]]],[[[5,[1]]]],[[[5,[1]]]],[[]],[[]],[[]],[[[2,[1]]],22],[4,22],[[[5,[1]]],22],[[[5,[1]]],22],[[[5,[1]]],22],[[[7,[1]]],42],[[[16,[3]]],42],[[[14,[1]]],42],[[[8,[1]]],42],[[[2,[1]]],9],[[[20,[1,19]]],9],[4,9],[[[5,[1]]],9],[[[21,[1,19]]],9],[[[5,[1]]]],[[[5,[1]],9]],[[],[[2,[1]]]],[[],[[5,[1]]]],[[[20,[1,19]]],42],[[[7,[1]]],42],[[[16,[3]]],42],[[[17,[3]]],42],[[[14,[1]]],42],[[[21,[1,19]]],42],[[[8,[1]]],42],[[[20,[1,[0,[19,43]]]]],42],[[[7,[1]]],42],[[[16,[3]]],42],[[[14,[1]]],42],[[[21,[1,[0,[19,43]]]]],42],[[[8,[1]]],42],[[[7,[1]],9],42],[[[16,[3]],9],42],[[[14,[1]],9],42],[[[8,[1]],9],42],[[[2,[1]],[2,[1]]],[[42,[12]]]],[[[4,[44]],[4,[44]]],[[42,[12]]]],[[[5,[1]],[5,[1]]],[[42,[12]]]],[[[2,[1]]],42],[[[4,[3]]],[[42,[3]]]],[[[5,[1]]],42],[[[2,[1]]]],[4],[[[5,[1]]]],[[[2,[1]],9]],[[[4,[3]],9],3],[[[5,[1]],9]],[[[5,[1]],9]],[[[5,[1]],9]],[[[2,[1]],9]],[[[4,[10]],9,10]],[[[5,[1]],9]],[[[2,[1]],9,36]],[[4,9,36]],[[[5,[1]],9,36]],[[[2,[1]],36]],[[[4,[3]],36]],[[[5,[1]],36]],[[[2,[1]],9]],[[4,9]],[[[5,[1]]]],[[[20,[1,19]]]],[[[7,[1]]]],[[[16,[3]]]],[[[14,[1]]]],[[[21,[1,19]]]],[[[8,[1]]]],[[[2,[1]],[15,[9]],24],[[20,[1,45]]]],[[[5,[1]],[15,[9]],24],[[21,[1,45]]]],[[[2,[1]],9],[[2,[1]]]],[[4,9],4],[[[5,[1]],9],[[5,[1]]]],[[[2,[1]],9]],[[[4,[3]],9],3],[[[5,[1]],9]],0,0,[[]],[[]],[[]],[[],46],[[],46],[[],46],[[],46],[[[2,[1]],9]],[[[4,[3]],9]],[[[5,[1]],9]],[[[2,[1]],[2,[1]]],[[42,[[2,[1]]]]]],[[],47],[[[6,[[0,[10,3]]]]],[[47,[[2,[1]]]]]],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[1,9],[[47,[[2,[1]],1]]]],[[1,9],[[47,[[5,[1]],1]]]],[[6,9],[[42,[4]]]],[[[2,[1]],9],42],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[[2,[1]]],42],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[9,[[5,[1]]]]],"c":[],"p":[[8,"Array"],[3,"ArrayVec"],[8,"Default"],[3,"SliceVec"],[4,"TinyVec"],[15,"slice"],[3,"ArrayVecIterator"],[4,"TinyVecIterator"],[15,"usize"],[8,"Clone"],[3,"TryFromSliceError"],[4,"Ordering"],[8,"Ord"],[4,"TinyVecDrain"],[8,"RangeBounds"],[3,"ArrayVecDrain"],[3,"SliceVecDrain"],[3,"Vec"],[8,"Iterator"],[3,"ArrayVecSplice"],[3,"TinyVecSplice"],[15,"bool"],[8,"PartialEq"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[8,"Pointer"],[8,"Debug"],[8,"Octal"],[8,"Binary"],[8,"LowerExp"],[8,"UpperHex"],[8,"UpperExp"],[8,"LowerHex"],[8,"Display"],[8,"FnMut"],[8,"AsMut"],[15,"never"],[8,"Hasher"],[8,"Hash"],[8,"SliceIndex"],[4,"Option"],[8,"DoubleEndedIterator"],[8,"PartialOrd"],[3,"Fuse"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"tinyvec_macros":{"doc":"","t":"O","n":["impl_mirrored"],"q":[[0,"tinyvec_macros"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"ttf_parser":{"doc":"A high-level, safe, zero-allocation TrueType font parser.","t":"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNEDNNNDNNNNNNNINNNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNDDDDNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNINNEENNNNNNNNDEDDNDNNNNSNNNNNNNNNNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNDDNNNNNNNNNNNNNNNDNNNNNNNDDNENENNNNNNAMMALLAMMMMMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMMAMAMMAMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKAMMLLLLKMMMLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLAMMLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMMAMMLLLLAMMLLLLLLLLLLLLAMMAMMAMMLLLAMMLLMAMMMAMMAMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLAMMAMMLLLMLKAMAMMMAMMMAMMKAMMAMMAMLLLLLLMAAMMLKLLLLLLLLLMMAMMLLKLLLAMMLLLLLLAMMLLMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLAMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLAMMMMAMMMMLLLMMLMMMMMMMMMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDDDGDDLLLLLLLLLLALLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMLLLLALLLLLLLLLLLLLLLLLLLLLLRRRRDDDDLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLMMLLLLMMLLLLLLMMLLDLLLLLLLLLLLLLLNENENNNNNDDDDDDDDDDDDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLMMMLLLMMLLLLLLLLLLLLLLLLLLLDDMLLLLLLLLMLLLLLMLLMMMLLMLLLLLLLLNNENNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDDNDNNDDENNNNNDDDNDNDNDNEDDENEDDNDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMMMMMLMMMMMMMMMMMMNDGDNNNNDNGGDNDNDDGNEEMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMDLLLLLLLLLLLLLENNDLLLLLLLLLLLLLLMMLLLLLLLLLLLMDMLLLLMLLLMMLLLLLDDLMMLLLLLLLLLLLLLLMMLLLMLLLLLLLLDLLLLLLLLLLLLLLENNNNDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLMMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDDENNNNNDDDDDDDDDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMNNELLLLLLLLLLLLLLLDDDDDDDDDDDDDDDLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMLMLLLLLLLLLLLLLLLMMLMLLLMLLLLLLLMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMDLLLLLLLMLLLLLDDDNDDDDNDDNDNNDEDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLNNNDDDEDNNLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMLMAMMLLLMLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRREDGGGEEEDGGDNNNNNNNNNNGDGDDDGGIDDDDIDDGGDDGGGMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMMMLMLLKKLLLLLLMLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNNNENNDNNNEDNNNDEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMMMDDLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLMLLLLMLLLLLLLLLLLLLLLMMMDMLLLLLMLLLMMLLLLLDDLLLLLLLLMLLLLMLLLMLLLLLLLLLLM","n":["Afrikaans_SouthAfrica","Albanian_Albania","Alsatian_France","Amharic_Ethiopia","Arabic_Algeria","Arabic_Bahrain","Arabic_Egypt","Arabic_Iraq","Arabic_Jordan","Arabic_Kuwait","Arabic_Lebanon","Arabic_Libya","Arabic_Morocco","Arabic_Oman","Arabic_Qatar","Arabic_SaudiArabia","Arabic_Syria","Arabic_Tunisia","Arabic_UAE","Arabic_Yemen","ArgumentsStackLimitReached","Armenian_Armenia","Assamese_India","Azeri_Cyrillic_Azerbaijan","Azeri_Latin_Azerbaijan","Bashkir_Russia","Basque_Basque","BboxOverflow","Belarusian_Belarus","Bengali_Bangladesh","Bengali_India","BitmapGray2","BitmapGray2Packed","BitmapGray4","BitmapGray4Packed","BitmapGray8","BitmapMono","BitmapMonoPacked","BitmapPremulBgra32","Black","BlendRegionsLimitReached","Bold","Bosnian_Cyrillic_BosniaAndHerzegovina","Bosnian_Latin_BosniaAndHerzegovina","Breton_France","Bulgarian_Bulgaria","CFFError","Catalan_Catalan","Chinese_HongKongSAR","Chinese_MacaoSAR","Chinese_PeoplesRepublicOfChina","Chinese_Singapore","Chinese_Taiwan","Condensed","Corsican_France","Croatian_Croatia","Croatian_Latin_BosniaAndHerzegovina","Custom","Czech_CzechRepublic","Danish_Denmark","Dari_Afghanistan","DataAfterEndChar","Divehi_Maldives","Dutch_Belgium","Dutch_Netherlands","Editable","English_Australia","English_Belize","English_Canada","English_Caribbean","English_India","English_Ireland","English_Jamaica","English_Malaysia","English_NewZealand","English_RepublicOfThePhilippines","English_Singapore","English_SouthAfrica","English_TrinidadAndTobago","English_UnitedKingdom","English_UnitedStates","English_Zimbabwe","Estonian_Estonia","Expanded","ExtraBold","ExtraCondensed","ExtraExpanded","ExtraLight","Face","FaceIndexOutOfBounds","FaceParsingError","FaceTables","Faroese_FaroeIslands","Filipino_Philippines","Finnish_Finland","Fixed","French_Belgium","French_Canada","French_France","French_Luxembourg","French_PrincipalityOfMonaco","French_Switzerland","Frisian_Netherlands","FromData","Galician_Galician","Georgian_Georgia","German_Austria","German_Germany","German_Liechtenstein","German_Luxembourg","German_Switzerland","GlyphId","Greek_Greece","Greenlandic_Greenland","Gujarati_India","Hausa_Latin_Nigeria","Hebrew_Israel","Hindi_India","Hungarian_Hungary","Icelandic_Iceland","Igbo_Nigeria","Indonesian_Indonesia","Installable","Inuktitut_Canada","Inuktitut_Latin_Canada","InvalidArgumentsStackLength","InvalidItemVariationDataIndex","InvalidNumberOfBlendOperands","InvalidOperator","InvalidSeacCode","InvalidSubroutineIndex","Irish_Ireland","Iso","Italian_Italy","Italian_Switzerland","Italic","Japanese_Japan","Kannada_India","Kazakh_Kazakhstan","Khmer_Cambodia","Kiche_Guatemala","Kinyarwanda_Rwanda","Kiswahili_Kenya","Konkani_India","Korean_Korea","Kyrgyz_Kyrgyzstan","Language","Lao_LaoPDR","Latvian_Latvia","LazyArray16","LazyArray32","LazyArrayIter16","LazyArrayIter32","Light","LineMetrics","Lithuanian_Lithuania","LowerSorbian_Germany","Luxembourgish_Luxembourg","Macedonian_NorthMacedonia","Macintosh","Malay_BruneiDarussalam","Malay_Malaysia","Malayalam_India","MalformedFont","Maltese_Malta","Maori_NewZealand","Mapudungun_Chile","Marathi_India","Medium","MissingEndChar","MissingMoveTo","Mohawk_Mohawk","Mongolian_Cyrillic_Mongolia","Mongolian_Traditional_PeoplesRepublicOfChina","Nepali_Nepal","NestingLimitReached","NoGlyph","NoHeadTable","NoHheaTable","NoLocalSubroutines","NoMaxpTable","Normal","Normal","Normal","NormalizedCoordinate","Norwegian_Bokmal_Norway","Norwegian_Nynorsk_Norway","Oblique","Occitan_France","Odia_India","Other","OutlineBuilder","PNG","Pashto_Afghanistan","Permissions","PlatformId","Polish_Poland","Portuguese_Brazil","Portuguese_Portugal","PreviewAndPrint","Punjabi_India","Quechua_Bolivia","Quechua_Ecuador","Quechua_Peru","RasterGlyphImage","RasterImageFormat","RawFace","RawFaceTables","ReadOutOfBounds","Rect","Restricted","Romanian_Romania","Romansh_Switzerland","Russian_Russia","SIZE","Sami_Inari_Finland","Sami_Lule_Norway","Sami_Lule_Sweden","Sami_Northern_Finland","Sami_Northern_Norway","Sami_Northern_Sweden","Sami_Skolt_Finland","Sami_Southern_Norway","Sami_Southern_Sweden","Sanskrit_India","ScriptMetrics","SemiBold","SemiCondensed","SemiExpanded","Serbian_Cyrillic_BosniaAndHerzegovina","Serbian_Cyrillic_Serbia","Serbian_Latin_BosniaAndHerzegovina","Serbian_Latin_Serbia","SesothoSaLeboa_SouthAfrica","Setswana_SouthAfrica","Sinhala_SriLanka","Slovak_Slovakia","Slovenian_Slovenia","Spanish_Argentina","Spanish_Bolivia","Spanish_Chile","Spanish_Colombia","Spanish_CostaRica","Spanish_DominicanRepublic","Spanish_Ecuador","Spanish_ElSalvador","Spanish_Guatemala","Spanish_Honduras","Spanish_Mexico","Spanish_ModernSort_Spain","Spanish_Nicaragua","Spanish_Panama","Spanish_Paraguay","Spanish_Peru","Spanish_PuertoRico","Spanish_TraditionalSort_Spain","Spanish_UnitedStates","Spanish_Uruguay","Spanish_Venezuela","Style","Swedish_Finland","Swedish_Sweden","Syriac_Syria","TableRecord","Tag","Tajik_Cyrillic_Tajikistan","Tamazight_Latin_Algeria","Tamil_India","Tatar_Russia","Telugu_India","Thai_Thailand","Thin","Tibetan_PRC","Turkish_Turkey","Turkmen_Turkmenistan","Uighur_PRC","Ukrainian_Ukraine","UltraCondensed","UltraExpanded","Unicode","UnicodeRanges","Unknown","UnknownMagic","UnsupportedOperator","UpperSorbian_Germany","Urdu_IslamicRepublicOfPakistan","Uzbek_Cyrillic_Uzbekistan","Uzbek_Latin_Uzbekistan","Variation","VariationAxis","Vietnamese_Vietnam","Weight","Welsh_UnitedKingdom","Width","Windows","Wolof_Senegal","Yakut_Russia","Yi_PRC","Yoruba_Nigeria","ZeroBBox","ankr","ankr","ankr","apple_layout","as_u32","ascender","avar","avar","avar","axis","bdat","bdat","binary_search","binary_search","binary_search_by","binary_search_by","bloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capital_height","cbdt","cbdt","cbdt","cblc","cblc","cff","cff","cff","cff2","cff2","cff2","check_sum","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","cmap","cmap","cmap","cmp","cmp","count","count","curve_to","data","data","def_value","default","default","default","default","default","default","descender","ebdt","ebdt","eblc","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","feat","feat","feat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fonts_in_collection","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes_lossy","from_raw_tables","from_slice","from_slice","fvar","fvar","fvar","gdef","gdef","gdef","get","get","get","global_bounding_box","glyf","glyf","glyf","glyph_bounding_box","glyph_hor_advance","glyph_hor_side_bearing","glyph_index","glyph_index_by_name","glyph_name","glyph_raster_image","glyph_svg_image","glyph_variation_index","glyph_ver_advance","glyph_ver_side_bearing","glyph_y_origin","gpos","gpos","gpos","gsub","gsub","gsub","gvar","gvar","gvar","has_non_default_variation_coordinates","hash","hash","head","head","head","height","height","height","hhea","hhea","hhea","hidden","hmtx","hmtx","hmtx","hvar","hvar","hvar","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_bitmap_embedding_allowed","is_bold","is_empty","is_empty","is_italic","is_monospaced","is_null","is_oblique","is_regular","is_subsetting_allowed","is_variable","isiXhosa_SouthAfrica","isiZulu_SouthAfrica","italic_angle","kern","kern","kern","kerx","kerx","kerx","last","len","len","length","line_gap","line_to","loca","loca","math","math","math","max_value","maxp","maxp","maxp","min_value","morx","morx","morx","move_to","mvar","mvar","mvar","name","name","name","name_id","name_id","names","new","new","next","next","number_of_glyphs","offset","opentype_layout","os2","os2","os2","outline_glyph","parse","parse","parse","parse","parse","parse","parse","partial_cmp","partial_cmp","permissions","pixels_per_em","position","post","post","post","primary_language","provide","quad_to","range","raw_face","region","sbix","sbix","sbix","set_variation","slice","strikeout_metrics","style","subscript_metrics","superscript_metrics","svg","svg","svg","table","table_data","table_records","tables","tag","tag","thickness","to_bytes","to_chars","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","trak","trak","trak","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typographic_ascender","typographic_descender","typographic_line_gap","underline_metrics","unicode_ranges","units_per_em","value","variation_axes","variation_coordinates","vertical_ascender","vertical_descender","vertical_height","vertical_line_gap","vhea","vhea","vhea","vmtx","vmtx","vorg","vorg","vorg","vvar","vvar","weight","width","width","width","x","x_height","x_max","x_min","x_offset","x_size","y","y_max","y_min","y_offset","y_size","Point","Table","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","equivalent","fmt","fmt","from","from","into","into","parse","parse","points","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y","ExtendedStateTable","GenericStateEntry","Lookup","StateEntry","StateTable","ValueOffset","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","class","class","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","entry","entry","extra","flags","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","has_advance","has_mark","has_offset","has_push","has_reset","into","into","into","into","into","kerning","new_state","new_state","next","parse","parse","parse","state","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","value_offset","DELETED_GLYPH","END_OF_TEXT","OUT_OF_BOUNDS","START_OF_TEXT","AxisValueMap","SegmentMaps","SegmentMapsIter","Table","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","from","from_coordinate","into","into","into","into","into_iter","into_iter","is_empty","len","map_coordinates","next","parse","parse","segment_maps","to_coordinate","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Table","borrow","borrow_mut","clone","clone_into","fmt","from","get","into","parse","to_owned","try_from","try_into","type_id","Table","borrow","borrow_mut","clone","clone_into","fmt","from","into","parse","to_owned","try_from","try_into","type_id","Matrix","Table","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","glyph_index","glyph_index_by_name","glyph_name","glyph_width","into","into","kx","ky","matrix","number_of_glyphs","outline","parse","sx","sy","to_owned","to_owned","try_from","try_from","try_into","try_into","tx","ty","type_id","type_id","Table","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","outline","parse","to_owned","try_from","try_into","type_id","ByteEncodingTable","Format","Found","GlyphVariationResult","HighByteMappingThroughTable","ManyToOneRangeMappings","MixedCoverage","SegmentMappingToDeltaValues","SegmentedCoverage","Subtable","Subtable0","Subtable10","Subtable12","Subtable13","Subtable14","Subtable2","Subtable4","Subtable6","Subtables","SubtablesIter","Table","TrimmedArray","TrimmedTableMapping","UnicodeVariationSequences","UseDefault","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codepoints","codepoints","codepoints","codepoints","codepoints","codepoints","codepoints","codepoints","default","encoding_id","eq","equivalent","first_code_point","first_code_point","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","glyph_ids","glyph_index","glyph_index","glyph_index","glyph_index","glyph_index","glyph_index","glyph_index","glyph_index","glyph_index","glyph_variation_index","glyphs","glyphs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_unicode","len","next","parse","parse","parse","parse","parse","parse","parse","parse","parse","platform_id","subtables","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","FeatureName","FeatureNames","FeatureNamesIter","SettingName","Table","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default_setting_index","exclusive","feature","find","fmt","fmt","fmt","fmt","from","from","from","from","from","get","into","into","into","into","into","into_iter","into_iter","is_empty","len","name_index","name_index","names","next","parse","parse","setting","setting_names","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Table","VariationAxis","axes","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","def_value","eq","fmt","fmt","from","from","hidden","into","into","max_value","min_value","name_id","parse","parse","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Base","Component","GlyphClass","Ligature","Mark","Table","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","eq","equivalent","fmt","from","from","glyph_class","glyph_mark_attachment_class","glyph_variation_delta","has_glyph_classes","hash","into","into","is_mark_glyph","parse","partial_cmp","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Table","borrow","borrow_mut","clone","clone_into","fmt","from","into","outline","parse","to_owned","try_from","try_into","type_id","Anchor","AnchorMatrix","ChainContext","ClassMatrix","Context","Cursive","CursiveAdjustment","CursiveAnchorSet","Device","Format1","Format1","Format2","Format2","Hinting","HintingDevice","LigatureArray","MarkArray","MarkToBase","MarkToBaseAdjustment","MarkToLigature","MarkToLigatureAdjustment","MarkToMark","MarkToMarkAdjustment","Pair","PairAdjustment","PairSet","PairSets","PositioningSubtable","Single","SingleAdjustment","ValueRecord","ValueRecordsArray","Variation","VariationDevice","anchors","base_coverage","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cols","coverage","coverage","coverage","coverage","default","entry","exit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get","get","get","inner_index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","len","len","len","len","len","ligature_array","ligature_coverage","mark1_coverage","mark2_coverage","mark2_matrix","mark_coverage","mark_coverage","marks","marks","marks","outer_index","parse","rows","sets","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","x","x_advance","x_advance_device","x_delta","x_device","x_placement","x_placement_device","y","y_advance","y_advance_device","y_delta","y_device","y_placement","y_placement_device","classes","coverage","coverage","matrix","sets","coverage","coverage","value","values","Alternate","AlternateSet","AlternateSets","AlternateSubstitution","ChainContext","Context","Format1","Format2","Ligature","Ligature","LigatureSet","LigatureSets","LigatureSubstitution","Multiple","MultipleSubstitution","ReverseChainSingle","ReverseChainSingleSubstitution","Sequence","SequenceList","Single","SingleSubstitution","SubstitutionSubtable","alternate_sets","alternates","backtrack_coverages","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","coverage","coverage","coverage","coverage","coverage","coverage","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","glyph","into","into","into","into","into","into","into","into","into","is_reverse","ligature_sets","lookahead_coverages","parse","sequences","substitutes","substitutes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","coverage","coverage","delta","substitutes","Table","borrow","borrow_mut","clone","clone_into","fmt","from","into","outline","parse","to_owned","try_from","try_into","type_id","IndexToLocationFormat","Long","Short","Table","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","fmt","fmt","from","from","global_bbox","index_to_location_format","into","into","parse","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","units_per_em","Table","ascender","borrow","borrow_mut","clone","clone_into","descender","fmt","from","into","line_gap","number_of_metrics","parse","to_owned","try_from","try_into","type_id","Metrics","Table","advance","advance","bearings","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","into","into","metrics","number_of_metrics","parse","parse","side_bearing","side_bearing","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Table","advance_offset","borrow","borrow_mut","clone","clone_into","fmt","from","into","parse","side_bearing_offset","to_owned","try_from","try_into","type_id","Format","Format0","Format1","Format2","Format3","KerningPair","Subtable","Subtable0","Subtable2","Subtable3","Subtables","SubtablesIter","Table","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","glyphs_kerning","glyphs_kerning","glyphs_kerning","glyphs_kerning","has_cross_stream","has_state_machine","horizontal","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","left","len","next","pair","pairs","parse","parse","parse","parse","parse","right","subtables","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","variable","AnchorPoints","EntryData","Format","Format0","Format1","Format2","Format4","Format6","Subtable","Subtable0","Subtable1","Subtable2","Subtable4","Subtable6","Subtables","SubtablesIter","Table","action_index","anchor_points","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","get","glyphs_kerning","glyphs_kerning","glyphs_kerning","glyphs_kerning","glyphs_kerning","has_cross_stream","has_state_machine","horizontal","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","next","pairs","parse","parse","state_table","state_table","subtables","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tuple_count","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variable","Long","Short","Table","borrow","borrow_mut","clone","clone_into","fmt","from","glyph_range","into","is_empty","len","parse","to_owned","try_from","try_into","type_id","Constants","GlyphAssembly","GlyphConstruction","GlyphConstructions","GlyphInfo","GlyphPart","GlyphVariant","Kern","KernInfo","KernInfos","MathValue","MathValues","PartFlags","Table","Variants","accent_base_height","advance_measurement","assembly","axis_height","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom_left","bottom_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constants","count","delimited_sub_formula_min_height","device","display_operator_min_height","end_connector_length","extended_shapes","extender","flattened_accent_base_height","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fraction_denom_display_style_gap_min","fraction_denominator_display_style_shift_down","fraction_denominator_gap_min","fraction_denominator_shift_down","fraction_num_display_style_gap_min","fraction_numerator_display_style_shift_up","fraction_numerator_gap_min","fraction_numerator_shift_up","fraction_rule_thickness","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","full_advance","get","get","get","glyph_id","glyph_info","height","horizontal_constructions","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","italic_corrections","italics_correction","kern","kern_infos","lower_limit_baseline_drop_min","lower_limit_gap_min","math_leading","min_connector_overlap","overbar_extra_ascender","overbar_rule_thickness","overbar_vertical_gap","parse","parse","parse","parse","part_flags","parts","radical_degree_bottom_raise_percent","radical_display_style_vertical_gap","radical_extra_ascender","radical_kern_after_degree","radical_kern_before_degree","radical_rule_thickness","radical_vertical_gap","script_percent_scale_down","script_script_percent_scale_down","skewed_fraction_horizontal_gap","skewed_fraction_vertical_gap","space_after_script","stack_bottom_display_style_shift_down","stack_bottom_shift_down","stack_display_style_gap_min","stack_gap_min","stack_top_display_style_shift_up","stack_top_shift_up","start_connector_length","stretch_stack_bottom_shift_down","stretch_stack_gap_above_min","stretch_stack_gap_below_min","stretch_stack_top_shift_up","sub_superscript_gap_min","subscript_baseline_drop_min","subscript_shift_down","subscript_top_max","superscript_baseline_drop_max","superscript_bottom_max_with_subscript","superscript_bottom_min","superscript_shift_up","superscript_shift_up_cramped","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","top_accent_attachments","top_left","top_right","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underbar_extra_descender","underbar_rule_thickness","underbar_vertical_gap","upper_limit_baseline_rise_min","upper_limit_gap_min","value","variant_glyph","variants","variants","vertical_constructions","Table","borrow","borrow_mut","clone","clone_into","fmt","from","into","number_of_glyphs","parse","to_owned","try_from","try_into","type_id","Chain","Chains","ChainsIter","Contextual","ContextualEntryData","ContextualSubtable","Coverage","Feature","Insertion","InsertionEntryData","InsertionSubtable","Ligature","LigatureSubtable","NonContextual","Rearrangement","Subtable","SubtableKind","Subtables","SubtablesIter","Table","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chains","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","coverage","current_index","current_insert_index","default_flags","disable_flags","enable_flags","feature_flags","features","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","glyphs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_all_directions","is_backwards","is_logical","is_vertical","kind","kind","ligature_actions","ligatures","lookup","mark_index","marked_insert_index","next","next","parse","parse","parse","parse","setting","state","state","state","subtables","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Table","borrow","borrow_mut","clone","clone_into","fmt","from","into","metric_offset","parse","to_owned","try_from","try_into","type_id","Custom","Iso","Macintosh","Name","Names","NamesIter","PlatformId","Table","Unicode","Windows","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","count","default","default","encoding_id","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","get","into","into","into","into","into","into_iter","into_iter","is_empty","is_unicode","language","language_id","len","name","name_id","name_id","names","next","parse","parse","platform_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","COMPATIBLE_FULL","COPYRIGHT_NOTICE","DARK_BACKGROUND_PALETTE","DESCRIPTION","DESIGNER","DESIGNER_URL","FAMILY","FULL_NAME","LICENSE","LICENSE_URL","LIGHT_BACKGROUND_PALETTE","MANUFACTURER","POST_SCRIPT_CID","POST_SCRIPT_NAME","SAMPLE_TEXT","SUBFAMILY","TRADEMARK","TYPOGRAPHIC_FAMILY","TYPOGRAPHIC_SUBFAMILY","UNIQUE_ID","VARIATIONS_POST_SCRIPT_NAME_PREFIX","VENDOR_URL","VERSION","WWS_FAMILY","WWS_SUBFAMILY","COMPATIBLE_FULL","COPYRIGHT_NOTICE","DARK_BACKGROUND_PALETTE","DESCRIPTION","DESIGNER","DESIGNER_URL","FAMILY","FULL_NAME","LICENSE","LICENSE_URL","LIGHT_BACKGROUND_PALETTE","MANUFACTURER","POST_SCRIPT_CID","POST_SCRIPT_NAME","SAMPLE_TEXT","SUBFAMILY","TRADEMARK","TYPOGRAPHIC_FAMILY","TYPOGRAPHIC_SUBFAMILY","UNIQUE_ID","VARIATIONS_POST_SCRIPT_NAME_PREFIX","VENDOR_URL","VERSION","WWS_FAMILY","WWS_SUBFAMILY","ChainedContextLookup","ChainedSequenceRule","ChainedSequenceRuleSet","ChainedSequenceRuleSets","Class","ClassDefinition","ContextLookup","Coverage","Feature","FeatureIndex","FeatureList","FeatureVariations","Format1","Format1","Format1","Format1","Format2","Format2","Format2","Format2","Format3","Format3","LanguageIndex","LanguageSystem","LanguageSystemList","LayoutTable","Lookup","LookupFlags","LookupIndex","LookupList","LookupSubtable","LookupSubtables","LookupSubtablesIter","RangeRecord","RecordList","RecordListItem","RecordListIter","Script","ScriptIndex","ScriptList","SequenceLookupRecord","SequenceRule","SequenceRuleSet","SequenceRuleSets","VariationIndex","backtrack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","coverage","coverage","default_language","end","feature_indices","features","find","find_index","find_substitute","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","ignore_base_glyphs","ignore_flags","ignore_ligatures","ignore_marks","index","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","languages","len","len","lookahead","lookup_indices","lookup_list_index","lookups","lookups","lookups","mark_attachment_type","mark_filtering_set","next","next","parse","parse","parse","parse","parse","parse","parse","parse","required_feature","right_to_left","scripts","sequence_index","start","subtables","tag","tag","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_mark_filtering_set","value","variations","backtrack_classes","backtrack_coverages","coverage","coverage","coverage","input_classes","input_coverages","lookahead_classes","lookahead_coverages","lookups","sets","sets","classes","records","start","classes","coverage","coverage","coverage","coverages","lookups","sets","sets","glyphs","records","Black","Bold","Condensed","Editable","Expanded","ExtraBold","ExtraCondensed","ExtraExpanded","ExtraLight","Installable","Italic","Light","Medium","Normal","Normal","Normal","Oblique","Other","Permissions","PreviewAndPrint","Restricted","ScriptMetrics","SemiBold","SemiCondensed","SemiExpanded","Style","Table","Thin","UltraCondensed","UltraExpanded","UnicodeRanges","Weight","Width","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capital_height","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","contains_char","default","default","default","default","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","is_bitmap_embedding_allowed","is_bold","is_subsetting_allowed","parse","partial_cmp","partial_cmp","permissions","strikeout_metrics","style","subscript_metrics","superscript_metrics","to_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typographic_ascender","typographic_descender","typographic_line_gap","unicode_ranges","use_typographic_metrics","version","weight","width","windows_ascender","windows_descender","x_height","x_offset","x_size","y_offset","y_size","Names","Table","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","glyph_index_by_name","glyph_name","into","into","into_iter","is_monospaced","italic_angle","names","next","parse","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","underline_metrics","Strike","Strikes","StrikesIter","Table","best_strike","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","from","get","get","into","into","into","into","into_iter","into_iter","is_empty","is_empty","len","len","next","parse","pixels_per_em","ppi","strikes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","SvgDocumentsList","SvgDocumentsListIter","Table","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","count","documents","find","fmt","fmt","from","from","from","get","into","into","into","into_iter","into_iter","is_empty","len","next","parse","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Table","Track","TrackData","Tracks","TracksIter","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","fmt","fmt","fmt","fmt","from","from","from","from","from","get","horizontal","into","into","into","into","into","into_iter","into_iter","is_empty","len","name_index","next","parse","sizes","to_owned","to_owned","to_owned","to_owned","tracks","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","values","vertical","Table","ascender","borrow","borrow_mut","clone","clone_into","default","descender","fmt","from","into","line_gap","number_of_metrics","parse","to_owned","try_from","try_into","type_id","Table","VerticalOriginMetrics","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_y","fmt","fmt","from","from","glyph_id","glyph_y_origin","into","into","metrics","parse","parse","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","y"],"q":[[0,"ttf_parser"],[818,"ttf_parser::ankr"],[850,"ttf_parser::apple_layout"],[933,"ttf_parser::apple_layout::class"],[936,"ttf_parser::apple_layout::state"],[937,"ttf_parser::avar"],[992,"ttf_parser::cbdt"],[1006,"ttf_parser::cblc"],[1019,"ttf_parser::cff"],[1058,"ttf_parser::cff2"],[1073,"ttf_parser::cmap"],[1294,"ttf_parser::feat"],[1367,"ttf_parser::fvar"],[1401,"ttf_parser::gdef"],[1440,"ttf_parser::glyf"],[1454,"ttf_parser::gpos"],[1764,"ttf_parser::gpos::PairAdjustment"],[1769,"ttf_parser::gpos::SingleAdjustment"],[1773,"ttf_parser::gsub"],[1912,"ttf_parser::gsub::SingleSubstitution"],[1916,"ttf_parser::gvar"],[1930,"ttf_parser::head"],[1962,"ttf_parser::hhea"],[1979,"ttf_parser::hmtx"],[2012,"ttf_parser::hvar"],[2027,"ttf_parser::kern"],[2164,"ttf_parser::kerx"],[2337,"ttf_parser::loca"],[2355,"ttf_parser::math"],[2629,"ttf_parser::maxp"],[2643,"ttf_parser::morx"],[2863,"ttf_parser::mvar"],[2877,"ttf_parser::name"],[2964,"ttf_parser::name::name_id"],[2989,"ttf_parser::name_id"],[3014,"ttf_parser::opentype_layout"],[3322,"ttf_parser::opentype_layout::ChainedContextLookup"],[3334,"ttf_parser::opentype_layout::ClassDefinition"],[3337,"ttf_parser::opentype_layout::ContextLookup"],[3345,"ttf_parser::opentype_layout::Coverage"],[3347,"ttf_parser::os2"],[3509,"ttf_parser::post"],[3543,"ttf_parser::sbix"],[3601,"ttf_parser::svg"],[3646,"ttf_parser::trak"],[3718,"ttf_parser::vhea"],[3736,"ttf_parser::vorg"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A grayscale bitmap with 2 bits per pixel.","A packed grayscale bitmap with 2 bits per pixel.","A grayscale bitmap with 4 bits per pixel.","A packed grayscale bitmap with 4 bits per pixel.","A grayscale bitmap with 8 bits per pixel.","A monochrome bitmap.","A packed monochrome bitmap.","A color bitmap with 32 bits per pixel.","","","","","","","","A list of errors that can occur during a CFF glyph …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A font face.","The face index is larger than the number of faces in the …","A list of font face parsing errors.","Parsed face tables.","","","","A 32-bit signed fixed-point number (16.16).","","","","","","","","A trait for parsing raw binary data of fixed size.","","","","","","","","A type-safe wrapper for glyph ID.","","","","","","","","","","","","","","","","","","","","","","","","A form that is generally cursive in nature.","","","","","","","","","","","A [<code>Name</code>] language.","","","A slice-like container that converts internal binary data …","A slice-like container that converts internal binary data …","An iterator over <code>LazyArray16</code>.","An iterator over <code>LazyArray32</code>.","","A line metrics.","","","","","","","","","An attempt to read out of bounds detected.","","","","","","","","","","","","","","The <code>head</code> table is missing or malformed.","The <code>hhea</code> table is missing or malformed.","","The <code>maxp</code> table is missing or malformed.","","","A face that is neither italic not obliqued.","A variation coordinate in a normalized coordinate system.","","","A typically-sloped version of the regular face.","","","","A trait for glyph outline construction.","","","Face permissions.","A platform ID.","","","","","","","","","A glyph’s raster image.","A glyph raster image format.","A raw font face.","A list of all supported tables as raw data.","","A rectangle.","","","","","Object’s raw data size.","","","","","","","","","","","A script metrics used by subscript and superscript.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A face style.","","","","A raw table record.","A 4-byte tag.","","","","","","","","","","","","","","","","Unicode Ranges.","","Face data must start with <code>0x00010000</code>, <code>0x74727565</code>, …","","","","","","A font variation value.","A variation axis.","","A face weight.","","A face width.","","","","","","","An Anchor Point Table implementation.","","","This module contains Apple Advanced Typography Layout …","Returns tag value as <code>u32</code> number.","Returns a horizontal face ascender.","An Axis Variations Table implementation.","","","An axis tag name.","","","Performs a binary search by specified <code>key</code>.","Performs a binary search by specified <code>key</code>.","Performs a binary search using specified closure.","Performs a binary search using specified closure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns face’s capital height.","A Color Bitmap Data Table implementation.","","","A Color Bitmap Location Table implementation.","","A Compact Font Format Table implementation.","","","A Compact Font Format 2 Table implementation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends a ClosePath segment.","A Character to Glyph Index Mapping Table implementation.","","","","","","","Appends a CurveTo segment.","A raw image data. It’s up to the caller to decode it.","The input font file data.","","","","","","","","Returns a horizontal face descender.","","","","","","","","","","","","","","","","","","","","","","","","","A Feature Name Table implementation.","","","","","","","","","","","","","","","","","","","","","","","Returns the number of fonts stored in a TrueType font …","An image format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new coordinate.","Creates a new coordinate.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>Tag</code> from bytes.","Creates a <code>Tag</code> from bytes.","Creates a new <code>Face</code> from provided <code>RawFaceTables</code>.","Creates a new <code>RawFace</code> from a raw data.","Creates a new <code>Face</code> from a raw data.","A Font Variations Table implementation.","","","A Glyph Definition Table implementation.","","","Returns a value at <code>index</code>.","Returns a value at <code>index</code>.","Returns the coordinate value as f2.14.","Returns a bounding box that large enough to enclose any …","A Glyph Data Table implementation.","","","Returns a tight glyph bounding box.","Returns glyph’s horizontal advance.","Returns glyph’s horizontal side bearing.","Resolves a Glyph ID for a code point.","Resolves a Glyph ID for a glyph name.","Returns glyph’s name.","Returns a reference to a glyph’s raster image.","Returns a reference to a glyph’s SVG image.","Resolves a variation of a Glyph ID from two code points.","Returns glyph’s vertical advance.","Returns glyph’s vertical side bearing.","Returns glyph’s vertical origin according to Vertical …","A Glyph Positioning Table implementation.","","","A Glyph Substitution Table implementation.","","","A Glyph Variations Table implementation.","","","Checks that face has non-default variation coordinates.","","","A Font Header Table implementation.","","","Returns rect’s height.","Returns face’s height.","Image height.","A Horizontal Header Table implementation.","","","","A Horizontal/Vertical Metrics Table implementation.","","","A Horizontal/Vertical Metrics Variations Table …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Checks if the face bitmaps embedding is allowed.","Checks that face is marked as <em>Bold</em>.","Checks if array is empty.","Checks if the array is empty.","Checks that face is marked as <em>Italic</em>.","Checks that face is marked as <em>Monospaced</em>.","Checks if tag is null / <code>[0, 0, 0, 0]</code>.","Checks that face is marked as <em>Oblique</em>.","Checks that face is marked as <em>Regular</em>.","Checks if the face subsetting is allowed.","Checks that face is variable.","","","Returns face’s italic angle.","A Kerning Table implementation.","","","An Extended Kerning Table implementation.","","","Returns the last value.","Returns array’s length.","Returns array’s length.","","Returns a horizontal face line gap.","Appends a LineTo segment.","An Index to Location Table implementation.","","A Math Table implementation.","","","","A Maximum Profile Table implementation.","","","","An Extended Glyph Metamorphosis Table implementation.","","","Appends a MoveTo segment.","A Metrics Variations Table implementation.","","","A Naming Table implementation.","","","A list of name ID’s.","An axis name in the <code>name</code> table.","Returns a list of names.","Creates a new <code>LazyArray</code>.","Creates a new <code>LazyArray</code>.","","","Returns a total number of glyphs in the face.","","This module contains OpenType Layout supplementary tables …","A OS/2 and Windows Metrics Table implementation.","","","Outlines a glyph and returns its tight bounding box.","Parses an object from a raw data.","","","","","Creates a new <code>RawFace</code> from a raw data.","Creates a new <code>Face</code> from a raw data.","","","Returns face permissions.","A pixels per em of the selected strike.","Line position.","A PostScript Table implementation.","","","Returns the primary language.","","Appends a QuadTo segment.","Returns a <code>RangeRecord</code> for a glyph.","Returns the <code>RawFace</code> used to create this <code>Face</code>.","Returns a language region.","A Standard Bitmap Graphics Table implementation.","","","Sets a variation axis coordinate.","Returns sub-array.","Returns face’s strikeout metrics.","Returns face style.","Returns face’s subscript metrics.","Returns face’s superscript metrics.","An SVG Table implementation.","","","Returns the raw data of a selected table.","Returns the raw data of a selected table.","An array of table records.","Returns low-level face tables.","","","Line thickness.","Returns tag as 4-element byte array.","Returns tag as 4-element byte array.","","","","","","","","","","","","","","","","","","","","","","","","","A Tracking Table implementation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a horizontal typographic face ascender.","Returns a horizontal typographic face descender.","Returns a horizontal typographic face line gap.","Returns face’s underline metrics.","Checks if the face bitmaps embedding is allowed.","Returns face’s units per EM.","An axis value.","Returns an iterator over variation axes.","Returns the current normalized variation coordinates.","Returns a vertical face ascender.","Returns a vertical face descender.","Returns a vertical face height.","Returns a vertical face line gap.","A Vertical Header Table implementation.","","","","","A Vertical Origin Table implementation.","","","","","Returns face’s weight.","Returns rect’s width.","Returns face’s width.","Image width.","Horizontal offset.","Returns face’s x height.","","","X offset.","Horizontal face size.","Vertical offset.","","","Y offset.","Vertical face size.","An anchor point.","An Anchor Point Table.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Parses a table from raw data.","Returns a list of anchor points for the specified glyph.","","","","","","","","","","","An Extended State Table.","A State Table entry.","A lookup table.","A legacy state entry used by StateTable.","A State Table.","A type-safe wrapper for a kerning value offset.","","","","","","","","","","","Predefined classes.","Returns a glyph class.","Returns a glyph class.","","","","","","","","","","","Returns a class entry.","Returns a class entry.","Additional data.","Entry flags.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If set, advance to the next glyph before going to the new …","If set, remember this glyph as the marked glyph.","Checks that entry has an offset.","If set, push this glyph on the kerning stack.","If set, reset the kerning data (clear the stack).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns kerning at offset.","Produces a new state.","A new state.","Returns the next offset.","","Parses an Extended State Table from a stream.","Parses a lookup table from raw data.","Predefined states.","","","","","","","","","","","","","","","","","","","","","Returns a value associated with the specified glyph.","Returns a value offset.","","","","","An axis value map.","A list of segment maps.","An iterator over maps.","An Axis Variations Table.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A normalized coordinate value obtained using default …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if there are any segments.","Returns the number of segments.","Maps coordinates.","","","Parses a table from raw data.","The segment maps array — one segment map for each axis …","The modified, normalized coordinate value.","","","","","","","","","","","","","","","","A Color Bitmap Data Table.","","","","","","Returns the argument unchanged.","Returns a raster image for the glyph.","Calls <code>U::from(self)</code>.","Parses a table from raw data.","","","","","A Color Bitmap Location Table.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Parses a table from raw data.","","","","","An affine transformation matrix.","A Compact Font Format Table.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Resolves a Glyph ID for a code point.","Returns a glyph ID by a name.","Returns a glyph name.","Returns a glyph width.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns a font transformation matrix.","Returns a total number of glyphs in the font.","Outlines a glyph.","Parses a table from raw data.","","","","","","","","","","","","","A Compact Font Format 2 Table.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Outlines a glyph.","Parses a table from raw data.","","","","","","A character encoding subtable variant.","Glyph was found in the variation encoding table.","A result of a variation glyph mapping.","","","","","","A character encoding subtable.","A format 0 subtable.","A format 10 subtable.","A format 12 subtable.","A format 13 subtable.","A format 14 subtable.","A format 2 subtable.","A format 4 subtable.","A format 6 subtable.","A list of subtables.","An iterator over <code>Subtables</code>.","A Character to Glyph Index Mapping Table.","","","","Glyph should be looked in other, non-variation tables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for each codepoint defined in this table.","Calls <code>f</code> for all codepoints contained in this subtable.","","Subtable encoding.","","","First character code covered.","First character code of subrange.","","","","","","","","","","","","","","A subtable format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a subtable at an index.","Just a list of 256 8bit glyph IDs.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Returns a glyph index for a code point.","Maps a character to a glyph ID.","Resolves a variation of a glyph ID from two code points.","Array of glyph indices for the character codes covered.","Array of glyph indexes for character codes in the range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if there are any subtables.","Checks that the current encoding is Unicode compatible.","Returns the number of subtables.","","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a table from raw data.","Subtable platform.","A list of subtables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A feature names.","A list fo feature names.","An iterator over <code>FeatureNames</code>.","A setting name.","A Feature Name Table.","","","","","","","","","","","","","","","","","","","The index of the default setting in the <code>setting_names</code>.","The feature’s exclusive settings. If set, the feature …","The feature’s ID.","Finds a feature name by ID.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a feature name at an index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if there are any feature names.","Returns the number of feature names.","The <code>name</code> table index for the feature’s name in a …","The <code>name</code> table index for the feature’s name in a …","A list of feature names. Sorted by <code>FeatureName.feature</code>.","","","Parses a table from raw data.","The setting.","The feature’s setting names.","","","","","","","","","","","","","","","","","","","","A Font Variations Table.","A variation axis.","A list of variation axes.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","An axis name in the <code>name</code> table.","","Parses a table from raw data.","","","","","","","","","","","","A glyph class.","","","A Glyph Definition Table.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns glyph’s class according to Glyph Class …","Returns glyph’s mark attachment class according to Mark …","Returns glyph’s variation delta at a specified index …","Checks that face has Glyph Class Definition Table.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks that glyph is a mark according to Mark Glyph Sets …","Parses a table from raw data.","","","","","","","","","","A Glyph Data Table.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Outlines a glyph.","Parses a table from raw data.","","","","","An Anchor Table.","An <code>Anchor</code> parsing helper.","","A <code>ValueRecord</code> pairs matrix used by <code>PairAdjustment</code>.","","","A Cursive Attachment Positioning Subtable.","A list of entry and exit <code>Anchor</code> pairs.","A Device Table.","","","","","","A Device Table hinting values.","An array or ligature anchor matrices.","A Mark Array.","","A Mark-to-Base Attachment Positioning Subtable.","","A Mark-to-Ligature Attachment Positioning Subtable.","","A Mark-to-Mark Attachment Positioning Subtable.","","A Pair Adjustment Positioning Subtable.","A <code>ValueRecord</code> pairs set used by <code>PairAdjustment</code>.","A list of <code>PairSet</code>s.","A glyph positioning lookup subtable enumeration.","","A Single Adjustment Positioning Subtable.","A Value Record.","An array of Value Records.","","A Device Table indexes into Item Variation Store.","An anchors matrix.","A base coverage.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of columns in the matrix.","Returns the subtable coverage.","Returns the subtable coverage.","Returns the subtable coverage.","","","Returns an entry <code>Anchor</code> at index.","Returns an exit <code>Anchor</code> at index.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>ValueRecord</code> at index.","Returns a <code>ValueRecord</code> pair using the second glyph.","Returns a value at <code>index</code>.","Returns a <code>ValueRecord</code> pair using specified classes.","Returns an <code>AnchorMatrix</code> at index.","Returns contained data at index.","Returns an <code>Anchor</code> at position.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the array is empty.","Checks if the array is empty.","Checks if the set is empty.","Checks if the array is empty.","Checks if the array is empty.","Returns array’s length.","Returns array’s length.","Returns the number of items.","Returns the array length.","Returns the array length.","","","","","","A mark coverage.","","A list of mark anchors.","","","","","Number of rows in the matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Horizontal value, in design units.","Horizontal adjustment for advance, in design units — …","A <code>Device</code> table with horizontal adjustment for advance.","Returns X-axis delta.","A <code>Device</code> table with horizontal value.","Horizontal adjustment for placement, in design units.","A <code>Device</code> table with horizontal adjustment for placement.","Vertical value, in design units.","Vertical adjustment for advance, in design units — only …","A <code>Device</code> table with vertical adjustment for advance.","Returns Y-axis delta.","A <code>Device</code> table with vertical value.","Vertical adjustment for placement, in design units.","A <code>Device</code> table with vertical adjustment for placement.","","","","","","","","","","","A list of glyphs for Alternate Substitution Subtable.","A set of <code>AlternateSet</code>.","A Alternate Substitution Subtable.","","","","","Glyph components for one ligature.","","A <code>Ligature</code> set.","A list of <code>Ligature</code> sets.","A Ligature Substitution Subtable.","","A Multiple Substitution Subtable.","","A Reverse Chaining Contextual Single Substitution Subtable.","A sequence of glyphs for Multiple Substitution Subtable.","A list of <code>Sequence</code> tables.","","A Single Substitution Subtable.","A glyph substitution lookup subtable enumeration.","","Array of alternate glyph IDs, in arbitrary order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Glyph components for one ligature.","Returns the subtable coverage.","Returns the subtable coverage.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Ligature to substitute.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks that the current subtable is <em>Reverse Chaining </em>…","","","","","A list of substitute glyphs.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Glyph Variations Table.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Outlines a glyph.","Parses a table from raw data.","","","","","An index format used by the Index to Location Table.","","","A Font Header Table.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","A bounding box that large enough to enclose any glyph from …","An index format used by the Index to Location Table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Parses a table from raw data.","","","","","","","","","Units per EM.","A Horizontal Header Table.","Face ascender.","","","","","Face descender.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Face line gap.","Number of metrics in the <code>hmtx</code> table.","Parses a table from raw data.","","","","","Horizontal/Vertical Metrics.","A Horizontal/Vertical Metrics Table.","Returns advance for a glyph.","Width/Height advance for <code>hmtx</code>/<code>vmtx</code>.","Side bearings for glyph IDs greater than or equal to the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A list of metrics indexed by glyph ID.","Sum of long metrics + bearings.","","Parses a table from raw data.","Returns side bearing for a glyph.","Left/Top side bearing for <code>hmtx</code>/<code>vmtx</code>.","","","","","","","","","A Horizontal/Vertical Metrics Variations Table.","Returns advance offset for a glyph.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Parses a table from raw data.","Returns side bearing offset for a glyph.","","","","","A kerning subtable format.","","","","","A kerning pair.","A kerning subtable.","A format 0 subtable.","A format 2 subtable.","A format 3 subtable.","A list of subtables.","An iterator over kerning subtables.","A Kerning Table.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Subtable format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns kerning for a pair of glyphs.","Returns kerning for a pair of glyphs.","Returns kerning for a pair of glyphs.","Returns kerning for a pair of glyphs.","Indicates that subtable has a cross-stream values.","Indicates that subtable uses a state machine.","Indicates that subtable is for horizontal text.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if there are any subtables.","Returns left glyph ID.","Returns the number of subtables.","","Glyphs pair.","A list of kerning pairs.","","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a subtable from raw data.","Parses a table from raw data.","Returns right glyph ID.","A list of subtables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Kerning value.","Indicates that subtable is variable.","A container of Anchor Points used by <code>Subtable4</code>.","A state machine entry.","An extended kerning subtable format.","","","","","","A kerning subtable.","A format 0 subtable.","A format 1 subtable.","A format 2 subtable.","A format 4 subtable.","A format 6 subtable.","A list of extended kerning subtables.","An iterator over extended kerning subtables.","An Extended Kerning Table.","An action index.","Anchor points.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Subtable format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mark and current anchor points at action index.","Returns kerning for a pair of glyphs.","Returns kerning at action index.","Returns kerning for a pair of glyphs.","Returns kerning for a pair of glyphs.","Returns kerning for a pair of glyphs.","Indicates that subtable has a cross-stream values.","Indicates that subtable uses a state machine.","Indicates that subtable is for horizontal text.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","A list of kerning pairs.","","Parses a table from raw data.","A state table.","A state table.","A list of subtables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The tuple count.","","","","","","","","","","","","","Indicates that subtable is variable.","Long offsets.","Short offsets.","An Index to Location Table.","","","","","","Returns the argument unchanged.","Returns glyph’s range in the <code>glyf</code> table.","Calls <code>U::from(self)</code>.","Checks if there are any offsets.","Returns the number of offsets.","Parses a table from raw data.","","","","","A Math Constants Table.","A Glyph Assembly Table.","A Math Glyph Construction Table.","A mapping from glyphs to Math Glyph Construction Tables.","A Math Glyph Info Table.","Details for a glyph part in an assembly.","Description of math glyph variants.","A Math Kern Table.","An entry in a Math Kern Info Table.","A Math Kern Info Table.","A Math Value with optional device corrections.","A mapping from glyphs to Math Values.","Glyph part flags.","A Math Table.","A Math Variants Table.","Maximum (ink) height of accent base that does not require …","Advance width/height, in design units, of the variant …","A general recipe on how to construct a variant with large …","Axis height of the font.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The kerning data for the bottom-left corner.","The kerning data for the bottom-right corner.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Math positioning constants.","Number of heights at which the kern value changes.","Minimum height required for a delimited expression …","Device corrections for this value.","Minimum height of n-ary operators (such as integral and …","Lengths of the connectors on the end of the glyph, in font …","Glyphs which are <em>extended shapes</em>.","","Maximum (ink) height of accent base that does not require …","","","","","","","","","","","","","","","","Minimum tolerated gap between the (ink) top of the …","Standard shift down applied to the denominator in display …","Minimum tolerated gap between the (ink) top of the …","Standard shift down applied to the denominator.","Minimum tolerated gap between the (ink) bottom of the …","Standard shift up applied to the numerator in display …","Minimum tolerated gap between the (ink) bottom of the …","Standard shift up applied to the numerator.","Thickness of the fraction bar.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The full advance of the part, in font design units.","Returns the value for the glyph or <code>None</code> if it is not …","Returns the kerning info for the glyph or <code>None</code> if it is …","Returns the construction for the glyph or <code>None</code> if it is …","Glyph ID for the part.","Per-glyph positioning information.","The correction height at the given index.","Constructions for shapes growing in the horizontal …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Per-glyph italics correction values.","The italics correction of the assembled glyph.","The kern value at the given index.","Per-glyph information for mathematical kerning.","Minimum distance between baseline of the lower limit and …","Minimum gap between (ink) top of the lower limit, and …","White space to be left between math formulas to ensure …","Minimum overlap of connecting glyphs during glyph …","Extra white space reserved above the overbar.","Thickness of overbar.","Distance between the overbar and the (ink) top of he base.","","","","Parses a table from raw data.","Part flags.","Parts the assembly is composed of.","Height of the bottom of the radical degree, if such is …","Space between the (ink) top of the expression and the bar …","Extra white space reserved above the radical.","Negative kern after the degree of a radical, if such is …","Extra horizontal kern before the degree of a radical, if …","Thickness of the radical rule.","Space between the (ink) top of the expression and the bar …","Percentage of scaling down for level 1 superscripts and …","Percentage of scaling down for level 2 (scriptScript) …","Horizontal distance between the top and bottom elements of …","Vertical distance between the ink of the top and bottom …","Extra white space to be added after each subscript and …","Standard shift down applied to the bottom element of a …","Standard shift down applied to the bottom element of a …","Minimum gap between (ink) bottom of the top element of a …","Minimum gap between (ink) bottom of the top element of a …","Standard shift up applied to the top element of a stack in …","Standard shift up applied to the top element of a stack.","Lengths of the connectors on the start of the glyph, in …","Standard shift down applied to the bottom element of the …","Minimum gap between the ink of the stretched element, and …","Minimum gap between the ink of the stretched element, and …","Standard shift up applied to the top element of the …","Minimum gap between the superscript and subscript ink.","Minimum allowed drop of the baseline of subscripts …","The standard shift down applied to subscript elements.","Maximum allowed height of the (ink) top of subscripts that …","Maximum allowed drop of the baseline of superscripts …","The maximum level to which the (ink) bottom of superscript …","Minimum allowed height of the (ink) bottom of superscripts …","Standard shift up applied to superscript elements.","Standard shift of superscripts relative to the base, in …","","","","","","","","","","","","","","","","Per-glyph horizontal positions for attaching mathematical …","The kerning data for the top-left corner.","The kerning data for the top-right corner.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extra white space reserved below the underbar.","Thickness of underbar.","Distance between underbar and (ink) bottom of the base.","Minimum distance between baseline of upper limit and (ink) …","Minimum gap between the (ink) bottom of the upper limit, …","The X or Y value in font design units.","The ID of the variant glyph.","Prepared variants of the glyph with varying advances.","Variants and assembly recipes for growable glyphs.","Constructions for shapes growing in the vertical direction.","A Maximum Profile Table.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The total number of glyphs in the face.","Parses a table from raw data.","","","","","A metamorphosis chain.","A list of metamorphosis chains.","An iterator over metamorphosis chains.","","A contextual subtable state table trailing data.","A contextual subtable.","A subtable coverage.","The feature table is used to compute the sub-feature flags …","","A contextual subtable state table trailing data.","An insertion subtable.","","A ligature subtable.","","","A subtable in a metamorphosis chain.","A subtable kind.","A list of subtables in a metamorphosis chain.","An iterator over a metamorphosis chain subtables.","An Extended Glyph Metamorphosis Table.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A list of metamorphosis chains.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ligature components.","A subtable coverage.","A current index.","A current insert index.","Default chain features.","Complement of flags for the settings that this feature and …","Flags for the settings that this feature and setting …","Subtable feature flags.","A list of chain features.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Insertion glyphs.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","If true, this subtable will be applied to both horizontal …","If true, this subtable will process glyphs in descending …","If true, this subtable will process glyphs in logical order","If true, this subtable will only be applied to vertical …","The type of feature.","A subtable kind.","Ligature actions.","Ligatures.","Returns a Lookup at index.","A mark index.","A marked insert index.","","","","","","Parses a table from raw data.","The feature’s setting (aka selector).","The contextual glyph substitution state table.","A state table.","A state table.","A list of chain subtables.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Metrics Variations Table.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a metric offset by tag.","Parses a table from raw data.","","","","","","","","A Name Record.","A list of face names.","An iterator over face names.","A platform ID.","A Naming Table.","","","","","","","","","","","","","","","","","","","","","","","","","","A platform-specific encoding ID.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a name at index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if there are any name records.","Checks that the current Name data has a Unicode encoding.","Returns a Name language.","A language ID.","Returns a number of name records.","A raw name data.","A list of name ID’s.","A Name ID.","A list of names.","","","Parses a table from raw data.","A platform ID.","","","","","","Returns the Name’s data as a UTF-8 string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Chained Contextual Lookup Subtable.","A Chained Sequence Rule.","A set of <code>ChainedSequenceRule</code>.","A list of <code>ChainedSequenceRule</code> sets.","A value of Class Definition Table.","A Class Definition Table.","A Contextual Lookup Subtable.","A Coverage Table.","A Feature.","An index in <code>FeatureList</code>.","A list of <code>Feature</code> records.","A Feature Variations Table.","Simple glyph contexts.","Simple glyph contexts.","","","Class-based glyph contexts.","Class-based glyph contexts.","","","Coverage-based glyph contexts.","Coverage-based glyph contexts.","An index in <code>LanguageSystemList</code>.","A Language System Table.","A list of <code>LanguageSystem</code> records.","A Layout Table.","A Lookup Table.","Lookup table flags.","An index in <code>LookupList</code>.","A list of <code>Lookup</code> values.","A trait for parsing Lookup subtables.","A list of lookup subtables.","An iterator over lookup subtables.","A record that describes a range of glyph IDs.","A data storage used by <code>ScriptList</code>, <code>LanguageSystemList</code> and …","A trait to parse item in <code>RecordList</code>.","An iterator over <code>RecordList</code> values.","A Script Table.","An index in <code>ScriptList</code>.","A list of <code>Script</code> records.","A sequence rule record.","A sequence rule.","A set of <code>SequenceRule</code>s.","A list of <code>SequenceRuleSet</code>s.","An index in <code>FeatureVariations</code>.","Contains either glyph IDs or glyph Classes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that glyph is present.","Returns the subtable coverage.","Returns the subtable coverage.","Default language.","Last glyph ID in the range","Array of indices into the FeatureList, in arbitrary order.","A list of all supported features.","Returns RecordList value by <code>Tag</code>.","Returns a <code>VariationIndex</code> for variation coordinates.","Returns a <code>Feature</code> at specified indices.","Lookup qualifiers.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns RecordList value by index.","Parses a subtable at index.","Returns the coverage index of the glyph or <code>None</code> if it is …","Returns the glyph class of the glyph (zero if it is not …","","","","","Returns RecordList value index by <code>Tag</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates an iterator over subtables.","Checks that RecordList is empty.","Checks if there are any items.","List of supported languages, excluding the default one. …","Returns a number of items in the RecordList.","Returns a number of items in the LookupSubtables.","Contains either glyph IDs or glyph Classes.","","","","","A list of all lookups.","","Index into GDEF mark glyph sets structure.","","","Parses raw data.","Parses raw data.","","","","","","","Index of a feature required for this language system.","","A list of all supported scripts.","","First glyph ID in the range","Available subtables.","Script tag.","Language tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Coverage Index of first glyph ID in range.","Used to substitute an alternate set of lookup tables to …","","","","","","","","","","","","","","","","","","","","","","","","Array of glyph IDs. Sorted.","Array of glyph ranges. Ordered by <code>RangeRecord.start</code>.","","","","","","","","","","","A form that is generally cursive in nature.","","","","","A face that is neither italic not obliqued.","A typically-sloped version of the regular face.","","Face permissions.","","","A script metrics used by subscript and superscript.","","","","A face style.","A OS/2 and Windows Metrics Table.","","","","Unicode Ranges.","A face weight.","A face width.","","","","","","","","","","","","","","","Returns capital height.","","","","","","","","","","","","","","","","","Checks if ranges contain the specified character.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the face bitmaps embedding is allowed.","Checks if face is bold.","Checks if the face subsetting is allowed.","Parses a table from raw data.","","","Returns face permissions.","Returns strikeout metrics.","Returns style.","Returns subscript metrics.","Returns superscript metrics.","Returns a numeric representation of a weight.","Returns a numeric representation of a width.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns typographic ascender.","Returns typographic descender.","Returns typographic line gap.","Returns Unicode ranges.","Checks if typographic metrics should be used.","Table version.","Returns weight class.","Returns face width.","Returns Windows ascender.","Returns Windows descender.","Returns x height.","X offset.","Horizontal face size.","Y offset.","Vertical face size.","An iterator over glyph names.","A PostScript Table.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a glyph ID by a name.","Returns a glyph name by ID.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Flag that indicates that the font is monospaced.","Italic angle in counter-clockwise degrees from the …","Returns an iterator over glyph names.","","Parses a table from raw data.","","","","","","","","","Underline metrics.","A strike of glyphs.","A list of <code>Strike</code>s.","An iterator over <code>Strikes</code>.","A Standard Bitmap Graphics Table.","Selects the best matching <code>Strike</code> based on <code>pixels_per_em</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a glyph data.","Returns a strike at the index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if there are any glyphs.","Checks if there are any strikes.","Returns the number of glyphs in this strike.","Returns the number of strikes.","","Parses a table from raw data.","The pixels per EM size for which this strike was designed.","The device pixel density (in PPI) for which this strike …","A list of <code>Strike</code>s.","","","","","","","","","","","","","","","","A list of SVG documents.","An iterator over <code>SvgDocumentsList</code> values.","An SVG Table.","","","","","","","","","","","","","","A list of SVG documents.","Returns a SVG document data by glyph ID.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns SVG document data at index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if the list is empty.","Returns the number of SVG documents in the list.","","Parses a table from raw data.","","","","","","","","","","","","","A Tracking Table.","A single track.","A track data.","A list of tracks.","An iterator over <code>Tracks</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a track at index.","Horizontal track data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if there are any tracks.","Returns the number of tracks.","The <code>name</code> table index for the track’s name.","","Parses a table from raw data.","A list of sizes.","","","","","A list of tracks.","","","","","","","","","","","","","","","","A track value.","A list of tracking values for each size.","Vertical track data.","A Vertical Header Table.","Face ascender.","","","","","","Face descender.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Face line gap.","Number of metrics in the <code>vmtx</code> table.","Parses a table from raw data.","","","","","A Vertical Origin Table.","Vertical origin metrics for the Vertical Origin Table.","","","","","","","","","Default origin.","","","Returns the argument unchanged.","Returns the argument unchanged.","Glyph ID.","Returns glyph’s Y origin.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A list of metrics for each glyph.","","Parses a table from raw data.","","","","","","","","","Y coordinate, in the font’s design coordinate system, of …"],"i":[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,11,11,11,11,11,11,16,11,11,11,22,22,22,22,22,22,22,22,57,16,57,11,11,11,11,0,11,11,11,11,11,11,58,11,11,11,193,11,11,11,16,11,11,11,47,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,58,57,58,58,57,0,25,0,0,11,11,11,0,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,47,11,11,16,16,16,16,16,16,11,193,11,11,51,11,11,11,11,11,11,11,11,11,11,0,11,11,0,0,0,0,57,0,11,11,11,11,193,11,11,11,25,11,11,11,11,57,16,16,11,11,11,11,16,16,25,25,16,25,57,58,51,0,11,11,51,11,11,57,0,22,11,0,0,11,11,11,47,11,11,11,11,0,0,0,0,16,0,47,11,11,11,6,11,11,11,11,11,11,11,11,11,11,0,57,58,58,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,0,11,11,11,11,11,11,57,11,11,11,11,11,58,58,193,0,11,25,16,11,11,11,11,0,0,11,0,11,0,193,11,11,11,11,16,0,27,28,0,1,3,0,27,28,19,27,28,7,9,7,9,27,11,12,7,14,9,15,16,17,18,19,1,20,21,22,23,24,25,26,27,28,3,11,12,7,14,9,15,16,17,18,19,1,20,21,22,23,24,25,26,27,28,3,3,0,27,28,0,27,0,27,28,0,27,28,24,11,12,7,14,9,15,16,17,18,19,1,20,21,22,23,24,25,26,27,28,3,11,12,7,14,9,15,16,17,18,19,1,20,21,22,23,24,25,26,27,28,3,46,0,27,28,17,1,14,15,46,23,26,56,7,14,9,17,18,27,3,27,28,27,11,16,17,18,19,1,20,21,22,23,25,11,16,17,18,1,20,21,22,23,25,0,27,28,11,11,12,7,9,16,17,18,19,1,1,20,21,22,23,24,25,25,26,3,0,23,11,12,7,14,9,15,16,17,18,18,18,19,1,20,21,22,23,24,25,26,27,28,3,1,1,3,26,3,0,27,28,0,27,28,7,9,18,3,0,27,28,3,3,3,3,3,3,3,3,3,3,3,3,0,27,28,0,27,28,0,27,28,3,17,1,0,27,28,21,3,23,0,27,28,56,0,27,28,0,27,28,11,12,7,14,9,15,16,17,18,19,1,20,21,22,23,24,25,26,27,28,3,7,14,9,15,3,3,7,9,3,3,1,3,3,3,3,11,11,3,0,27,28,0,27,28,7,7,9,24,3,46,0,27,0,27,28,56,0,27,28,56,0,27,28,46,0,27,28,0,27,28,0,56,3,7,9,14,15,3,24,0,0,27,28,3,6,12,17,1,24,26,3,17,1,3,23,20,0,27,28,11,25,46,7,3,11,0,27,28,3,7,3,3,3,3,0,27,28,26,3,26,3,56,24,20,1,1,11,12,7,14,9,15,16,17,18,19,1,20,21,22,23,24,25,26,27,28,3,11,1,25,0,27,28,11,12,7,14,9,15,16,17,18,19,1,20,21,22,23,24,25,26,27,28,3,11,12,7,14,9,15,16,17,18,19,1,20,21,22,23,24,25,26,27,28,3,11,12,7,14,9,15,16,17,18,19,1,20,21,22,23,24,25,26,27,28,3,3,3,3,3,3,3,19,3,3,3,3,3,3,0,27,28,27,28,0,27,28,27,28,3,21,3,23,23,3,21,21,52,52,23,21,21,52,52,0,0,59,60,59,60,59,60,59,60,59,59,59,59,60,59,60,59,60,59,60,60,59,60,59,60,59,60,59,60,59,59,0,0,0,0,0,0,64,65,62,63,66,64,65,62,63,66,0,62,63,64,65,62,63,66,64,65,62,63,66,62,63,64,64,64,65,62,63,66,64,65,62,63,66,64,64,64,64,64,64,65,62,63,66,62,62,64,65,64,63,66,0,64,65,62,63,66,64,65,62,63,66,64,65,62,63,66,64,65,62,63,66,66,64,0,0,0,0,0,0,0,0,71,68,69,70,71,68,69,70,68,69,70,68,69,70,68,69,70,71,68,69,70,68,71,68,69,70,71,69,69,69,70,71,68,70,70,68,68,69,70,71,68,69,70,71,68,69,70,71,68,69,70,0,72,72,72,72,72,72,72,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,73,73,73,73,0,0,74,75,74,75,74,75,74,75,74,74,75,74,75,75,75,75,75,74,75,74,74,75,75,75,75,74,74,74,75,74,75,74,75,74,74,74,75,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,86,0,81,0,86,86,86,86,86,0,0,0,0,0,0,0,0,0,0,0,0,86,86,86,81,90,77,78,79,80,81,82,83,84,85,86,87,88,89,90,77,78,79,80,81,82,83,84,85,86,87,88,89,77,78,79,80,81,82,83,84,85,86,87,88,89,77,78,79,80,81,82,83,84,85,86,87,88,89,77,78,79,80,83,84,85,87,88,87,81,81,78,85,77,78,79,80,81,82,83,84,85,86,87,88,89,87,90,77,78,79,80,81,82,83,84,85,86,87,88,89,88,77,77,78,79,80,82,83,84,85,87,87,78,85,90,77,78,79,80,81,82,83,84,85,86,87,88,89,90,88,88,87,88,90,77,78,79,80,82,83,84,85,89,87,89,77,78,79,80,81,82,83,84,85,86,87,88,89,90,77,78,79,80,81,82,83,84,85,86,87,88,89,90,77,78,79,80,81,82,83,84,85,86,87,88,89,90,77,78,79,80,81,82,83,84,85,86,87,88,89,0,0,0,0,0,95,91,92,93,94,95,91,92,93,94,91,92,93,94,91,92,93,94,92,92,92,93,91,92,93,94,95,91,92,93,94,93,95,91,92,93,94,95,93,93,93,91,92,94,95,91,94,91,92,91,92,93,94,95,91,92,93,94,95,91,92,93,94,95,91,92,93,94,0,0,96,56,96,56,96,56,96,56,96,56,56,56,96,56,96,56,56,96,56,56,56,56,96,56,56,96,56,96,56,96,56,96,97,97,0,97,97,0,97,98,97,98,97,98,97,98,97,98,97,97,97,97,98,98,98,98,98,97,97,98,98,98,97,97,98,97,98,97,98,97,98,0,100,100,100,100,100,100,100,100,100,100,100,100,100,0,0,121,0,121,121,0,0,0,107,111,107,111,104,0,0,0,121,0,121,0,121,0,121,0,0,0,0,121,0,0,0,104,0,114,114,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,119,107,111,121,113,105,112,112,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,106,108,109,110,116,117,119,103,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,106,109,112,116,117,106,109,112,116,117,115,115,120,120,120,114,115,114,115,120,103,121,119,113,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,118,105,105,102,118,105,105,118,105,105,102,118,105,105,236,237,236,236,237,238,239,238,239,132,0,0,0,132,132,124,124,0,132,0,0,0,132,0,132,0,0,0,132,0,0,128,127,131,124,125,126,127,128,129,130,131,132,124,125,126,127,128,129,130,131,132,124,125,126,127,128,129,130,131,132,124,125,126,127,128,129,130,131,132,129,124,132,126,128,130,131,124,125,126,127,128,129,130,131,132,124,125,126,127,128,129,130,131,132,129,124,125,126,127,128,129,130,131,132,132,130,131,132,126,125,131,124,125,126,127,128,129,130,131,132,124,125,126,127,128,129,130,131,132,124,125,126,127,128,129,130,131,132,124,125,126,127,128,129,130,131,132,240,241,240,241,0,133,133,133,133,133,133,133,133,133,133,133,133,133,0,134,134,0,134,135,134,135,134,135,134,135,134,134,134,135,134,135,135,135,134,135,135,134,135,134,135,134,135,134,135,135,0,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,0,0,137,138,137,138,137,138,137,138,137,138,137,138,137,138,137,138,137,137,137,138,137,137,138,138,137,138,137,138,137,138,137,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,141,141,141,141,0,0,0,0,0,0,0,0,140,141,142,143,144,145,146,147,148,140,141,142,143,144,145,146,147,148,140,141,142,143,144,145,146,147,148,140,141,142,143,144,145,146,147,148,144,140,141,142,143,145,146,147,148,142,140,141,142,143,144,145,146,147,148,142,145,146,147,142,142,142,140,141,142,143,144,145,146,147,148,143,144,143,140,143,144,140,145,140,145,146,147,148,140,148,140,141,142,143,144,145,146,147,148,140,141,142,143,144,145,146,147,148,140,141,142,143,144,145,146,147,148,140,141,142,143,144,145,146,147,148,140,142,0,0,0,156,156,156,156,156,0,0,0,0,0,0,0,0,0,150,154,149,150,151,152,153,154,155,156,157,158,159,160,149,150,151,152,153,154,155,156,157,158,159,160,149,150,151,152,153,154,155,156,157,158,159,160,149,150,151,152,153,154,155,156,157,158,159,160,151,154,149,150,151,152,153,154,155,156,157,158,160,157,149,150,151,152,153,154,155,156,157,158,159,160,153,149,151,152,155,157,157,157,157,149,150,151,152,153,154,155,156,157,158,159,160,158,159,159,149,150,160,151,154,160,149,150,151,152,153,154,155,156,157,158,159,160,149,150,151,152,153,154,155,156,157,158,159,160,149,150,151,152,153,154,155,156,157,158,159,160,157,149,150,151,152,153,154,155,156,157,158,159,160,157,101,101,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,171,172,161,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,165,165,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,175,164,161,162,161,169,167,168,161,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,161,161,161,161,161,161,161,161,161,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,169,163,166,173,169,175,164,174,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,167,170,164,167,161,161,161,174,161,161,161,168,169,171,175,169,170,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,169,161,161,161,161,161,161,161,161,161,161,161,161,161,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,167,165,165,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,162,163,161,164,165,166,167,168,169,170,171,172,173,174,175,161,161,161,161,161,162,171,172,175,174,0,176,176,176,176,176,176,176,176,176,176,176,176,176,0,0,0,183,0,0,0,0,183,0,0,183,0,183,183,0,0,0,0,0,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,191,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,180,185,178,181,188,177,177,185,188,177,178,179,180,181,182,183,184,185,186,188,189,191,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,182,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,186,187,189,190,184,184,184,184,177,185,180,180,179,178,181,187,190,177,178,181,191,177,179,180,182,188,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,0,192,192,192,192,192,192,192,192,192,192,192,192,192,193,193,193,0,0,0,0,0,193,193,193,194,45,195,196,193,194,45,195,196,193,194,45,195,196,193,194,45,195,196,195,45,196,194,193,193,193,194,45,196,193,194,45,195,196,45,193,194,45,195,196,45,195,45,194,194,194,45,194,0,194,196,195,193,196,194,193,194,45,195,196,194,193,194,45,195,196,193,194,45,195,196,193,194,45,195,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,199,122,212,197,199,122,212,197,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,217,216,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,217,216,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,122,197,199,206,49,207,203,205,202,202,209,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,217,216,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,205,210,122,212,211,211,211,211,205,198,200,217,216,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,217,216,205,210,205,210,206,205,210,198,208,201,198,200,203,211,209,217,216,204,215,201,206,207,208,211,49,207,211,203,201,49,209,206,207,208,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,217,216,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,217,216,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,217,216,197,198,199,200,201,202,203,205,206,207,208,209,210,211,49,122,212,211,49,203,242,243,244,242,243,242,243,242,243,243,244,242,245,246,245,247,248,247,249,249,249,248,247,250,251,57,57,58,47,58,57,58,58,57,47,51,57,57,57,58,51,51,57,0,47,47,0,57,58,58,0,0,57,58,58,0,0,0,57,58,47,51,52,55,218,57,58,47,51,52,55,218,218,57,58,47,51,52,55,218,57,58,47,51,52,55,218,58,47,55,57,58,51,55,57,58,47,51,52,57,58,47,51,52,57,58,47,51,52,55,218,57,57,58,47,51,52,55,218,57,58,47,51,52,57,58,47,51,52,55,218,218,218,218,218,58,47,218,218,218,218,218,57,58,57,58,47,51,52,55,218,57,58,47,51,52,55,218,57,58,47,51,52,55,218,57,58,47,51,52,55,218,218,218,218,218,218,218,218,218,218,218,218,52,52,52,52,0,0,219,220,219,220,219,220,219,220,219,219,220,219,220,220,220,219,220,219,220,220,220,219,220,219,220,219,220,219,220,219,220,220,0,0,0,0,221,224,222,223,221,224,222,223,221,222,223,221,222,223,221,222,223,221,224,222,223,221,222,223,224,222,223,221,224,223,222,223,222,223,224,221,222,222,221,222,223,221,224,222,223,221,224,222,223,221,224,222,223,221,0,0,0,225,226,227,225,226,227,225,226,227,225,226,227,226,227,225,225,227,225,226,227,225,225,226,227,225,226,225,225,226,227,225,226,227,225,226,227,225,226,227,225,226,227,0,0,0,0,0,232,228,229,230,231,232,228,229,230,231,228,229,230,231,228,229,230,231,229,230,228,229,230,231,232,228,229,230,231,229,231,232,228,229,230,231,232,229,229,229,228,232,231,230,228,229,230,231,230,232,228,229,230,231,232,228,229,230,231,232,228,229,230,231,228,228,231,0,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,0,0,234,235,234,235,234,235,234,235,235,234,235,234,235,234,235,234,235,235,234,235,234,235,234,235,234,235,234,235,234],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],0,0,0,0,0,0,[[[7,[5,6]],5,6],8],[[[9,[5,6]],5,6],8],[[[7,[6]],10],8],[[[9,[6]],10],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[8,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,[11,11],[12,12],[[[7,[13]]],[[7,[13]]]],[[[14,[13]]],[[14,[13]]]],[[[9,[13]]],[[9,[13]]]],[[[15,[13]]],[[15,[13]]]],[16,16],[17,17],[18,18],[19,19],[1,1],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[17,17],29],[[1,1],29],[[[14,[6]]],30],[[[15,[6]]],30],[[31,31,31,31,31,31]],0,0,0,[[],7],[[],[[14,[6]]]],[[],9],[[],17],[[],18],[[],27],[3,4],0,0,0,[[11,11],32],[[16,16],32],[[17,17],32],[[18,18],32],[[19,19],32],[[1,1],32],[[20,20],32],[[21,21],32],[[22,22],32],[[23,23],32],[[25,25],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,[[11,33],34],[[11,33],34],[[12,33],34],[[[7,[[0,[6,35,36]]]],33],34],[[[9,[[0,[6,35,36]]]],33],34],[[16,33],34],[[17,33],34],[[18,33],34],[[19,33],34],[[1,33],34],[[1,33],34],[[20,33],34],[[21,33],34],[[22,33],34],[[23,33],34],[[24,33],34],[[25,33],34],[[25,33],34],[[26,33],34],[[3,33],34],[[[38,[37]]],[[8,[2]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,18],[4,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[39,[37]]],1],[[[38,[37]]],1],[27,[[40,[3,25]]]],[[[38,[37]],2],[[40,[26,25]]]],[[[38,[37]],2],[[40,[3,25]]]],0,0,0,0,0,0,[[[7,[6]],41],[[8,[6]]]],[[[9,[6]],2],[[8,[6]]]],[18,4],[3,21],0,0,0,[[3,17],[[8,[21]]]],[[3,17],[[8,[41]]]],[[3,17],[[8,[4]]]],[[3,42],[[8,[17]]]],[[3,43],[[8,[17]]]],[[3,17],[[8,[43]]]],[[3,17,41],[[8,[23]]]],[[3,17],[[8,[[38,[37]]]]]],[[3,42,42],[[8,[17]]]],[[3,17],[[8,[41]]]],[[3,17],[[8,[4]]]],[[3,17],[[8,[4]]]],0,0,0,0,0,0,0,0,0,[3,32],[[17,44]],[[1,44]],0,0,0,[21,4],[3,4],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[6]]]],[[]],[[[9,[6]]]],[[]],[3,32],[3,32],[[[7,[6]]],32],[[[9,[6]]],32],[3,32],[3,32],[1,32],[3,32],[3,32],[3,32],[3,32],0,0,[3,[[8,[31]]]],0,0,0,0,0,0,[[[7,[6]]],[[8,[6]]]],[[[7,[6]]],41],[[[9,[6]]],2],0,[3,4],[[31,31]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[31,31]],0,0,0,0,0,0,0,0,[3,45],[[[38,[37]]],[[7,[6]]]],[[[38,[37]]],[[9,[6]]]],[[[14,[6]]],8],[[[15,[6]]],8],[3,41],0,0,0,0,0,[[3,17,46],[[8,[21]]]],[[[38,[37]]],8],[[[38,[37]]],[[8,[12]]]],[[[38,[37]]],[[8,[17]]]],[[[38,[37]]],[[8,[1]]]],[[[38,[37]]],[[8,[24]]]],[[[38,[37]],2],[[40,[26,25]]]],[[[38,[37]],2],[[40,[3,25]]]],[[17,17],[[8,[29]]]],[[1,1],[[8,[29]]]],[3,[[8,[47]]]],0,0,0,0,0,[11,43],[48],[[31,31,31,31]],[[[7,[49]],17],[[8,[49]]]],[3,26],[11,43],0,0,0,[[3,1,31],8],[[[7,[6]],[50,[41]]],[[8,[[7,[6]]]]]],[3,[[8,[20]]]],[3,51],[3,[[8,[52]]]],[3,[[8,[52]]]],0,0,0,[[26,1],[[8,[[38,[37]]]]]],[[3,1],[[8,[[38,[37]]]]]],0,[3,28],0,0,0,[1,[[39,[37]]]],[1,[[39,[42]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],53],[[],53],[[],53],0,0,0,[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[3,[[8,[4]]]],[3,[[8,[4]]]],[3,[[8,[4]]]],[3,[[8,[20]]]],[3,55],[3,41],0,[3,[[7,[56]]]],[3,[[38,[18]]]],[3,[[8,[4]]]],[3,[[8,[4]]]],[3,[[8,[4]]]],[3,[[8,[4]]]],0,0,0,0,0,0,0,0,0,0,[3,57],[21,4],[3,58],0,0,[3,[[8,[4]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[59,59],[60,60],[[]],[[]],[[],59],[[59,59],32],[[],32],[[59,33],34],[[60,33],34],[[]],[[]],[[]],[[]],[[[38,[37]]],[[8,[59]]]],[[61,[38,[37]]],[[8,[60]]]],[[60,17],[[8,[[9,[59]]]]]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[62,17],[[8,[37]]]],[[[63,[6]],17],[[8,[41]]]],[[[64,[[0,[13,6]]]]],[[64,[[0,[13,6]]]]]],[65,65],[62,62],[[[63,[13]]],[[63,[13]]]],[66,66],[[]],[[]],[[]],[[]],[[]],[[62,41,37],[[8,[67]]]],[[[63,[6]],41,41],[[8,[[64,[6]]]]]],0,0,[[[64,[[0,[35,6]]]],33],34],[[65,33],34],[[62,33],34],[[63,33],34],[[66,33],34],[[]],[[]],[[]],[[]],[[]],[[[64,[6]]],32],[[[64,[6]]],32],[[[64,[6]]],32],[[[64,[6]]],32],[[[64,[6]]],32],[[]],[[]],[[]],[[]],[[]],[[62,65],[[8,[4]]]],[[62,41],41],0,[65,65],[[[38,[37]]],[[8,[[64,[6]]]]]],0,[[61,[38,[37]]],[[8,[66]]]],0,[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],[[66,17],[[8,[41]]]],[[[64,[6]]],65],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68,68],[69,69],[70,70],[[]],[[]],[[]],[[68,33],34],[[69,33],34],[[70,33],34],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[69],[69,32],[69,41],[[70,[38,[18]]],8],[71,8],[[[38,[37]]],[[8,[68]]]],[[[38,[37]]],[[8,[70]]]],0,0,[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],0,[[]],[[]],[72,72],[[]],[[72,33],34],[[]],[[72,17,41],[[8,[23]]]],[[]],[[73,[38,[37]]],[[8,[72]]]],[[]],[[],40],[[],40],[[],54],0,[[]],[[]],[73,73],[[]],[[73,33],34],[[]],[[]],[[[38,[37]]],[[8,[73]]]],[[]],[[],40],[[],40],[[],54],0,0,[[]],[[]],[[]],[[]],[74,74],[75,75],[[]],[[]],[[],74],[[74,33],34],[[75,33],34],[[]],[[]],[[75,37],[[8,[17]]]],[[75,43],[[8,[17]]]],[[75,17],[[8,[43]]]],[[75,17],[[8,[41]]]],[[]],[[]],0,0,[75,74],[75,41],[[75,17,46],[[40,[21,16]]]],[[[38,[37]]],[[8,[75]]]],0,0,[[]],[[]],[[],40],[[],40],[[],40],[[],40],0,0,[[],54],[[],54],0,[[]],[[]],[76,76],[[]],[[],76],[[76,33],34],[[]],[[]],[[76,[38,[18]],17,46],[[40,[21,16]]]],[[[38,[37]]],[[8,[76]]]],[[]],[[],40],[[],40],[[],54],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[77,10]],[[78,10]],[[79,10]],[[80,10]],[[83,10]],[[84,10]],[[85,10]],[[87,10]],[[],88],0,[[81,81],32],[[],32],0,0,[[77,33],34],[[78,33],34],[[79,33],34],[[80,33],34],[[81,33],34],[[82,33],34],[[83,33],34],[[84,33],34],[[85,33],34],[[86,33],34],[[87,33],34],[[88,33],34],[[89,33],34],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[88,41],[[8,[87]]]],0,[[77,2],[[8,[17]]]],[[78,2],[[8,[17]]]],[[79,2],[[8,[17]]]],[[80,2],[[8,[17]]]],[[82,2,2],[[8,[81]]]],[[83,2],[[8,[17]]]],[[84,2],[[8,[17]]]],[[85,2],[[8,[17]]]],[[87,2],[[8,[17]]]],[[87,2,2],[[8,[81]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[88],[88,32],[87,32],[88,41],[90,8],[[[38,[37]]],[[8,[77]]]],[[[38,[37]]],[[8,[78]]]],[[[38,[37]]],[[8,[79]]]],[[[38,[37]]],[[8,[80]]]],[[[38,[37]]],[[8,[82]]]],[[[38,[37]]],[[8,[83]]]],[[[38,[37]]],[[8,[84]]]],[[[38,[37]]],[[8,[85]]]],[[[38,[37]]],[[8,[89]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[91,91],[92,92],[93,93],[94,94],[[]],[[]],[[]],[[]],0,0,0,[[93,41],[[8,[92]]]],[[91,33],34],[[92,33],34],[[93,33],34],[[94,33],34],[[]],[[]],[[]],[[]],[[]],[[93,41],[[8,[92]]]],[[]],[[]],[[]],[[]],[[]],[[]],[93],[93,32],[93,41],0,0,0,[95,8],[[[38,[37]]],[[8,[91]]]],[[[38,[37]]],[[8,[94]]]],0,0,[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],0,0,0,[[]],[[]],[[]],[[]],[56,56],[96,96],[[]],[[]],0,[[56,56],32],[[56,33],34],[[96,33],34],[[]],[[]],0,[[]],[[]],0,0,0,[[[38,[37]]],[[8,[56]]]],[[[38,[37]]],[[8,[96]]]],0,[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[97,97],[98,98],[[]],[[]],[[97,97],29],[[],98],[[97,97],32],[[],32],[[97,33],34],[[]],[[]],[[98,17],[[8,[97]]]],[[98,17],99],[[98,41,41,[38,[18]]],[[8,[31]]]],[98,32],[[97,44]],[[]],[[]],[[98,17,[8,[41]]],32],[[[38,[37]]],[[8,[98]]]],[[97,97],[[8,[29]]]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],0,[[]],[[]],[100,100],[[]],[[100,33],34],[[]],[[]],[[100,17,46],[[8,[21]]]],[[101,[38,[37]]],[[8,[100]]]],[[]],[[],40],[[],40],[[],54],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[107,122],[111,122],[121,122],0,[[],105],[[112,41],[[8,[118]]]],[[112,41],[[8,[118]]]],[[102,33],34],[[103,33],34],[[104,33],34],[[105,33],34],[[106,33],34],[[107,33],34],[[108,33],34],[[109,33],34],[[110,33],34],[[111,33],34],[[112,33],34],[[113,33],34],[[114,33],34],[[115,33],34],[[116,33],34],[[117,33],34],[[118,33],34],[[119,33],34],[[120,33],34],[[121,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[106,41],[[8,[105]]]],[[108,17],8],[[109,41],[[8,[108]]]],[110,8],[[116,41],[[8,[119]]]],[[117,41],8],[[119,41,41],[[8,[118]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[106,32],[109,32],[112,32],[116,32],[117,32],[106,41],[109,41],[112,41],[116,41],[117,41],0,0,0,0,0,0,0,0,0,0,0,[[[38,[37]],41],[[8,[121]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],0,0,0,[[102,41,8],[[8,[123]]]],0,0,0,0,0,0,[[102,41,8],[[8,[123]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[124,122],[132,122],0,0,0,0,[[124,33],34],[[125,33],34],[[126,33],34],[[127,33],34],[[128,33],34],[[129,33],34],[[130,33],34],[[131,33],34],[[132,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[132,32],0,0,[[[38,[37]],41],[[8,[132]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],0,0,0,0,0,[[]],[[]],[133,133],[[]],[[133,33],34],[[]],[[]],[[133,100,[38,[18]],17,46],[[8,[21]]]],[[[38,[37]]],[[8,[133]]]],[[]],[[],40],[[],40],[[],54],0,0,0,0,[[]],[[]],[[]],[[]],[134,134],[135,135],[[]],[[]],[[134,134],32],[[],32],[[134,33],34],[[135,33],34],[[]],[[]],0,0,[[]],[[]],[[[38,[37]]],[[8,[135]]]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],0,0,0,[[]],[[]],[136,136],[[]],0,[[136,33],34],[[]],[[]],0,0,[[[38,[37]]],[[8,[136]]]],[[]],[[],40],[[],40],[[],54],0,0,[[137,17],[[8,[41]]]],0,0,[[]],[[]],[[]],[[]],[138,138],[137,137],[[]],[[]],[[138,33],34],[[137,33],34],[[]],[[]],[[]],[[]],0,0,[[[38,[37]]],[[8,[138]]]],[[41,61,[38,[37]]],[[8,[137]]]],[[137,17],[[8,[4]]]],0,[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],0,[[139,17,[38,[18]]],[[8,[31]]]],[[]],[[]],[139,139],[[]],[[139,33],34],[[]],[[]],[[[38,[37]]],[[8,[139]]]],[[139,17,[38,[18]]],[[8,[31]]]],[[]],[[],40],[[],40],[[],54],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],144],[[140,33],34],[[141,33],34],[[142,33],34],[[143,33],34],[[145,33],34],[[146,33],34],[[147,33],34],[[148,33],34],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[142,17,17],[[8,[4]]]],[[145,17,17],[[8,[4]]]],[[146,17,17],[[8,[4]]]],[[147,17,17],[[8,[4]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[143],[[]],[143,32],[140,17],[143,2],[144,8],0,0,[[[38,[37]]],[[8,[140]]]],[[[38,[37]]],[[8,[145]]]],[[37,[38,[37]]],[[8,[146]]]],[[[38,[37]]],[[8,[147]]]],[[[38,[37]]],[[8,[148]]]],[140,17],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[151],[154],[[149,33],34],[[150,33],34],[[151,33],34],[[152,33],34],[[153,33],34],[[154,33],34],[[155,33],34],[[156,33],34],[[157,33],34],[[158,33],34],[[160,33],34],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[153,41],8],[[149,17,17],[[8,[4]]]],[[151,41],[[8,[4]]]],[[152,17,17],[[8,[4]]]],[[155,17,17],[[8,[4]]]],[[157,17,17],[[8,[4]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[158],[[]],[159,8],0,[[[38,[37]]],[[8,[150]]]],[[61,[38,[37]]],[[8,[160]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],0,0,0,0,[[]],[[]],[101,101],[[]],[[101,33],34],[[]],[[101,17],[[8,[[50,[30]]]]]],[[]],[101,32],[101,41],[[61,134,[38,[37]]],[[8,[101]]]],[[]],[[],40],[[],40],[[],54],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[161,162],0,0,[161,162],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[162,162],[163,163],[161,161],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[164,41],[161,41],0,[161,41],0,0,[168,32],[161,162],[[162,33],34],[[163,33],34],[[161,33],34],[[164,33],34],[[165,33],34],[[166,33],34],[[167,33],34],[[168,33],34],[[169,33],34],[[170,33],34],[[171,33],34],[[172,33],34],[[173,33],34],[[174,33],34],[[175,33],34],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[163,17],[[8,[162]]]],[[166,17],[[8,[165]]]],[[173,17],[[8,[172]]]],0,0,[[164,41],[[8,[162]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[164,41],[[8,[162]]]],0,[161,162],[161,162],[161,162],0,[161,162],[161,162],[161,162],[[[38,[37]]],[[8,[168]]]],[[[38,[37]]],[[8,[169]]]],[[[38,[37]]],[[8,[171]]]],[[[38,[37]]],[[8,[175]]]],0,0,[161,4],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,4],[161,4],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],0,[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[161,162],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[161,162],[161,162],[161,162],[161,162],[161,162],0,0,0,0,0,0,[[]],[[]],[176,176],[[]],[[176,33],34],[[]],[[]],0,[[[38,[37]]],[[8,[176]]]],[[]],[[],40],[[],40],[[],54],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[185,185],[186,186],[187,187],[188,188],[189,189],[190,190],[191,191],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[177,33],34],[[178,33],34],[[179,33],34],[[180,33],34],[[181,33],34],[[182,33],34],[[183,33],34],[[184,33],34],[[185,33],34],[[186,33],34],[[188,33],34],[[189,33],34],[[191,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[186],[[]],[189],[[]],[184,32],[184,32],[184,32],[184,32],0,0,0,0,[[179,2],[[8,[66]]]],0,0,[187,8],[190,8],[[[38,[37]]],[[8,[177]]]],[[[38,[37]]],[[8,[178]]]],[[[38,[37]]],[[8,[181]]]],[[61,[38,[37]]],[[8,[191]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],0,[[]],[[]],[192,192],[[]],[[192,33],34],[[]],[[]],[[192,1,[38,[18]]],[[8,[31]]]],[[[38,[37]]],[[8,[192]]]],[[]],[[],40],[[],40],[[],54],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[193,193],[194,194],[45,45],[195,195],[196,196],[[]],[[]],[[]],[[]],[[]],[195,30],[[],45],[[],196],0,[[193,193],32],[[],32],[[193,33],34],[[194,33],34],[[45,33],34],[[196,33],34],[[]],[[]],[[]],[[]],[[]],[[45,41],[[8,[194]]]],[[]],[[]],[[]],[[]],[[]],[45],[[]],[45,32],[194,32],[194,11],0,[45,41],0,0,0,0,[195,8],[[[38,[37]]],[[8,[193]]]],[[[38,[37]]],[[8,[196]]]],0,[[]],[[]],[[]],[[]],[[]],[194,[[8,[53]]]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[[[205,[[0,[13,204]]]]],[[205,[[0,[13,204]]]]]],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[49,49],[122,122],[212,212],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[122,17],32],[197,122],[199,122],0,0,0,0,[[[205,[204]],1],[[8,[204]]]],[[202,[38,[18]]],[[8,[213]]]],[[202,214,213],[[8,[208]]]],0,[[197,33],34],[[198,33],34],[[199,33],34],[[200,33],34],[[201,33],34],[[202,33],34],[[203,33],34],[[[205,[[0,[35,204]]]],33],34],[[206,33],34],[[207,33],34],[[208,33],34],[[209,33],34],[[210,33],34],[[211,33],34],[[49,33],34],[[122,33],34],[[212,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[205,[204]],41],[[8,[204]]]],[[210,41],[[8,[215]]]],[[122,17],[[8,[41]]]],[[212,17],99],[211,32],[211,32],[211,32],[211,32],[[[205,[204]],1],[[8,[41]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[205,[204]]]],[210,[[216,[215]]]],[[[205,[204]]],32],[210,32],0,[[[205,[204]]],41],[210,41],0,0,0,0,0,0,[211,37],0,[[[217,[204]]],8],[[[216,[215]]],8],[[1,[38,[37]]],8],[[[38,[37]],41],8],[[[38,[37]]],[[8,[201]]]],[[1,[38,[37]]],[[8,[206]]]],[[1,[38,[37]]],[[8,[207]]]],[[1,[38,[37]]],[[8,[208]]]],[[[38,[37]]],[[8,[211]]]],[[[38,[37]]],[[8,[49]]]],0,[211,32],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[211,32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[218,[[8,[4]]]],[57,57],[58,58],[47,47],[51,51],[52,52],[55,55],[218,218],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[58,58],29],[[47,47],29],[[55,42],32],[[],57],[[],58],[[],51],[[],55],[[57,57],32],[[58,58],32],[[47,47],32],[[51,51],32],[[52,52],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[57,33],34],[[58,33],34],[[47,33],34],[[51,33],34],[[52,33],34],[[55,33],34],[[218,33],34],[[]],[41,57],[[]],[[]],[[]],[[]],[[]],[[]],[[57,44]],[[58,44]],[[47,44]],[[51,44]],[[52,44]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[218,32],[218,32],[218,32],[[[38,[37]]],[[8,[218]]]],[[58,58],[[8,[29]]]],[[47,47],[[8,[29]]]],[218,[[8,[47]]]],[218,20],[218,51],[218,52],[218,52],[57,41],[58,41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[[],54],[218,4],[218,4],[218,4],[218,55],[218,32],0,[218,57],[218,58],[218,4],[218,4],[218,[[8,[4]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[219,219],[220,220],[[]],[[]],[[],219],[[219,33],34],[[220,33],34],[[]],[[]],[[220,43],[[8,[17]]]],[[220,17],[[8,[43]]]],[[]],[[]],[[]],0,0,[220,219],[219,8],[[[38,[37]]],[[8,[220]]]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],0,0,0,0,0,[[221,41],[[8,[222]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[222,222],[223,223],[221,221],[[]],[[]],[[]],[[222,33],34],[[223,33],34],[[221,33],34],[[]],[[]],[[]],[[]],[[222,17],[[8,[23]]]],[[223,2],[[8,[222]]]],[[]],[[]],[[]],[[]],[[]],[223],[222,32],[223,32],[222,41],[223,2],[224,8],[[61,[38,[37]]],[[8,[221]]]],0,0,0,[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[225,225],[226,226],[227,227],[[]],[[]],[[]],[226,30],0,[[225,17],[[8,[[38,[37]]]]]],[[225,33],34],[[227,33],34],[[]],[[]],[[]],[[225,41],[[8,[[38,[37]]]]]],[[]],[[]],[[]],[225],[[]],[225,32],[225,41],[226,8],[[[38,[37]]],[[8,[227]]]],[[]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[228,228],[229,229],[230,230],[231,231],[[]],[[]],[[]],[[]],[[],229],[[],230],[[228,33],34],[[229,33],34],[[230,33],34],[[231,33],34],[[]],[[]],[[]],[[]],[[]],[[229,41],[[8,[228]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[229],[229,32],[229,41],0,[232,8],[[[38,[37]]],[[8,[231]]]],0,[[]],[[]],[[]],[[]],0,[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],[[],54],[[],54],[[],54],0,0,0,0,0,[[]],[[]],[233,233],[[]],[[],233],0,[[233,33],34],[[]],[[]],0,0,[[[38,[37]]],[[8,[233]]]],[[]],[[],40],[[],40],[[],54],0,0,[[]],[[]],[[]],[[]],[234,234],[235,235],[[]],[[]],0,[[234,33],34],[[235,33],34],[[]],[[]],0,[[235,17],4],[[]],[[]],0,[[[38,[37]]],[[8,[234]]]],[[[38,[37]]],[[8,[235]]]],[[]],[[]],[[],40],[[],40],[[],40],[[],40],[[],54],[[],54],0],"c":[508,509,682],"p":[[3,"Tag"],[15,"u32"],[3,"Face"],[15,"i16"],[8,"Ord"],[8,"FromData"],[3,"LazyArray16"],[4,"Option"],[3,"LazyArray32"],[8,"FnMut"],[4,"Language"],[3,"Fixed"],[8,"Clone"],[3,"LazyArrayIter16"],[3,"LazyArrayIter32"],[4,"CFFError"],[3,"GlyphId"],[3,"NormalizedCoordinate"],[3,"Variation"],[3,"LineMetrics"],[3,"Rect"],[4,"RasterImageFormat"],[3,"RasterGlyphImage"],[3,"TableRecord"],[4,"FaceParsingError"],[3,"RawFace"],[3,"RawFaceTables"],[3,"FaceTables"],[4,"Ordering"],[15,"usize"],[15,"f32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Copy"],[15,"u8"],[15,"slice"],[15,"array"],[4,"Result"],[15,"u16"],[15,"char"],[15,"str"],[8,"Hasher"],[3,"Names"],[8,"OutlineBuilder"],[4,"Permissions"],[3,"Demand"],[3,"RangeRecord"],[3,"Range"],[4,"Style"],[3,"ScriptMetrics"],[3,"String"],[3,"TypeId"],[3,"UnicodeRanges"],[3,"VariationAxis"],[4,"Weight"],[4,"Width"],[3,"Point"],[3,"Table"],[3,"NonZeroU16"],[3,"StateTable"],[3,"ExtendedStateTable"],[3,"GenericStateEntry"],[3,"ValueOffset"],[3,"Lookup"],[6,"StateEntry"],[3,"AxisValueMap"],[3,"SegmentMaps"],[3,"Table"],[3,"SegmentMapsIter"],[3,"Table"],[3,"Table"],[3,"Matrix"],[3,"Table"],[3,"Table"],[3,"Subtable0"],[3,"Subtable10"],[3,"Subtable12"],[3,"Subtable13"],[4,"GlyphVariationResult"],[3,"Subtable14"],[3,"Subtable2"],[3,"Subtable4"],[3,"Subtable6"],[4,"Format"],[3,"Subtable"],[3,"Subtables"],[3,"Table"],[3,"SubtablesIter"],[3,"SettingName"],[3,"FeatureName"],[3,"FeatureNames"],[3,"Table"],[3,"FeatureNamesIter"],[3,"Table"],[4,"GlyphClass"],[3,"Table"],[6,"Class"],[3,"Table"],[4,"Table"],[3,"HintingDevice"],[3,"VariationDevice"],[4,"Device"],[3,"ValueRecord"],[3,"ValueRecordsArray"],[4,"SingleAdjustment"],[3,"PairSet"],[3,"PairSets"],[3,"ClassMatrix"],[4,"PairAdjustment"],[3,"CursiveAnchorSet"],[3,"CursiveAdjustment"],[3,"MarkToBaseAdjustment"],[3,"MarkToLigatureAdjustment"],[3,"LigatureArray"],[3,"MarkArray"],[3,"Anchor"],[3,"AnchorMatrix"],[3,"MarkToMarkAdjustment"],[4,"PositioningSubtable"],[4,"Coverage"],[15,"i32"],[4,"SingleSubstitution"],[3,"Sequence"],[3,"MultipleSubstitution"],[3,"AlternateSet"],[3,"AlternateSubstitution"],[3,"Ligature"],[3,"LigatureSubstitution"],[3,"ReverseChainSingleSubstitution"],[4,"SubstitutionSubtable"],[3,"Table"],[4,"IndexToLocationFormat"],[3,"Table"],[3,"Table"],[3,"Table"],[3,"Metrics"],[3,"Table"],[3,"KerningPair"],[4,"Format"],[3,"Subtable"],[3,"Subtables"],[3,"SubtablesIter"],[3,"Subtable0"],[3,"Subtable2"],[3,"Subtable3"],[3,"Table"],[3,"Subtable0"],[3,"EntryData"],[3,"Subtable1"],[3,"Subtable2"],[3,"AnchorPoints"],[3,"Subtable4"],[3,"Subtable6"],[4,"Format"],[3,"Subtable"],[3,"Subtables"],[3,"SubtablesIter"],[3,"Table"],[3,"Constants"],[3,"MathValue"],[3,"MathValues"],[3,"Kern"],[3,"KernInfo"],[3,"KernInfos"],[3,"GlyphInfo"],[3,"PartFlags"],[3,"GlyphPart"],[3,"GlyphAssembly"],[3,"GlyphVariant"],[3,"GlyphConstruction"],[3,"GlyphConstructions"],[3,"Variants"],[3,"Table"],[3,"Table"],[3,"Feature"],[3,"ContextualEntryData"],[3,"ContextualSubtable"],[3,"LigatureSubtable"],[3,"InsertionEntryData"],[3,"InsertionSubtable"],[4,"SubtableKind"],[3,"Coverage"],[3,"Subtable"],[3,"Subtables"],[3,"SubtablesIter"],[3,"Chain"],[3,"Chains"],[3,"ChainsIter"],[3,"Table"],[3,"Table"],[4,"PlatformId"],[3,"Name"],[3,"NamesIter"],[3,"Table"],[4,"ChainedContextLookup"],[3,"ChainedSequenceRule"],[4,"ContextLookup"],[3,"SequenceRule"],[3,"SequenceLookupRecord"],[3,"FeatureVariations"],[3,"LayoutTable"],[8,"RecordListItem"],[3,"RecordList"],[3,"Script"],[3,"LanguageSystem"],[3,"Feature"],[3,"Lookup"],[3,"LookupSubtables"],[3,"LookupFlags"],[4,"ClassDefinition"],[6,"VariationIndex"],[6,"FeatureIndex"],[8,"LookupSubtable"],[3,"LookupSubtablesIter"],[3,"RecordListIter"],[3,"Table"],[3,"Names"],[3,"Table"],[3,"Table"],[3,"Strike"],[3,"Strikes"],[3,"StrikesIter"],[3,"SvgDocumentsList"],[3,"SvgDocumentsListIter"],[3,"Table"],[3,"Track"],[3,"Tracks"],[3,"TrackData"],[3,"Table"],[3,"TracksIter"],[3,"Table"],[3,"VerticalOriginMetrics"],[3,"Table"],[13,"Format2"],[13,"Format1"],[13,"Format1"],[13,"Format2"],[13,"Format1"],[13,"Format2"],[13,"Format2"],[13,"Format3"],[13,"Format1"],[13,"Format1"],[13,"Format2"],[13,"Format2"],[13,"Format1"],[13,"Format3"],[13,"Format1"],[13,"Format2"]]},\
"unicode_bidi":{"doc":"This crate implements the Unicode Bidirectional Algorithm …","t":"NNNNECDNENNNNDDNNNNCCGNNNNNNDDNNNNCNNRNFLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLALLLLLLLLMLLLLLLLLAMLMLLLLLMMMMMMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLIDKLLLLLLLLMMLLLLFRRRRRRRRRRRRERDRRNRLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AL","AN","B","BN","BidiClass","BidiDataSource","BidiInfo","CS","Direction","EN","ES","ET","FSI","HardcodedBidiData","InitialInfo","L","LRE","LRI","LRO","LTR_LEVEL","Level","LevelRun","Ltr","Mixed","NSM","ON","PDF","PDI","Paragraph","ParagraphInfo","R","RLE","RLI","RLO","RTL_LEVEL","Rtl","S","UNICODE_VERSION","WS","bidi_class","bidi_class","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","data_source","deprecated","direction","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","format_chars","from","from","from","from","from","from","from","has_rtl","info","into","into","into","into","into","into","into","len","level","level","level_at","levels","new","new","new","new_with_data_source","new_with_data_source","original_classes","original_classes","para","paragraphs","paragraphs","range","reorder_line","reorder_visual","reordered_levels","reordered_levels_per_char","text","text","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visual_runs","BidiDataSource","BidiMatchedOpeningBracket","bidi_class","bidi_matched_opening_bracket","borrow","borrow_mut","clone","clone_into","fmt","from","into","is_open","opening","to_owned","try_from","try_into","type_id","visual_runs","ALM","FSI","LRE","LRI","LRM","LRO","PDF","PDI","RLE","RLI","RLM","RLO","Error","LTR_LEVEL","Level","MAX_EXPLICIT_DEPTH","MAX_IMPLICIT_DEPTH","OutOfRangeNumber","RTL_LEVEL","bidi_class","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","eq","eq","eq","eq","equivalent","fmt","fmt","from","from","from","from_slice_unchecked","has_rtl","into","into","into","is_ltr","is_rtl","lower","ltr","max_explicit_depth","max_implicit_depth","new","new_explicit","new_explicit_next_ltr","new_explicit_next_rtl","new_lowest_ge_rtl","number","partial_cmp","raise","raise_explicit","rtl","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vec"],"q":[[0,"unicode_bidi"],[134,"unicode_bidi::data_source"],[151,"unicode_bidi::deprecated"],[152,"unicode_bidi::format_chars"],[164,"unicode_bidi::level"]],"d":["","","","","Represents values of the Unicode character property …","","Bidi information of the text.","","","","","","","Hardcoded Bidi data that ships with the unicode-bidi crate.","Initial bidi information of the text.","","","","","","","A maximal substring of characters with the same embedding …","","","","","","","Contains a reference of <code>BidiInfo</code> and one of its <code>paragraphs</code>.","Bidi information about a single paragraph","","","","","","","","The Unicode version of data","","Find the <code>BidiClass</code> of a single char.","","","","","","","","","","","","","","","","","","","This module holds deprecated assets only.","Returns if the paragraph is Left direction, right …","","","","","","","","","","","","","Directional Formatting Characters","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If processed text has any computed RTL levels","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets the length of the paragraph in the source text.","Bidi Embedding Level","The paragraph embedding level.","Returns the <code>Level</code> of a certain character in the paragraph.","The directional embedding level of each byte in the text.","Find the paragraphs and BidiClasses in a string of text.","Split the text into paragraphs and determine the bidi …","","Find the paragraphs and BidiClasses in a string of text, …","Split the text into paragraphs and determine the bidi …","The BidiClass of the character at each byte in the text. …","The BidiClass of the character at each byte in the text.","","The boundaries and level of each paragraph within the text.","The boundaries and paragraph embedding level of each …","The paragraphs boundaries within the text, as byte indices.","Re-order a line based on resolved levels and return the …","Reorders pre-calculated levels of a sequence of characters.","Re-order a line based on resolved levels and return only …","Re-order a line based on resolved levels and return only …","The text","The text","","","","","","","","","","","","","","","","","","","","","","","Find the level runs within a line and return them in …","This trait abstracts over a data source that is able to …","This is the return value of …","","If this character is a bracket according to …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Whether or not the requested bracket was an opening …","The corresponding opening bracket in this bracket pair, …","","","","","Find the level runs within a line and return them in …","ARABIC LETTER MARK","FIRST STRONG ISOLATE","LEFT-TO-RIGHT EMBEDDING","LEFT‑TO‑RIGHT ISOLATE","LEFT-TO-RIGHT MARK","LEFT-TO-RIGHT OVERRIDE","POP DIRECTIONAL FORMATTING","POP DIRECTIONAL ISOLATE","RIGHT-TO-LEFT EMBEDDING","RIGHT‑TO‑LEFT ISOLATE","RIGHT-TO-LEFT MARK","RIGHT-TO-LEFT OVERRIDE","Errors that can occur on Level creation or mutation","","Embedding Level","During explicit level resolution, embedding level can go …","During implicit level resolution, embedding level can go …","Out-of-range (invalid) embedding level number.","","Generate a character type based on a level (as specified …","","","","","","","","","","","","","","","Returns the argument unchanged.","Create level by number","Returns the argument unchanged.","Converts a byte slice to a slice of Levels","If levels has any RTL (odd) level","Calls <code>U::from(self)</code>.","Convert to the level number","Calls <code>U::from(self)</code>.","If this level is left-to-right.","If this level is right-to-left.","Lower level by <code>amount</code>, fail if number goes below zero.","New LTR level with smallest number value (0).","Maximum depth of the directional status stack during …","Maximum depth of the directional status stack during …","Create new level, fail if number is larger than …","Create new level, fail if number is larger than <code>max_depth</code>.","The next LTR (even) level greater than this, or fail if …","The next RTL (odd) level greater than this, or fail if …","The lowest RTL (odd) level greater than or equal to this, …","The level number.","","Raise level by <code>amount</code>, fail if number is larger than …","Raise level by <code>amount</code>, fail if number is larger than …","New RTL level with smallest number value (1).","","","","","","","",""],"i":[2,2,2,2,0,0,0,2,0,2,2,2,2,0,0,2,2,2,2,0,0,0,5,5,2,2,2,2,0,0,2,2,2,2,0,5,2,0,2,0,3,3,2,5,7,8,9,4,3,2,5,7,8,9,4,2,2,0,0,4,2,5,7,8,9,2,2,5,7,8,9,4,0,3,2,5,7,8,9,4,9,4,3,2,5,7,8,9,4,7,0,7,4,9,8,9,4,8,9,8,9,4,8,9,7,9,9,9,9,8,9,2,3,2,5,7,8,9,4,3,2,5,7,8,9,4,3,2,5,7,8,9,4,9,0,0,16,16,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,13,13,27,13,27,13,13,13,13,13,13,27,13,13,27,13,13,27,13,0,13,13,27,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,27,13,27,13,27,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,1],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[[]],0,0,[4,5],[[2,2],6],[[5,5],6],[[7,7],6],[[8,8],6],[[9,9],6],[[],6],[[2,10],11],[[5,10],11],[[7,10],11],[[8,10],11],[[9,10],11],[[4,10],11],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,12],0,0,[[4,12],13],0,[[14,[15,[13]]],8],[[14,[15,[13]]],9],[[9,7],4],[[16,14,[15,[13]]],8],[[16,14,[15,[13]]],9],0,0,0,0,0,0,[[9,7,[17,[12]]],[[18,[14]]]],[[[19,[13]]],[[20,[12]]]],[[9,7,[17,[12]]],[[20,[13]]]],[[9,7,[17,[12]]],[[20,[13]]]],0,0,[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[9,7,[17,[12]]]],0,0,[1,2],[1,[[15,[23]]]],[[]],[[]],[23,23],[[]],[[23,10],11],[[]],[[]],0,0,[[]],[[],21],[[],21],[[],22],[[[17,[12]],[19,[13]]],[[20,[24]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[13,2],[[]],[[]],[[]],[[]],[13,13],[[]],[[13,13],25],[[13,13],6],[[13,26],6],[[13,14],6],[[27,27],6],[[],6],[[13,10],11],[[27,10],11],[[]],[28,13],[[]],[[[19,[28]]],[[19,[13]]]],[[[19,[13]]],6],[[]],[13,28],[[]],[13,6],[13,6],[[13,28],[[21,[27]]]],[[],13],[[],28],[[],28],[28,[[21,[13,27]]]],[28,[[21,[13,27]]]],[13,[[21,[13,27]]]],[13,[[21,[13,27]]]],[13,[[21,[13,27]]]],[13,28],[[13,13],[[15,[25]]]],[[13,28],[[21,[27]]]],[[13,28],[[21,[27]]]],[[],13],[[]],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[[19,[28]]],[[20,[13]]]]],"c":[151],"p":[[15,"char"],[4,"BidiClass"],[3,"HardcodedBidiData"],[3,"Paragraph"],[4,"Direction"],[15,"bool"],[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"Level"],[15,"str"],[4,"Option"],[8,"BidiDataSource"],[3,"Range"],[4,"Cow"],[15,"slice"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"BidiMatchedOpeningBracket"],[6,"LevelRun"],[4,"Ordering"],[3,"String"],[4,"Error"],[15,"u8"]]},\
"unicode_bidi_mirroring":{"doc":"This library implements Unicode Bidi Mirroring property …","t":"RFF","n":["UNICODE_VERSION","get_mirrored","is_mirroring"],"q":[[0,"unicode_bidi_mirroring"]],"d":["The Unicode version.","Returns a bidi mirrored character.","Checks that character is bidi mirrored."],"i":[0,0,0],"f":[0,[1,[[2,[1]]]],[1,3]],"c":[],"p":[[15,"char"],[4,"Option"],[15,"bool"]]},\
"unicode_ccc":{"doc":"This library implements Unicode Canonical Combining Class …","t":"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNRNLLLLLLFLLLL","n":["Above","AboveLeft","AboveRight","AttachedAbove","AttachedAboveRight","AttachedBelow","AttachedBelowLeft","Below","BelowLeft","BelowRight","CCC10","CCC103","CCC107","CCC11","CCC118","CCC12","CCC122","CCC129","CCC13","CCC130","CCC132","CCC14","CCC15","CCC16","CCC17","CCC18","CCC19","CCC20","CCC21","CCC22","CCC23","CCC24","CCC25","CCC26","CCC27","CCC28","CCC29","CCC30","CCC31","CCC32","CCC33","CCC34","CCC35","CCC36","CCC84","CCC91","CanonicalCombiningClass","DoubleAbove","DoubleBelow","HanReading","IotaSubscript","KanaVoicing","Left","NotReordered","Nukta","Overlay","Right","UNICODE_VERSION","Virama","borrow","borrow_mut","clone","eq","fmt","from","get_canonical_combining_class","into","try_from","try_into","type_id"],"q":[[0,"unicode_ccc"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Character Canonical Combining Class.","","","","","","","","","","","The Unicode version.","","","","","","","Returns the argument unchanged.","Returns a Canonical Combining Class of a character.","Calls <code>U::from(self)</code>.","","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[1,1],2],[[1,3],4],[[]],[5,1],[[]],[[],6],[[],6],[[],7]],"c":[],"p":[[4,"CanonicalCombiningClass"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"char"],[4,"Result"],[3,"TypeId"]]},\
"unicode_general_category":{"doc":"Look up the general category for a character.","t":"NNNNNNNNNENNNNNNNNNNNNNNNNNNNRNNLLLLLLFLLLLL","n":["ClosePunctuation","ConnectorPunctuation","Control","CurrencySymbol","DashPunctuation","DecimalNumber","EnclosingMark","FinalPunctuation","Format","GeneralCategory","InitialPunctuation","LetterNumber","LineSeparator","LowercaseLetter","MathSymbol","ModifierLetter","ModifierSymbol","NonspacingMark","OpenPunctuation","OtherLetter","OtherNumber","OtherPunctuation","OtherSymbol","ParagraphSeparator","PrivateUse","SpaceSeparator","SpacingMark","Surrogate","TitlecaseLetter","UNICODE_VERSION","Unassigned","UppercaseLetter","borrow","borrow_mut","clone","eq","fmt","from","get_general_category","hash","into","try_from","try_into","type_id"],"q":[[0,"unicode_general_category"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The version of Unicode that this version of …","","","","","","","","Returns the argument unchanged.","Look up the general category for a character.","","Calls <code>U::from(self)</code>.","","",""],"i":[1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[1,1],2],[[1,3],4],[[]],[5,1],[[1,6]],[[]],[[],7],[[],7],[[],8]],"c":[],"p":[[4,"GeneralCategory"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"char"],[8,"Hasher"],[4,"Result"],[3,"TypeId"]]},\
"unicode_linebreak":{"doc":"Implementation of the Line Breaking Algorithm described in …","t":"NNNNNNEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRNNNNLLLLFLLLLLLLLLLLFFLLLLLL","n":["After","Allowed","Alphabetic","Ambiguous","Before","BeforeAndAfter","BreakClass","BreakOpportunity","CarriageReturn","CloseParenthesis","ClosePunctuation","CombiningMark","ComplexContext","ConditionalJapaneseStarter","Contingent","EmojiBase","EmojiModifier","Exclamation","HangulLJamo","HangulLvSyllable","HangulLvtSyllable","HangulTJamo","HangulVJamo","HebrewLetter","Hyphen","Ideographic","InfixSeparator","Inseparable","LineFeed","Mandatory","Mandatory","NextLine","NonBreakingGlue","NonStarter","Numeric","OpenPunctuation","Postfix","Prefix","Quotation","RegionalIndicator","Space","Surrogate","Symbol","UNICODE_VERSION","Unknown","WordJoiner","ZeroWidthJoiner","ZeroWidthSpace","borrow","borrow","borrow_mut","borrow_mut","break_property","clone","clone","eq","eq","fmt","fmt","from","from","hash","into","into","linebreaks","split_at_safe","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"unicode_linebreak"]],"d":["Generally provide a line break opportunity after the …","A line is allowed to end at this spot.","Are alphabetic characters or symbols that are used with …","Act like AL when the resolved EAW is N; otherwise, act as …","Generally provide a line break opportunity before the …","Provide a line break opportunity before and after the …","Unicode line breaking class.","Break opportunity type.","Cause a line break (after), except between CR and LF","Prohibit line breaks before","Prohibit line breaks before","Prohibit a line break between the character and the …","Provide a line break opportunity contingent on additional, …","Treat as NS or ID for strict or normal breaking.","Provide a line break opportunity contingent on additional …","Do not break from following Emoji Modifier","Do not break from preceding Emoji Base","Prohibit line breaks before","Form Korean syllable blocks","Form Korean syllable blocks","Form Korean syllable blocks","Form Korean syllable blocks","Form Korean syllable blocks","Do not break around a following hyphen; otherwise act as …","Provide a line break opportunity after the character, …","Break before or after, except in some numeric context","Prevent breaks after any and before numeric","Allow only indirect line breaks between pairs","Cause a line break (after)","Cause a line break (after)","A line must break at this spot.","Cause a line break (after)","Prohibit line breaks before and after","Allow only indirect line breaks before","Form numeric expressions for line breaking purposes","Prohibit line breaks after","Do not break following a numeric expression","Do not break in front of a numeric expression","Act like they are both opening and closing","Keep pairs together. For pairs, break before and after …","Enable indirect line breaks","Do not occur in well-formed text","Prevent a break before, and allow a break after","The Unicode version conformed to.","Have as yet unknown line breaking behavior or unassigned …","Prohibit line breaks before and after","Prohibit line breaks within joiner sequences","Provide a break opportunity","","","","","Returns the line break property of the specified code …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator over line break opportunities in the …","Divides the string at the last index where further breaks …","","","","","",""],"i":[2,3,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,3,2,3,0,2,3,2,3,2,3,2,3,2,2,3,0,0,2,3,2,3,2,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,2],[2,2],[3,3],[[2,2],4],[[3,3],4],[[2,5],6],[[3,5],6],[[]],[[]],[[2,7]],[[]],[[]],[8,[[0,[9,10]]]],[8],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"c":[],"p":[[15,"u32"],[4,"BreakClass"],[4,"BreakOpportunity"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[15,"str"],[8,"Iterator"],[8,"Clone"],[4,"Result"],[3,"TypeId"]]},\
"unicode_script":{"doc":"This crate exposes the Unicode <code>Script</code> and <code>Script_Extension</code> …","t":"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEDDNNNNNNNNNNNNNNNNNNNNNNNNNNNRNINNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKALLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR","n":["Adlam","Ahom","Anatolian_Hieroglyphs","Arabic","Armenian","Avestan","Balinese","Bamum","Bassa_Vah","Batak","Bengali","Bhaiksuki","Bopomofo","Brahmi","Braille","Buginese","Buhid","Canadian_Aboriginal","Carian","Caucasian_Albanian","Chakma","Cham","Cherokee","Chorasmian","Common","Coptic","Cuneiform","Cypriot","Cypro_Minoan","Cyrillic","Deseret","Devanagari","Dives_Akuru","Dogra","Duployan","Egyptian_Hieroglyphs","Elbasan","Elymaic","Ethiopic","Georgian","Glagolitic","Gothic","Grantha","Greek","Gujarati","Gunjala_Gondi","Gurmukhi","Han","Hangul","Hanifi_Rohingya","Hanunoo","Hatran","Hebrew","Hiragana","Imperial_Aramaic","Inherited","Inscriptional_Pahlavi","Inscriptional_Parthian","Javanese","Kaithi","Kannada","Katakana","Kawi","Kayah_Li","Kharoshthi","Khitan_Small_Script","Khmer","Khojki","Khudawadi","Lao","Latin","Lepcha","Limbu","Linear_A","Linear_B","Lisu","Lycian","Lydian","Mahajani","Makasar","Malayalam","Mandaic","Manichaean","Marchen","Masaram_Gondi","Medefaidrin","Meetei_Mayek","Mende_Kikakui","Meroitic_Cursive","Meroitic_Hieroglyphs","Miao","Modi","Mongolian","Mro","Multani","Myanmar","Nabataean","Nag_Mundari","Nandinagari","New_Tai_Lue","Newa","Nko","Nushu","Nyiakeng_Puachue_Hmong","Ogham","Ol_Chiki","Old_Hungarian","Old_Italic","Old_North_Arabian","Old_Permic","Old_Persian","Old_Sogdian","Old_South_Arabian","Old_Turkic","Old_Uyghur","Oriya","Osage","Osmanya","Pahawh_Hmong","Palmyrene","Pau_Cin_Hau","Phags_Pa","Phoenician","Psalter_Pahlavi","Rejang","Runic","Samaritan","Saurashtra","Script","ScriptExtension","ScriptIterator","Sharada","Shavian","Siddham","SignWriting","Sinhala","Sogdian","Sora_Sompeng","Soyombo","Sundanese","Syloti_Nagri","Syriac","Tagalog","Tagbanwa","Tai_Le","Tai_Tham","Tai_Viet","Takri","Tamil","Tangsa","Tangut","Telugu","Thaana","Thai","Tibetan","Tifinagh","Tirhuta","Toto","UNICODE_VERSION","Ugaritic","UnicodeScript","Unknown","Vai","Vithkuqi","Wancho","Warang_Citi","Yezidi","Yi","Zanabazar_Square","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","contains_script","default","default","eq","eq","fmt","fmt","fmt","fmt","for_str","from","from","from","from","from","from","from","from_full_name","from_short_name","full_name","hash","hash","intersect_with","intersection","into","into","into","into_iter","is_common","is_empty","is_inherited","is_recommended","iter","len","next","script","script_extension","script_extensions","short_name","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","ADLAM","ADLM","ADLM_ARAB_MAND_MANI_OUGR_PHLP_ROHG_SOGD_SYRC","ADLM_ARAB_NKOO_ROHG_SYRC_THAA_YEZI","AGHB","AHOM","ANATOLIAN_HIEROGLYPHS","ARAB","ARABIC","ARAB_COPT","ARAB_NKOO","ARAB_NKOO_ROHG_SYRC_THAA_YEZI","ARAB_ROHG","ARAB_SYRC","ARAB_SYRC_THAA","ARAB_THAA","ARAB_THAA_YEZI","ARMENIAN","ARMI","ARMN","AVESTAN","AVST","BALI","BALINESE","BAMU","BAMUM","BASS","BASSA_VAH","BATAK","BATK","BENG","BENGALI","BENG_CAKM_SYLO","BENG_DEVA","BENG_DEVA_DOGR_GONG_GONM_GRAN_GUJR_GURU_KNDA_LIMB_MAHJ_MLYM_NAND_ORYA_SIND_SINH_SYLO_TAKR_TAML_TELU_TIRH","BENG_DEVA_DOGR_GONG_GONM_GRAN_GUJR_GURU_KNDA_MAHJ_MLYM_NAND_ORYA_SIND_SINH_SYLO_TAKR_TAML_TELU_TIRH","BENG_DEVA_GRAN_GUJR_GURU_KNDA_LATN_MLYM_ORYA_SHRD_TAML_TELU_TIRH","BENG_DEVA_GRAN_GUJR_GURU_KNDA_LATN_MLYM_ORYA_TAML_TELU_TIRH","BENG_DEVA_GRAN_KNDA","BENG_DEVA_GRAN_KNDA_NAND_ORYA_TELU_TIRH","BHAIKSUKI","BHKS","BOPO","BOPOMOFO","BOPO_HANG_HANI_HIRA_KANA","BOPO_HANG_HANI_HIRA_KANA_YIII","BOPO_HANI","BRAH","BRAHMI","BRAI","BRAILLE","BUGI","BUGINESE","BUGI_JAVA","BUHD","BUHD_HANO_TAGB_TGLG","BUHID","CAKM","CAKM_MYMR_TALE","CANADIAN_ABORIGINAL","CANS","CARI","CARIAN","CAUCASIAN_ALBANIAN","CHAKMA","CHAM","CHER","CHEROKEE","CHORASMIAN","CHRS","COMMON","COPT","COPTIC","CPMN","CPMN_CPRT_LINB","CPRT","CPRT_LINA_LINB","CPRT_LINB","CUNEIFORM","CYPRIOT","CYPRO_MINOAN","CYRILLIC","CYRL","CYRL_GLAG","CYRL_LATN","CYRL_PERM","CYRL_SYRC","DESERET","DEVA","DEVANAGARI","DEVA_DOGR_GUJR_GURU_KHOJ_KNDA_KTHI_MAHJ_MLYM_MODI_NAND_SIND_TAKR_TIRH","DEVA_DOGR_GUJR_GURU_KHOJ_KNDA_KTHI_MAHJ_MODI_NAND_SIND_TAKR_TIRH","DEVA_DOGR_GUJR_GURU_KHOJ_KTHI_MAHJ_MODI_SIND_TAKR_TIRH","DEVA_DOGR_KTHI_MAHJ","DEVA_GRAN","DEVA_GRAN_KNDA","DEVA_GRAN_LATN","DEVA_KNDA_MLYM_ORYA_TAML_TELU","DEVA_NAND","DEVA_SHRD","DEVA_TAML","DIAK","DIVES_AKURU","DOGR","DOGRA","DSRT","DUPL","DUPLOYAN","EGYP","EGYPTIAN_HIEROGLYPHS","ELBA","ELBASAN","ELYM","ELYMAIC","ETHI","ETHIOPIC","GEOR","GEORGIAN","GEOR_LATN","GLAG","GLAGOLITIC","GONG","GONM","GOTH","GOTHIC","GRAN","GRANTHA","GRAN_TAML","GREEK","GREK","GUJARATI","GUJR","GUJR_KHOJ","GUNJALA_GONDI","GURMUKHI","GURU","GURU_MULT","HAN","HANG","HANGUL","HANI","HANIFI_ROHINGYA","HANI_HIRA_KANA","HANI_LATN","HANO","HANUNOO","HATR","HATRAN","HEBR","HEBREW","HIRA","HIRAGANA","HIRA_KANA","HLUW","HMNG","HMNP","HUNG","IMPERIAL_ARAMAIC","INHERITED","INSCRIPTIONAL_PAHLAVI","INSCRIPTIONAL_PARTHIAN","ITAL","JAVA","JAVANESE","KAITHI","KALI","KALI_LATN_MYMR","KANA","KANNADA","KATAKANA","KAWI","KAYAH_LI","KHAR","KHAROSHTHI","KHITAN_SMALL_SCRIPT","KHMER","KHMR","KHOJ","KHOJKI","KHUDAWADI","KITS","KNDA","KNDA_NAND","KTHI","LANA","LAO","LAOO","LATIN","LATN","LATN_MONG","LEPC","LEPCHA","LIMB","LIMBU","LINA","LINB","LINEAR_A","LINEAR_B","LISU","LYCI","LYCIAN","LYDI","LYDIAN","MAHAJANI","MAHJ","MAKA","MAKASAR","MALAYALAM","MAND","MANDAIC","MANI","MANICHAEAN","MANI_OUGR","MARC","MARCHEN","MASARAM_GONDI","MEDEFAIDRIN","MEDF","MEETEI_MAYEK","MEND","MENDE_KIKAKUI","MERC","MERO","MEROITIC_CURSIVE","MEROITIC_HIEROGLYPHS","MIAO","MLYM","MODI","MONG","MONGOLIAN","MONG_PHAG","MRO","MROO","MTEI","MULT","MULTANI","MYANMAR","MYMR","NABATAEAN","NAGM","NAG_MUNDARI","NAND","NANDINAGARI","NARB","NBAT","NEWA","NEW_TAI_LUE","NKO","NKOO","NSHU","NUSHU","NYIAKENG_PUACHUE_HMONG","OGAM","OGHAM","OLCK","OLD_HUNGARIAN","OLD_ITALIC","OLD_NORTH_ARABIAN","OLD_PERMIC","OLD_PERSIAN","OLD_SOGDIAN","OLD_SOUTH_ARABIAN","OLD_TURKIC","OLD_UYGHUR","OL_CHIKI","ORIYA","ORKH","ORYA","OSAGE","OSGE","OSMA","OSMANYA","OUGR","PAHAWH_HMONG","PALM","PALMYRENE","PAUC","PAU_CIN_HAU","PERM","PHAG","PHAGS_PA","PHLI","PHLP","PHNX","PHOENICIAN","PLRD","PRTI","PSALTER_PAHLAVI","REJANG","RJNG","ROHG","RUNIC","RUNR","SAMARITAN","SAMR","SARB","SAUR","SAURASHTRA","SGNW","SHARADA","SHAVIAN","SHAW","SHRD","SIDD","SIDDHAM","SIGNWRITING","SIND","SINH","SINHALA","SOGD","SOGDIAN","SOGO","SORA","SORA_SOMPENG","SOYO","SOYOMBO","SUND","SUNDANESE","SYLO","SYLOTI_NAGRI","SYRC","SYRIAC","TAGALOG","TAGB","TAGBANWA","TAI_LE","TAI_THAM","TAI_VIET","TAKR","TAKRI","TALE","TALU","TAMIL","TAML","TANG","TANGSA","TANGUT","TAVT","TELU","TELUGU","TFNG","TGLG","THAA","THAANA","THAI","TIBETAN","TIBT","TIFINAGH","TIRH","TIRHUTA","TNSA","TOTO","UGAR","UGARITIC","UNKNOWN","VAI","VAII","VITH","VITHKUQI","WANCHO","WARA","WARANG_CITI","WCHO","XPEO","XSUX","YEZI","YEZIDI","YI","YIII","ZANABAZAR_SQUARE","ZANB"],"q":[[0,"unicode_script"],[227,"unicode_script::script_extensions"]],"d":["Adlm","Ahom","Hluw","Arab","Armn","Avst","Bali","Bamu","Bass","Batk","Beng","Bhks","Bopo","Brah","Brai","Bugi","Buhd","Cans","Cari","Aghb","Cakm","Cham","Cher","Chrs","Zyyy","Copt","Xsux","Cprt","Cpmn","Cyrl","Dsrt","Deva","Diak","Dogr","Dupl","Egyp","Elba","Elym","Ethi","Geor","Glag","Goth","Gran","Grek","Gujr","Gong","Guru","Hani","Hang","Rohg","Hano","Hatr","Hebr","Hira","Armi","Zinh,","Phli","Prti","Java","Kthi","Knda","Kana","Kawi","Kali","Khar","Kits","Khmr","Khoj","Sind","Laoo","Latn","Lepc","Limb","Lina","Linb","Lisu","Lyci","Lydi","Mahj","Maka","Mlym","Mand","Mani","Marc","Gonm","Medf","Mtei","Mend","Merc","Mero","Plrd","Modi","Mong","Mroo","Mult","Mymr","Nbat","Nagm","Nand","Talu","Newa","Nkoo","Nshu","Hmnp","Ogam","Olck","Hung","Ital","Narb","Perm","Xpeo","Sogo","Sarb","Orkh","Ougr","Orya","Osge","Osma","Hmng","Palm","Pauc","Phag","Phnx","Phlp","Rjng","Runr","Samr","Saur","A value of the <code>Script</code> property","A value for the <code>Script_Extension</code> property","Iterator over scripts in a ScriptExtension.","Shrd","Shaw","Sidd","Sgnw","Sinh","Sogd","Sora","Soyo","Sund","Sylo","Syrc","Tglg","Tagb","Tale","Lana","Tavt","Takr","Taml","Tnsa","Tang","Telu","Thaa","Thai","Tibt","Tfng","Tirh","Toto","The version of Unicode that this version of unicode-script …","Ugar","Extension trait on <code>char</code> for calculating script properties","Unknown script","Vaii","Vith","Wcho","Wara","Yezi","Yiii","Zanb","","","","","","","","","Check if this ScriptExtension contains the given script","","","","","","","","","Get the intersection of script extensions of all characters","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Attempts to parse script name from the provided string. …","Attempts to parse script name from the provided string. …","Get the full name of a script.","","","Intersect this <code>ScriptExtension</code> with another <code>ScriptExtension</code>…","Find the intersection between two ScriptExtensions. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if the script extension is Common","Checks if the script extension is empty (unknown)","Checks if the script extension is Inherited","Is this script “Recommended” according to UAX #31?","Iterate over the scripts in this script extension","Returns the number of scripts in the script extension","","Get the script for a given character","Get the Script_Extension for a given character","","Get the four-character short name of a script.","","","","","","","","","","","Find the union between two ScriptExtensions.","Adlam","Adlam","Adlam, Arabic, Mandaic, Manichaean, Old_Uyghur, …","Adlam, Arabic, Nko, Hanifi_Rohingya, Syriac, Thaana, Yezidi","Caucasian_Albanian","Ahom","Anatolian_Hieroglyphs","Arabic","Arabic","Arabic, Coptic","Arabic, Nko","Arabic, Nko, Hanifi_Rohingya, Syriac, Thaana, Yezidi","Arabic, Hanifi_Rohingya","Arabic, Syriac","Arabic, Syriac, Thaana","Arabic, Thaana","Arabic, Thaana, Yezidi","Armenian","Imperial_Aramaic","Armenian","Avestan","Avestan","Balinese","Balinese","Bamum","Bamum","Bassa_Vah","Bassa_Vah","Batak","Batak","Bengali","Bengali","Bengali, Chakma, Syloti_Nagri","Bengali, Devanagari","Bengali, Devanagari, Dogra, Gunjala_Gondi, Masaram_Gondi, …","Bengali, Devanagari, Dogra, Gunjala_Gondi, Masaram_Gondi, …","Bengali, Devanagari, Grantha, Gujarati, Gurmukhi, Kannada, …","Bengali, Devanagari, Grantha, Gujarati, Gurmukhi, Kannada, …","Bengali, Devanagari, Grantha, Kannada","Bengali, Devanagari, Grantha, Kannada, Nandinagari, Oriya, …","Bhaiksuki","Bhaiksuki","Bopomofo","Bopomofo","Bopomofo, Hangul, Han, Hiragana, Katakana","Bopomofo, Hangul, Han, Hiragana, Katakana, Yi","Bopomofo, Han","Brahmi","Brahmi","Braille","Braille","Buginese","Buginese","Buginese, Javanese","Buhid","Buhid, Hanunoo, Tagbanwa, Tagalog","Buhid","Chakma","Chakma, Myanmar, Tai_Le","Canadian_Aboriginal","Canadian_Aboriginal","Carian","Carian","Caucasian_Albanian","Chakma","Cham","Cherokee","Cherokee","Chorasmian","Chorasmian","","Coptic","Coptic","Cypro_Minoan","Cypro_Minoan, Cypriot, Linear_B","Cypriot","Cypriot, Linear_A, Linear_B","Cypriot, Linear_B","Cuneiform","Cypriot","Cypro_Minoan","Cyrillic","Cyrillic","Cyrillic, Glagolitic","Cyrillic, Latin","Cyrillic, Old_Permic","Cyrillic, Syriac","Deseret","Devanagari","Devanagari","Devanagari, Dogra, Gujarati, Gurmukhi, Khojki, Kannada, …","Devanagari, Dogra, Gujarati, Gurmukhi, Khojki, Kannada, …","Devanagari, Dogra, Gujarati, Gurmukhi, Khojki, Kaithi, …","Devanagari, Dogra, Kaithi, Mahajani","Devanagari, Grantha","Devanagari, Grantha, Kannada","Devanagari, Grantha, Latin","Devanagari, Kannada, Malayalam, Oriya, Tamil, Telugu","Devanagari, Nandinagari","Devanagari, Sharada","Devanagari, Tamil","Dives_Akuru","Dives_Akuru","Dogra","Dogra","Deseret","Duployan","Duployan","Egyptian_Hieroglyphs","Egyptian_Hieroglyphs","Elbasan","Elbasan","Elymaic","Elymaic","Ethiopic","Ethiopic","Georgian","Georgian","Georgian, Latin","Glagolitic","Glagolitic","Gunjala_Gondi","Masaram_Gondi","Gothic","Gothic","Grantha","Grantha","Grantha, Tamil","Greek","Greek","Gujarati","Gujarati","Gujarati, Khojki","Gunjala_Gondi","Gurmukhi","Gurmukhi","Gurmukhi, Multani","Han","Hangul","Hangul","Han","Hanifi_Rohingya","Han, Hiragana, Katakana","Han, Latin","Hanunoo","Hanunoo","Hatran","Hatran","Hebrew","Hebrew","Hiragana","Hiragana","Hiragana, Katakana","Anatolian_Hieroglyphs","Pahawh_Hmong","Nyiakeng_Puachue_Hmong","Old_Hungarian","Imperial_Aramaic","","Inscriptional_Pahlavi","Inscriptional_Parthian","Old_Italic","Javanese","Javanese","Kaithi","Kayah_Li","Kayah_Li, Latin, Myanmar","Katakana","Kannada","Katakana","Kawi","Kayah_Li","Kharoshthi","Kharoshthi","Khitan_Small_Script","Khmer","Khmer","Khojki","Khojki","Khudawadi","Khitan_Small_Script","Kannada","Kannada, Nandinagari","Kaithi","Tai_Tham","Lao","Lao","Latin","Latin","Latin, Mongolian","Lepcha","Lepcha","Limbu","Limbu","Linear_A","Linear_B","Linear_A","Linear_B","Lisu","Lycian","Lycian","Lydian","Lydian","Mahajani","Mahajani","Makasar","Makasar","Malayalam","Mandaic","Mandaic","Manichaean","Manichaean","Manichaean, Old_Uyghur","Marchen","Marchen","Masaram_Gondi","Medefaidrin","Medefaidrin","Meetei_Mayek","Mende_Kikakui","Mende_Kikakui","Meroitic_Cursive","Meroitic_Hieroglyphs","Meroitic_Cursive","Meroitic_Hieroglyphs","Miao","Malayalam","Modi","Mongolian","Mongolian","Mongolian, Phags_Pa","Mro","Mro","Meetei_Mayek","Multani","Multani","Myanmar","Myanmar","Nabataean","Nag_Mundari","Nag_Mundari","Nandinagari","Nandinagari","Old_North_Arabian","Nabataean","Newa","New_Tai_Lue","Nko","Nko","Nushu","Nushu","Nyiakeng_Puachue_Hmong","Ogham","Ogham","Ol_Chiki","Old_Hungarian","Old_Italic","Old_North_Arabian","Old_Permic","Old_Persian","Old_Sogdian","Old_South_Arabian","Old_Turkic","Old_Uyghur","Ol_Chiki","Oriya","Old_Turkic","Oriya","Osage","Osage","Osmanya","Osmanya","Old_Uyghur","Pahawh_Hmong","Palmyrene","Palmyrene","Pau_Cin_Hau","Pau_Cin_Hau","Old_Permic","Phags_Pa","Phags_Pa","Inscriptional_Pahlavi","Psalter_Pahlavi","Phoenician","Phoenician","Miao","Inscriptional_Parthian","Psalter_Pahlavi","Rejang","Rejang","Hanifi_Rohingya","Runic","Runic","Samaritan","Samaritan","Old_South_Arabian","Saurashtra","Saurashtra","SignWriting","Sharada","Shavian","Shavian","Sharada","Siddham","Siddham","SignWriting","Khudawadi","Sinhala","Sinhala","Sogdian","Sogdian","Old_Sogdian","Sora_Sompeng","Sora_Sompeng","Soyombo","Soyombo","Sundanese","Sundanese","Syloti_Nagri","Syloti_Nagri","Syriac","Syriac","Tagalog","Tagbanwa","Tagbanwa","Tai_Le","Tai_Tham","Tai_Viet","Takri","Takri","Tai_Le","New_Tai_Lue","Tamil","Tamil","Tangut","Tangsa","Tangut","Tai_Viet","Telugu","Telugu","Tifinagh","Tagalog","Thaana","Thaana","Thai","Tibetan","Tibetan","Tifinagh","Tirhuta","Tirhuta","Tangsa","Toto","Ugaritic","Ugaritic","","Vai","Vai","Vithkuqi","Vithkuqi","Wancho","Warang_Citi","Warang_Citi","Wancho","Old_Persian","Cuneiform","Yezidi","Yezidi","Yi","Yi","Zanabazar_Square","Zanabazar_Square"],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,10,1,2,10,1,2,1,2,2,1,2,1,2,1,1,2,2,2,10,1,1,2,2,2,2,1,1,1,1,2,2,2,10,1,2,10,2,2,2,1,2,2,10,14,14,0,1,10,1,1,2,10,1,2,10,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[2,1],3],[[],1],[[],2],[[1,1],3],[[2,2],3],[[1,4],5],[[1,4],5],[[2,4],5],[[2,4],5],[6,2],[[]],[[]],[7,1],[[]],[1,2],[7,2],[6,2],[6,[[8,[1]]]],[6,[[8,[1]]]],[1,6],[[1,9]],[[2,9]],[[2,2]],[[2,2],2],[[]],[[]],[[]],[[]],[2,3],[2,3],[2,3],[1,3],[2,10],[2,11],[10,[[8,[1]]]],[[],1],[[],2],0,[1,6],[[],12],[[],12],[2,[[12,[1]]]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[2,2],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[4,"Script"],[3,"ScriptExtension"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[15,"char"],[4,"Option"],[8,"Hasher"],[3,"ScriptIterator"],[15,"usize"],[4,"Result"],[3,"TypeId"],[8,"UnicodeScript"]]},\
"unicode_segmentation":{"doc":"Iterators which split strings on Grapheme Cluster, Word or …","t":"DEDDNNNNRDDDDIDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKK","n":["GraphemeCursor","GraphemeIncomplete","GraphemeIndices","Graphemes","InvalidOffset","NextChunk","PreContext","PrevChunk","UNICODE_VERSION","USentenceBoundIndices","USentenceBounds","UWordBoundIndices","UWordBounds","UnicodeSegmentation","UnicodeSentences","UnicodeWordIndices","UnicodeWords","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","cur_cursor","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","grapheme_indices","graphemes","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_boundary","new","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_boundary","prev_boundary","provide_context","set_cursor","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_sentence_bound_indices","split_sentence_bounds","split_word_bound_indices","split_word_bounds","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode_sentences","unicode_word_indices","unicode_words"],"q":[[0,"unicode_segmentation"]],"d":["Cursor-based segmenter for grapheme clusters.","An error return indicating that not enough content was …","External iterator for grapheme clusters and byte offsets.","External iterator for a string’s grapheme clusters.","An error returned when the chunk given does not contain …","When requesting <code>next_boundary</code>, the cursor is moving past …","More pre-context is needed. The caller should call …","When requesting <code>prev_boundary</code>, the cursor is moving past …","The version of Unicode that this version of …","External iterator for sentence boundaries and byte offsets.","External iterator for a string’s sentence boundaries.","External iterator for word boundaries and byte offsets.","External iterator for a string’s word boundaries.","Methods for segmenting strings according to Unicode …","An iterator over the substrings of a string which, after …","An iterator over the substrings of a string which, after …","An iterator over the substrings of a string which, after …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current offset of the cursor. Equal to the last value …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an iterator over the grapheme clusters of <code>self</code> and …","Returns an iterator over the grapheme clusters of <code>self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Determine whether the current cursor location is a …","Create a new cursor. The string and initial offset are …","","","","","","","","","","","","","","","","Find the next boundary after the current cursor position. …","Find the previous boundary after the current cursor …","Provide additional pre-context when it is needed to decide …","Set the cursor to a new location in the same string.","","","","","","","Returns an iterator over substrings of <code>self</code>, split on …","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over substrings of <code>self</code>, split on …","Returns an iterator over substrings of <code>self</code> separated on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over the words of <code>self</code>, separated on …","Returns an iterator over the words of <code>self</code>, separated on …"],"i":[0,0,0,0,11,11,11,11,0,0,0,0,0,0,0,0,0,1,3,4,5,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,6,11,7,8,9,4,5,1,3,6,7,8,9,4,5,6,11,3,6,11,16,18,1,3,6,11,7,8,9,4,5,20,20,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,7,8,9,4,5,6,6,16,18,1,3,7,8,9,4,5,16,18,1,3,4,5,6,6,6,6,1,3,8,9,4,5,20,20,20,20,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,6,11,7,8,9,4,5,16,18,1,3,6,11,7,8,9,4,5,20,20,20],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],[4,2],[5,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[3,3],[6,6],[7,7],[8,8],[9,9],[4,4],[5,5],[6,10],[[11,11],12],[[3,13],14],[[6,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,1],[12,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,2,10],[[15,[12,11]]]],[[10,10,12],6],[16,[[17,[2]]]],[18,17],[1,17],[3,[[17,[2]]]],[7,[[17,[2]]]],[8,[[17,[2]]]],[9,17],[4,[[17,[2]]]],[5,17],[16,[[17,[2]]]],[18,17],[1,17],[3,[[17,[2]]]],[4,[[17,[2]]]],[5,17],[[6,2,10],[[15,[[17,[10]],11]]]],[[6,2,10],[[15,[[17,[10]],11]]]],[[6,2,10]],[[6,10]],[1],[3],[8],[9],[4],[5],[[],9],[[],8],[[],5],[[],4],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],7],[[],18],[[],16]],"c":[],"p":[[3,"GraphemeIndices"],[15,"str"],[3,"Graphemes"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[3,"GraphemeCursor"],[3,"UnicodeSentences"],[3,"USentenceBounds"],[3,"USentenceBoundIndices"],[15,"usize"],[4,"GraphemeIncomplete"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"UnicodeWords"],[4,"Option"],[3,"UnicodeWordIndices"],[3,"TypeId"],[8,"UnicodeSegmentation"]]},\
"yazi":{"doc":"Yet another zlib implementation.","t":"DNNEEDDNNDDENNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Adler32","BestSize","BestSpeed","CompressionLevel","CompressionStrategy","Decoder","DecoderStream","Default","Default","Encoder","EncoderStream","Error","Filtered","Finished","Format","Huffman","InvalidBitstream","Io","None","Overflow","RLE","Raw","Specific","Static","Underflow","Zlib","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compress","compressed_size","decompress","decompressed_size","default","drop","drop","eq","eq","finish","finish","finish","flush","flush","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_buf","into","into","into","into","into","into","into","into","into","new","new","new","set_format","set_format","set_level","set_strategy","stream","stream","stream_into_buf","stream_into_buf","stream_into_vec","stream_into_vec","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","write","write","write","write"],"q":[[0,"yazi"]],"d":["Rolling Adler-32 checksum.","Slower compression for smaller size.","Fast compression.","The level of compression– a compromise between speed and …","Selects between various specialized compressor modes.","Stateful context for decompression.","Decompression stream combining a decoder context with an …","Compromise between speed and size.","Let it do its thing.","Stateful context for compression.","Compression stream combining an encoder context with an …","Errors that may occur during compression or decompression.","Ignore matches fewer than 5 bytes.","Attempt to write into a finished stream.","Defines the format for a compressed bitstream.","Huffman encoding only.","The bitstream was corrupt.","A system I/O error.","No compression. Outputs raw blocks.","Output buffer was too small.","Run-length encoding only.","Raw DEFLATE data.","A specific compression level from 1-10.","Static blocks only.","Not enough input was provided.","Zlib header with an Adler-32 footer.","","","","","","","","","","","","","","","","","","","Creates a new deflate decoder on the heap.","Creates a new deflate encoder on the heap.","","","","","","","","","Compresses a buffer into a vector with the specified …","Returns the number of compressed bytes that have been …","Decompresses a buffer of the specified format into a …","Returns the number of decompressed bytes that have been …","","","","","","Consumes the stream, flushing any input that may be …","Consumes the stream, flushing any input that may be …","Returns the checksum.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a checksum from a buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new deflate decoder.","Creates a new deflate encoder. Note that creating an …","Creates a new checksum initialized to the default value.","Sets the expected format of the input data for the next …","Sets the format of the output bitstream for the next usage …","Sets the compression level for the next usage of the …","Sets the compression strategy for the next usage of the …","Creates a decoder stream that will write into the …","Creates an encoder stream that will write into the …","Creates a decoder stream that will write into the …","Creates an encoder stream that will write into the …","Creates a decoder stream that will write into the …","Creates an encoder stream that will write into the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates the checksum with bytes provided by the specified …","Writes the specified buffer to the stream, producing …","","","Writes the specified buffer to the stream, producing …"],"i":[0,4,4,0,0,0,0,4,5,0,0,0,5,11,0,5,11,11,4,11,5,6,4,5,11,6,1,15,3,13,4,5,6,11,7,1,15,3,13,4,5,6,11,7,1,3,4,5,6,7,4,5,6,7,0,13,0,15,7,15,13,4,6,15,13,7,15,13,4,6,11,1,15,3,13,4,5,6,11,11,7,7,1,15,3,13,4,5,6,11,7,1,3,7,1,3,3,3,1,3,1,3,1,3,4,5,6,7,1,15,3,13,4,5,6,11,7,1,15,3,13,4,5,6,11,7,1,15,3,13,4,5,6,11,7,7,15,15,13,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[2,[1]]]],[[],[[2,[3]]]],[4,4],[5,5],[6,6],[7,7],[[]],[[]],[[]],[[]],[[[9,[8]],6,4],[[12,[[10,[8]],11]]]],[[[13,[0]]],14],[[[9,[8]],6],[[12,[11]]]],[[[15,[0]]],14],[[],7],[[[15,[0]]]],[[[13,[0]]]],[[4,4],16],[[6,6],16],[[[15,[0]]],[[12,[11]]]],[[[13,[0]]],[[12,[14,11]]]],[7,17],[[[15,[0]]],18],[[[13,[0]]],18],[[4,19],20],[[6,19],20],[[11,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,11],[[]],[[]],[[[9,[8]]],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],3],[[],7],[[1,6]],[[3,6]],[[3,4]],[[3,5]],[[1,22],[[15,[0]]]],[[3,22],[[13,[0]]]],[[1,[9,[8]]],[[15,[0]]]],[[3,[9,[8]]],[[13,[0]]]],[[1,[10,[8]]],[[15,[0]]]],[[3,[10,[8]]],[[13,[0]]]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[7,[9,[8]]]],[[[15,[0]],[9,[8]]],[[12,[11]]]],[[[15,[0]],[9,[8]]],[[18,[24]]]],[[[13,[0]],[9,[8]]],[[18,[24]]]],[[[13,[0]],[9,[8]]],[[12,[11]]]]],"c":[],"p":[[3,"Decoder"],[3,"Box"],[3,"Encoder"],[4,"CompressionLevel"],[4,"CompressionStrategy"],[4,"Format"],[3,"Adler32"],[15,"u8"],[15,"slice"],[3,"Vec"],[4,"Error"],[4,"Result"],[3,"EncoderStream"],[15,"u64"],[3,"DecoderStream"],[15,"bool"],[15,"u32"],[6,"Result"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"Write"],[3,"TypeId"],[15,"usize"]]},\
"zeno":{"doc":"This crate provides a high performance, low level 2D …","t":"NDEENNDNENNEQNNNNNENEDSENNNDNNNNNNEIIDGNNNNNDNNNDNENNDDEEDDSSLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLKKLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMFLLKMMLMKLLLLLLLLLLLLLLLLMLLLLKLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLMMLLLLMMMMMMMM","n":["Alpha","Angle","ArcSize","ArcSweep","Bevel","BottomLeft","Bounds","Butt","Cap","Close","Close","Command","Commands","CurveTo","CurveTo","CustomSubpixel","End","EvenOdd","Fill","Fill","Format","HitTest","IDENTITY","Join","Large","LineTo","LineTo","Mask","Middle","Miter","MoveTo","MoveTo","Negative","NonZero","Origin","PathBuilder","PathData","Placement","Point","Positive","QuadTo","QuadTo","Round","Round","Scratch","Small","Square","Start","Stroke","Stroke","Style","Subpixel","TopLeft","Transform","Vector","Verb","Vertex","Vertices","Walk","ZERO","ZERO","add","add_circle","add_circle","add_ellipse","add_ellipse","add_rect","add_rect","add_round_rect","add_round_rect","angle_to","apply","apply","arc_to","arc_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","buffer_size","cap","caps","ceil","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","commands","compute","contains","copy_to","copy_to","cross","current_point","curve_to","dash","dashes","default","default","default","default","default","default","default","default","default","default","determinant","distance_to","div","div","dot","end_cap","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_degrees","from_gradians","from_points","from_radians","from_turns","height","height","inspect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","invert","is_empty","is_stroke","join","join","left","length","length","length_squared","line_to","max","min","miter_limit","miter_limit","move_to","mul","mul","nearly_eq","nearly_eq_by","new","new","new","new","new","new","new","new","new","next","normalize","offset","offset","origin","pre_rotate","pre_scale","pre_translate","quad_to","rel_arc_to","rel_arc_to","rel_curve_to","rel_curve_to","rel_line_to","rel_line_to","rel_move_to","rel_move_to","rel_quad_to","rel_quad_to","remaining","render","render_into","render_offset","rotation","rotation_about","scale","scale","scale","size","skew","start_cap","step","style","style","sub","subpixel_bgra","test","then","then_rotate","then_scale","then_translate","threshold","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","top","transform","transform","transform","transform_point","transform_vector","translation","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_svg","verb","width","width","width","width","with_scratch","with_scratch","with_transform","with_transform","x","x","xx","xy","y","y","yx","yy"],"q":[[0,"zeno"]],"d":["8-bit alpha mask.","Represents an angle in degrees or radians.","Describes the size of an arc.","Describes the sweep direction for an arc.","A straight line connecting the segments.","Origin (0, 0) at the bottom left of the image.","Axis-aligned bounding box.","Flat cap.","Defines the shape to be drawn at the beginning or end of a …","Closes a subpath, connecting the final point to the …","","Path command.","Command iterator.","A cubic bezier curve from the previous point to the final …","","32-bit RGBA subpixel mask with custom offsets.","The incoming direction and location of the final vertex in …","The even-odd fill rule.","Describes the visual style of a fill.","","The desired output image format for rendering.","Builder for configuring and executing a hit test.","Identity matrix.","Defines the connection between two segments of a stroke.","An arc of &gt;= 180 degrees will be drawn.","A straight line from the previous point to the specified …","","Builder for configuring and rendering a mask.","The incoming direction, location, and outgoing direction …","The segments are extended to their natural intersection …","Begins a new subpath at the specified point.","","The arc is drawn in a negative angle direction.","The non-zero fill rule.","The origin of the coordinate system for rendering.","Trait for types that accept path commands.","Trait for types that represent path data.","Describes the offset and dimensions of a rendered mask.","Alias for vector to distinguish intended use.","The arc is drawn in a positive angle direction.","A quadratic curve from the previous point to the final …","","An arc between the segments.","Rounded cap with radius equal to half the stroke width.","Scratch memory for reusable heap allocations.","An arc of &lt;= 180 degrees will be drawn.","Square cap with dimensions equal to half the stroke width.","The start point and direction of a subpath.","Describes the visual style of a stroke.","","Represents the style of a path for rendering or hit …","32-bit RGBA subpixel mask with 1/3 pixel offsets for the …","Origin (0, 0) at the top left of the image.","Two dimensional transformation matrix.","Two dimensional vector.","Action of a path command.","A vertex of a path.","An iterator over the vertices of a path.","An iterator like type that walks along a path by arbitrary …","Angle of zero degrees.","Vector with both components set to zero.","","Adds a circle with the specified center and radius to the …","Adds a circle with the specified center and radius to the …","Adds an ellipse with the specified center and radii to the …","Adds an ellipse with the specified center and radii to the …","Adds a rectangle with the specified position and size to …","Adds a rectangle with the specified position and size to …","Adds a rounded rectangle with the specified position, size …","Adds a rounded rectangle with the specified position, size …","Returns the angle to the specified vector.","Applies the style and transform to the path and emits the …","Applies the style and transform to the path and emits the …","Adds an arc with the specified x- and y-radius, rotation …","Adds an arc with the specified x- and y-radius, rotation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the bounding box of the path.","Computes the bounding box of the path.","Returns the necessary buffer size to hold an image of the …","Sets the cap style that will be generated at the start and …","Sets both the start and end cap styles for the stroke.","Returns a new vector containing the smallest integer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Closes the current subpath.","Returns an iterator over the commands described by the …","Given an origin, offset and bounding box, computes the …","Returns true if the box contains the specified point.","Copies the path data into the specified sink.","Copies the path data into the specified sink.","Computes the cross product of two vectors.","Returns the current point of the path.","Adds a cubic bezier curve from the current point through …","Sets the dash array and offset of the stroke. The default …","Lengths of dashes in alternating on/off order.","","","","","","","","","","","Returns the determinant of the transform.","Returns the distance between two points.","","","Computes the dot product of two vectors.","Style for capping the end of an open subpath.","","","","","","","","","","","","","","","","","","Returns a new vector containing the largest integer values …","","","","","","","","","","","","","","","","Sets the desired format of the mask. The default value is …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new angle from degrees.","Creates a new angle from gradians.","Creates a new bounding box from a sequence of points.","Creates a new angle from radians.","Creates a new angle from turns.","Returns the height of the bounding box.","Height in pixels.","Invokes a closure with the format, width and height of the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the inverse of the transform, if any.","Returns true if the bounding box is empty.","Returns true if the style is a stroke.","Sets the join style that determines how individual …","Style for connecting segments of the stroke.","Horizontal offset with respect to the origin specified …","Computes the total length of the path.","Returns the length of the vector.","Returns the squared length of the vector.","Adds a line to the specified point. This will begin a new …","","","Sets the limit for miter joins beyond which a bevel will …","Limit for miter joins.","Moves to the specified point, beginning a new subpath.","","","Returns true if this vector is approximately equal to …","Returns true if this vector is approximately equal to …","Creates a new hit test builder for the specified path data.","Creates a new mask builder for the specified path data.","Creates a new iterator like type that steps along a path …","Creates a new vector with the specified coordinates.","Creates a new transform.","Creates a new bounding box from minimum and maximum points.","Creates a new scratch memory context.","Creates a new stroke style with the specified width.","Creates a new iterator over the vertices of a path.","","Returns a normalized copy of the vector.","Sets the offset for the path.","Offset of the first dash.","Sets the origin that defines the coordinate system for the …","Returns a new transform that represents a rotation …","Returns a new transform that represents a scale followed …","Returns a new transform that represents a translation …","Adds a quadratic bezier curve from the current point …","Adds an arc with the specified x- and y-radius, rotation …","Adds an arc with the specified x- and y-radius, rotation …","Adds a cubic bezier curve from the current point through …","Adds a cubic bezier curve from the current point through …","Adds a line to the specified point, relative to the …","Adds a line to the specified point, relative to the …","Moves to the specified point, relative to the current …","Moves to the specified point, relative to the current …","Adds a quadratic bezier curve from the current point …","Adds a quadratic bezier curve from the current point …","Returns the remaining distance available to walk on the …","Renders the mask to a newly allocated buffer.","Renders the mask into a byte buffer. If specified, the …","Sets an additional rendering offset for the mask. This …","Creates a rotation transform.","Creates a rotation transform around a point.","Creates a scale transform.","Sets whether or not scaling is applied to the stroke. The …","True if the stroke width should be affected by the scale …","Sets an explicit size for the mask. If left unspecified, …","Creates a skew transform.","Style for capping the beginning of an open subpath.","Steps by the specified distance and returns the point at …","Sets the style of the path.","Sets the style of the path. The default is a non-zero fill.","","Creates a format for BGRA subpixel rendering.","Returns true if the specified point is painted by the path.","Returns a new transform that represents the application of …","Returns a new transform that represents this transform …","Returns a new transform that represents this transform …","Returns a new transform that represents this transform …","Sets the threshold value for determining whether a hit …","Returns the angle in degrees.","","","","","","","","","","","","","","","","","","","Returns the angle in radians.","Vertical offset with respect to the origin specified when …","Sets the transformation matrix of the path.","Sets the transformation matrix of the path.","Returns the result of a transformation matrix applied to …","Returns the result of applying this transform to a point.","Returns the result of applying this transform to a vector.","Creates a translation transform.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an error indicating the first position of invalid …","Returns the associated verb for the command.","Returns the width of the bounding box.","Sets the width of the stroke. The default is 1.","Width in pixels.","Width of the stroke.","Creates a new hit test builder for the specified path data …","Creates a new mask builder for the specified path data and …","Creates a new iterator like type that steps along a …","Creates a new iterator over the vertices of a transformed …","","","","","","","",""],"i":[16,0,0,0,25,23,0,20,0,21,22,0,6,21,22,16,26,11,0,7,0,0,8,0,13,21,22,0,26,25,21,22,14,11,0,0,0,0,0,14,21,22,25,20,0,13,20,26,0,7,0,16,23,0,0,0,0,0,0,5,1,1,10,10,10,10,10,10,10,10,1,0,12,10,10,38,33,40,21,22,5,1,8,23,24,15,16,13,14,12,11,25,20,19,7,26,28,38,33,40,21,22,5,1,8,23,24,15,16,13,14,12,11,25,20,19,7,26,28,0,12,16,19,19,1,21,22,5,1,8,23,24,15,16,13,14,11,25,20,19,7,26,28,21,22,5,1,8,23,24,15,16,13,14,11,25,20,19,7,26,28,10,6,24,15,6,6,1,10,10,19,19,5,1,8,23,24,15,16,12,19,7,8,1,1,1,1,19,21,22,5,1,23,16,13,14,11,25,20,26,22,23,11,25,20,1,21,22,5,1,8,23,24,15,16,11,25,20,19,7,26,33,38,33,40,21,22,5,1,1,1,1,1,1,1,1,1,8,23,24,15,16,13,14,12,11,25,20,19,7,7,7,7,7,26,28,5,5,15,5,5,15,24,33,38,33,40,21,22,5,1,8,23,24,15,16,13,14,12,11,25,20,19,7,26,28,28,8,15,7,19,19,24,0,1,1,10,15,15,19,19,10,1,1,1,1,38,33,40,1,8,15,12,19,28,28,1,33,19,33,8,8,8,10,10,10,10,10,10,10,10,10,10,10,40,33,33,33,8,8,8,19,19,33,8,19,40,38,33,1,16,38,8,8,8,8,38,5,21,22,5,1,8,23,24,15,16,13,14,11,25,20,19,7,26,28,5,24,38,33,21,8,8,8,38,33,40,21,22,5,1,8,23,24,15,16,13,14,12,11,25,20,19,7,26,28,38,33,40,21,22,5,1,8,23,24,15,16,13,14,12,11,25,20,19,7,26,28,38,33,40,21,22,5,1,8,23,24,15,16,13,14,12,11,25,20,19,7,26,28,0,21,15,19,24,19,38,33,40,28,1,8,8,8,1,8,8,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[[3,[2]],4]],[[[3,[2]],4]],[[[3,[2]],4,4]],[[[3,[2]],4,4]],[[[3,[2]],4,4]],[[[3,[2]],4,4]],[[[3,[2]],4,4,4,4]],[[[3,[2]],4,4,4,4]],[[1,1],5],[[6,[3,[7]],[9,[8]],10],11],[[12,6,[3,[7]],[9,[8]],10],11],[[4,4,5,13,14,[3,[2]]]],[[4,4,5,13,14,[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,[3,[7]],[9,[8]]],15],[[12,6,[3,[7]],[9,[8]]],15],[[16,17,17],18],[[19,20],19],[[19,20,20],19],[1,1],[21,21],[22,22],[5,5],[1,1],[8,8],[23,23],[24,24],[15,15],[16,16],[13,13],[14,14],[11,11],[25,25],[20,20],[19,19],[7,7],[26,26],[[[28,[27]]],[[28,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[23,[3,[1]],15]],[[15,[3,[2]]],29],[10],[10],[[1,1],4],[[],2],[[[3,[2]],[3,[2]],[3,[2]]]],[[19,[30,[4]],4],19],0,[[],5],[[],1],[[],8],[[],23],[[],24],[[],15],[[],16],[[],12],[[],19],[[],7],[8,4],[[1,1],4],[[1,4],1],[[1,1],1],[[1,1],4],0,[[21,21],29],[[22,22],29],[[5,5],29],[[1,1],29],[[23,23],29],[[16,16],29],[[13,13],29],[[14,14],29],[[11,11],29],[[25,25],29],[[20,20],29],[[26,26],29],[[],29],[[],29],[[],29],[[],29],[[],29],[1,1],[[21,31],32],[[22,31],32],[[5,31],32],[[1,31],32],[[8,31],32],[[23,31],32],[[24,31],32],[[15,31],32],[[16,31],32],[[11,31],32],[[25,31],32],[[20,31],32],[[19,31],32],[[7,31],32],[[26,31],32],[[[33,[6]],16],[[33,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[34,[4]]],1],[[],1],[[],1],[[],1],[[],1],[4,1],[35,1],[[]],[[[34,[35]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,7],[19,7],[11,7],[19,7],[[]],[[]],[[]],[4,5],[4,5],[36,15],[4,5],[4,5],[15,4],0,[[[33,[6]],37],[[33,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,[[9,[8]]]],[15,29],[7,29],[[19,25],19],0,0,[[6,[9,[8]]],4],[1,4],[1,4],[[[3,[2]]]],0,0,[[19,4],19],0,[[[3,[2]]]],[[1,4],1],[[1,1],1],[[1,1],29],[[1,1,4],29],[6,[[38,[6]]]],[6,[[33,[6]]]],[6,[[40,[[0,[39,27]]]]]],[[4,4],1],[[4,4,4,4,4,4],8],[[2,2],15],[[],12],[4,19],[6,[[28,[[0,[39,27]]]]]],[[[28,[[0,[39,27]]]]],9],[1,1],[[[33,[6]],[3,[1]]],[[33,[6]]]],0,[[[33,[6]],23],[[33,[6]]]],[[8,5],8],[[8,4,4],8],[[8,4,4],8],[[[3,[2]],[3,[2]]]],[[4,4,5,13,14,[3,[2]]]],[[4,4,5,13,14,[3,[2]]]],[[[3,[2]],[3,[2]],[3,[2]]]],[[[3,[2]],[3,[2]],[3,[2]]]],[[[3,[2]]]],[[[3,[2]]]],[[[3,[2]]]],[[[3,[2]]]],[[[3,[2]],[3,[2]]]],[[[3,[2]],[3,[2]]]],[[[40,[[0,[39,27]]]]],4],[[[33,[6]]]],[[[33,[6]],[30,[41]],[9,[18]]],24],[[[33,[6]],[3,[1]]],[[33,[6]]]],[5,8],[[[3,[2]],5],8],[[4,4],8],[[19,29],19],0,[[[33,[6]],17,17],[[33,[6]]]],[[5,5],8],0,[[[40,[[0,[39,27]]]],4],9],[[[38,[6]],[3,[7]]],[[38,[6]]]],[[[33,[6]],[3,[7]]],[[33,[6]]]],[[1,1],1],[[],16],[[[38,[6]],[3,[2]]],29],[[8,8],8],[[8,5],8],[[8,4,4],8],[[8,4,4],8],[[[38,[6]],41],[[38,[6]]]],[5,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,4],0,[[[38,[6]],[9,[8]]],[[38,[6]]]],[[[33,[6]],[9,[8]]],[[33,[6]]]],[[21,8],21],[[8,2],2],[[8,1],1],[[4,4],8],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[44,[[42,[18]]]],[21,22],[15,4],[[19,4],19],0,0,[[6,12],[[38,[6]]]],[[6,12],[[33,[6]]]],[[6,8],[[40,[[0,[[0,[39,27]]]]]]]],[[6,8],[[28,[[0,[[0,[39,27]]]]]]]],0,0,0,0,0,0,0,0],"c":[],"p":[[3,"Vector"],[6,"Point"],[8,"Into"],[15,"f32"],[3,"Angle"],[8,"PathData"],[4,"Style"],[3,"Transform"],[4,"Option"],[8,"PathBuilder"],[4,"Fill"],[3,"Scratch"],[4,"ArcSize"],[4,"ArcSweep"],[3,"Bounds"],[4,"Format"],[15,"u32"],[15,"usize"],[3,"Stroke"],[4,"Cap"],[4,"Command"],[4,"Verb"],[4,"Origin"],[3,"Placement"],[4,"Join"],[4,"Vertex"],[8,"Clone"],[3,"Vertices"],[15,"bool"],[15,"slice"],[3,"Formatter"],[6,"Result"],[3,"Mask"],[15,"array"],[15,"i32"],[8,"IntoIterator"],[8,"FnMut"],[3,"HitTest"],[8,"Iterator"],[3,"Walk"],[15,"u8"],[4,"Result"],[3,"TypeId"],[15,"str"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
